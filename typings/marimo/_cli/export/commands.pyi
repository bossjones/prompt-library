"""
This type stub file was generated by pyright.
"""

import click
import marimo._cli.cli_validators as validators
from typing import Callable, Literal, TYPE_CHECKING
from marimo._server.export import ExportResult
from marimo._utils.marimo_path import MarimoPath

if TYPE_CHECKING:
    ...
@click.group(help="""Export a notebook to various formats.""")
def export() -> None:
    ...

def watch_and_export(marimo_path: MarimoPath, output: str, watch: bool, export_callback: Callable[[MarimoPath], ExportResult]) -> None:
    ...

@click.command(help="""Run a notebook and export it as an HTML file.

Example:

  \b
  * marimo export html notebook.py -o notebook.html

Optionally pass CLI args to the notebook:

  \b
  * marimo export html notebook.py -o notebook.html -- -arg1 foo -arg2 bar
""")
@click.option("--include-code/--no-include-code", default=True, show_default=True, type=bool, help="Include notebook code in the exported HTML file.")
@click.option("--watch/--no-watch", default=False, show_default=True, type=bool, help="""
    Watch notebook for changes and regenerate HTML on modification.
    If watchdog is installed, it will be used to watch the file.
    Otherwise, file watcher will poll the file every 1s.
    """)
@click.option("-o", "--output", type=str, default=None, help="""
    Output file to save the HTML to.
    If not provided, the HTML will be printed to stdout.
    """)
@click.argument("name", required=True, callback=validators.is_file_path)
@click.argument("args", nargs=-1, type=click.UNPROCESSED)
def html(name: str, include_code: bool, output: str, watch: bool, args: tuple[str]) -> None:
    """
    Run a notebook and export it as an HTML file.
    """
    ...

@click.command(help="""
Export a marimo notebook as a flat script, in topological order.

Example:

    \b
    * marimo export script notebook.py -o notebook.script.py

Watch for changes and regenerate the script on modification:

    \b
    * marimo export script notebook.py -o notebook.script.py --watch
""")
@click.option("--watch/--no-watch", default=False, show_default=True, type=bool, help="""
    Watch notebook for changes and regenerate the script on modification.
    If watchdog is installed, it will be used to watch the file.
    Otherwise, file watcher will poll the file every 1s.
    """)
@click.option("-o", "--output", type=str, default=None, help="""
    Output file to save the script to.
    If not provided, the script will be printed to stdout.
    """)
@click.argument("name", required=True, callback=validators.is_file_path)
def script(name: str, output: str, watch: bool) -> None:
    """
    Export a marimo notebook as a flat script, in topological order.
    """
    ...

@click.command(help="""
Export a marimo notebook as a code fenced Markdown file.

Example:

    \b
    * marimo export md notebook.py -o notebook.md

Watch for changes and regenerate the script on modification:

    \b
    * marimo export md notebook.py -o notebook.md --watch
""")
@click.option("--watch/--no-watch", default=False, show_default=True, type=bool, help="""
    Watch notebook for changes and regenerate the script on modification.
    If watchdog is installed, it will be used to watch the file.
    Otherwise, file watcher will poll the file every 1s.
    """)
@click.option("-o", "--output", type=str, default=None, help="""
    Output file to save the script to.
    If not provided, markdown will be printed to stdout.
    """)
@click.argument("name", required=True, callback=validators.is_file_path)
def md(name: str, output: str, watch: bool) -> None:
    """
    Export a marimo notebook as a code fenced markdown document.
    """
    ...

@click.command(help="""
Export a marimo notebook as a Jupyter notebook in topological order.

Example:

    \b
    * marimo export ipynb notebook.py -o notebook.ipynb

Watch for changes and regenerate the script on modification:

    \b
    * marimo export ipynb notebook.py -o notebook.ipynb --watch

Requires nbformat to be installed.
""")
@click.option("--sort", type=click.Choice(["top-down", "topological"]), default="topological", help="Sort cells top-down or in topological order.", show_default=True)
@click.option("--watch/--no-watch", default=False, show_default=True, type=bool, help="""
    Watch notebook for changes and regenerate the ipynb on modification.
    If watchdog is installed, it will be used to watch the file.
    Otherwise, file watcher will poll the file every 1s.
    """)
@click.option("-o", "--output", type=str, default=None, help="""
    Output file to save the ipynb file to. If not provided, the ipynb contents
    will be printed to stdout.
    """)
@click.option("--include-outputs/--no-include-outputs", default=False, show_default=True, type=bool, help="Run the notebook and include outputs in the exported ipynb file.")
@click.argument("name", required=True, callback=validators.is_file_path)
def ipynb(name: str, output: str, watch: bool, sort: Literal["top-down", "topological"], include_outputs: bool) -> None:
    """
    Export a marimo notebook as a Jupyter notebook in topological order.
    """
    ...
