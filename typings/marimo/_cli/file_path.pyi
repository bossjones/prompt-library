"""
This type stub file was generated by pyright.
"""

import abc
from tempfile import TemporaryDirectory
from typing import Optional, Tuple

def is_github_src(url: str, ext: str) -> bool:
    ...

def get_github_src_url(url: str) -> str:
    ...

class FileReader(abc.ABC):
    @abc.abstractmethod
    def can_read(self, name: str) -> bool:
        ...

    @abc.abstractmethod
    def read(self, name: str) -> Tuple[str, str]:
        """Read the file and return its content and filename."""
        ...



class LocalFileReader(FileReader):
    def can_read(self, name: str) -> bool:
        ...

    def read(self, name: str) -> Tuple[str, str]:
        ...



class GitHubIssueReader(FileReader):
    def can_read(self, name: str) -> bool:
        ...

    def read(self, name: str) -> Tuple[str, str]:
        ...



class StaticNotebookReader(FileReader):
    CODE_PREFIX = ...
    CODE_SUFFIX = ...
    FILENAME_PREFIX = ...
    FILENAME_SUFFIX = ...
    def can_read(self, name: str) -> bool:
        ...

    def read(self, name: str) -> Tuple[str, str]:
        ...



class GitHubSourceReader(FileReader):
    def can_read(self, name: str) -> bool:
        ...

    def read(self, name: str) -> Tuple[str, str]:
        ...



class GenericURLReader(FileReader):
    def can_read(self, name: str) -> bool:
        ...

    def read(self, name: str) -> Tuple[str, str]:
        ...



class FileContentReader:
    def __init__(self) -> None:
        ...

    def read_file(self, name: str) -> Tuple[str, str]:
        """
        Read the file and return its content and filename

        Args:
            name (str): File path or URL

        Raises:
            ValueError: If the file cannot be read

        Returns:
            Tuple[str, str]: File content and filename
        """
        ...



class FileHandler(abc.ABC):
    @abc.abstractmethod
    def can_handle(self, name: str) -> bool:
        ...

    @abc.abstractmethod
    def handle(self, name: str, temp_dir: TemporaryDirectory[str]) -> Tuple[str, Optional[TemporaryDirectory[str]]]:
        ...



class LocalFileHandler(FileHandler):
    def __init__(self, allow_new_file: bool, allow_directory: bool) -> None:
        ...

    def can_handle(self, name: str) -> bool:
        ...

    def handle(self, name: str, temp_dir: TemporaryDirectory[str]) -> Tuple[str, Optional[TemporaryDirectory[str]]]:
        ...



class RemoteFileHandler(FileHandler):
    def __init__(self) -> None:
        ...

    def can_handle(self, name: str) -> bool:
        ...

    def handle(self, name: str, temp_dir: TemporaryDirectory[str]) -> Tuple[str, Optional[TemporaryDirectory[str]]]:
        ...



def validate_name(name: str, allow_new_file: bool, allow_directory: bool) -> Tuple[str, Optional[TemporaryDirectory[str]]]:
    """
    Validate the file name and return the path to the file.

    Args:
        name (str): Local file path, URL, or directory path
        allow_new_file (bool): Whether to allow creating a new file
        allow_directory (bool): Whether to allow a directory

    Raises:
        ValueError: If the file name is invalid

    Returns:
        Path to the file and temporary directory
    """
    ...
