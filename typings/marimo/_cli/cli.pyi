"""
This type stub file was generated by pyright.
"""

import click
import marimo._cli.cli_validators as validators
from typing import Any, Optional
from marimo import __version__
from marimo._tutorials import Tutorial, tutorial_order

def helpful_usage_error(self: Any, file: Any = ...) -> None:
    ...

main_help_msg = ...
token_message = ...
token_password_message = ...
@click.group(help=main_help_msg)
@click.version_option(version=__version__, message="%(version)s")
@click.option("-l", "--log-level", default="WARN", type=click.Choice(["DEBUG", "INFO", "WARN", "ERROR", "CRITICAL"], case_sensitive=False), show_default=True, help="Choose logging level.")
@click.option("-q", "--quiet", is_flag=True, default=False, show_default=True, help="Suppress standard out.")
@click.option("-y", "--yes", is_flag=True, default=False, show_default=True, help="Automatic yes to prompts, running non-interactively.")
@click.option("-d", "--development-mode", is_flag=True, default=False, show_default=True, help="Run in development mode; enables debug logs and server autoreload.")
def main(log_level: str, quiet: bool, yes: bool, development_mode: bool) -> None:
    ...

edit_help_msg = ...
@main.command(help=edit_help_msg)
@click.option("-p", "--port", default=None, show_default=True, type=int, help="Port to attach to.")
@click.option("--host", default="127.0.0.1", show_default=True, type=str, help="Host to attach to.")
@click.option("--proxy", default=None, type=str, help="Address of reverse proxy.")
@click.option("--headless", is_flag=True, default=False, show_default=True, type=bool, help="Don't launch a browser.")
@click.option("--token/--no-token", default=True, show_default=True, type=bool, help=token_message)
@click.option("--token-password", default=None, show_default=True, type=str, help=token_password_message)
@click.option("--base-url", default="", show_default=True, type=str, help="Base URL for the server. Should start with a /.", callback=validators.base_url)
@click.option("--allow-origins", default=None, multiple=True, help="Allowed origins for CORS. Can be repeated. Use * for all origins.")
@click.option("--skip-update-check", is_flag=True, default=False, show_default=True, type=bool, help="Don't check if a new version of marimo is available for download.")
@click.option("--sandbox", is_flag=True, default=False, show_default=True, type=bool, help="""
    Run the command in an isolated virtual environment using
    'uv run --isolated'. Requires 'uv'.
    """)
@click.option("--profile-dir", default=None, type=str, hidden=True)
@click.argument("name", required=False)
@click.argument("args", nargs=-1, type=click.UNPROCESSED)
def edit(port: Optional[int], host: str, proxy: Optional[str], headless: bool, token: bool, token_password: Optional[str], base_url: str, allow_origins: Optional[tuple[str, ...]], skip_update_check: bool, sandbox: bool, profile_dir: Optional[str], name: Optional[str], args: tuple[str, ...]) -> None:
    ...

@main.command(help="Create a new notebook.")
@click.option("-p", "--port", default=None, show_default=True, type=int, help="Port to attach to.")
@click.option("--host", default="127.0.0.1", show_default=True, type=str, help="Host to attach to.")
@click.option("--proxy", default=None, type=str, help="Address of reverse proxy.")
@click.option("--headless", is_flag=True, default=False, show_default=True, type=bool, help="Don't launch a browser.")
@click.option("--token/--no-token", default=True, show_default=True, type=bool, help=token_message)
@click.option("--token-password", default=None, show_default=True, type=str, help=token_password_message)
@click.option("--base-url", default="", show_default=True, type=str, help="Base URL for the server. Should start with a /.", callback=validators.base_url)
@click.option("--sandbox", is_flag=True, default=False, show_default=True, type=bool, help="""
    Run the command in an isolated virtual environment using
    'uv run --isolated'. Requires `uv`.
    """)
def new(port: Optional[int], host: str, proxy: Optional[str], headless: bool, token: bool, token_password: Optional[str], base_url: str, sandbox: bool) -> None:
    ...

@main.command(help="""Run a notebook as an app in read-only mode.

If NAME is a url, the notebook will be downloaded to a temporary file.

Example:

  \b
  * marimo run notebook.py
""")
@click.option("-p", "--port", default=None, show_default=True, type=int, help="Port to attach to.")
@click.option("--host", default="127.0.0.1", show_default=True, type=str, help="Host to attach to.")
@click.option("--proxy", default=None, type=str, help="Address of reverse proxy.")
@click.option("--headless", is_flag=True, default=False, show_default=True, type=bool, help="Don't launch a browser.")
@click.option("--token/--no-token", default=False, show_default=True, type=bool, help=token_message)
@click.option("--token-password", default=None, show_default=True, type=str, help=token_password_message)
@click.option("--include-code", is_flag=True, default=False, show_default=True, type=bool, help="Include notebook code in the app.")
@click.option("--watch", is_flag=True, default=False, show_default=True, type=bool, help="""
    Watch the file for changes and reload the app.
    If watchdog is installed, it will be used to watch the file.
    Otherwise, file watcher will poll the file every 1s.
    """)
@click.option("--base-url", default="", show_default=True, type=str, help="Base URL for the server. Should start with a /.", callback=validators.base_url)
@click.option("--allow-origins", default=None, multiple=True, help="Allowed origins for CORS. Can be repeated.")
@click.option("--redirect-console-to-browser", is_flag=True, default=False, show_default=True, type=bool, help="Redirect console logs to the browser console.")
@click.option("--sandbox", is_flag=True, default=False, show_default=True, type=bool, help="""
    Run the command in an isolated virtual environment using
    'uv run --isolated'. Requires `uv`.
    """)
@click.argument("name", required=True)
@click.argument("args", nargs=-1, type=click.UNPROCESSED)
def run(port: Optional[int], host: str, proxy: Optional[str], headless: bool, token: bool, token_password: Optional[str], include_code: bool, watch: bool, base_url: str, allow_origins: tuple[str, ...], redirect_console_to_browser: bool, sandbox: bool, name: str, args: tuple[str, ...]) -> None:
    ...

@main.command(help="Recover a marimo notebook from JSON.")
@click.argument("name", required=True)
def recover(name: str) -> None:
    ...

@main.command(help="""Open a tutorial.

marimo is a powerful library for making reactive notebooks
and apps. To get the most out of marimo, get started with a few
tutorials, starting with the intro:

    \b
    marimo tutorial intro

Recommended sequence:

    \b
""" + "\n".join(f"    - {name}" for name in tutorial_order))
@click.option("-p", "--port", default=None, show_default=True, type=int, help="Port to attach to.")
@click.option("--host", default="127.0.0.1", show_default=True, type=str, help="Host to attach to.")
@click.option("--proxy", default=None, type=str, help="Address of reverse proxy.")
@click.option("--headless", is_flag=True, default=False, show_default=True, type=bool, help="Don't launch a browser.")
@click.option("--token/--no-token", default=True, show_default=True, type=bool, help=token_message)
@click.option("--token-password", default=None, show_default=True, type=str, help=token_password_message)
@click.argument("name", required=True, type=click.Choice(tutorial_order))
def tutorial(port: Optional[int], host: str, proxy: Optional[str], headless: bool, token: bool, token_password: Optional[str], name: Tutorial) -> None:
    ...

@main.command()
def env() -> None:
    """Print out environment information for debugging purposes.

    Example usage:

        marimo env
    """
    ...
