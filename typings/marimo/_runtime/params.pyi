"""
This type stub file was generated by pyright.
"""

from typing import Dict, Iterator, List, Optional, Union
from marimo._messaging.types import Stream
from marimo._output.rich_help import mddoc
from marimo._runtime.requests import ListOrValue, Primitive, SerializedCLIArgs, SerializedQueryParams
from marimo._runtime.state import State, StateRegistry

"""
This type stub file was generated by pyright.
"""
@mddoc
class QueryParams(State[SerializedQueryParams]):
    """Query parameters for a marimo app."""
    IGNORED_KEYS = ...
    def __init__(self, params: Dict[str, Union[str, List[str]]], stream: Optional[Stream] = ..., _registry: Optional[StateRegistry] = ...) -> None:
        ...
    
    def get(self, key: str) -> Optional[Union[str, List[str]]]:
        """Get the value of the query parameter.

        Returns a str if there is only one item, a list of str otherwise.
        """
        ...
    
    def get_all(self, key: str) -> List[str]:
        """Get the value of a query parameter as a list."""
        ...
    
    def __getitem__(self, key: str) -> Optional[Union[str, List[str]]]:
        ...
    
    def __contains__(self, key: str) -> bool:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __iter__(self) -> Iterator[str]:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __setitem__(self, key: str, value: Union[str, List[str]]) -> None:
        ...
    
    def __delitem__(self, key: str) -> None:
        ...
    
    def set(self, key: str, value: Union[str, List[str]]) -> None:
        """Set the value of a query parameter."""
        ...
    
    def append(self, key: str, value: str) -> None:
        """Append a value to a list of values"""
        ...
    
    def remove(self, key: str, value: Optional[str] = ...) -> None:
        """Remove a value from a list of values."""
        ...
    
    def clear(self) -> None:
        """Clear all query params."""
        ...
    
    def to_dict(self) -> Dict[str, Union[str, List[str]]]:
        ...
    


@mddoc
class CLIArgs:
    """CLI args passed to a marimo app."""
    def __init__(self, params: SerializedCLIArgs) -> None:
        ...
    
    def get(self, key: str) -> Optional[ListOrValue[Primitive]]:
        """Get the value of the CLI arg.

        Returns a singleton value if there is only one item,
        a list of values otherwise.
        """
        ...
    
    def get_all(self, key: str) -> List[Primitive]:
        """Get the value of a CLI arg as a list."""
        ...
    
    def __getitem__(self, key: str) -> Optional[ListOrValue[Primitive]]:
        ...
    
    def __contains__(self, key: str) -> bool:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __iter__(self) -> Iterator[ListOrValue[Primitive]]:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def to_dict(self) -> SerializedCLIArgs:
        ...
    


