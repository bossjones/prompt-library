"""
This type stub file was generated by pyright.
"""

import abc
import threading
from contextlib import contextmanager
from dataclasses import dataclass
from typing import Any, Iterator, Optional, TYPE_CHECKING
from marimo._config.config import MarimoConfig
from marimo._messaging.types import Stderr, Stdout, Stream
from marimo._runtime import dataflow
from marimo._runtime.cell_lifecycle_registry import CellLifecycleRegistry
from marimo._runtime.functions import FunctionRegistry
from marimo._ast.app import InternalApp
from marimo._ast.cell import CellId_t
from marimo._output.hypertext import Html
from marimo._plugins.ui._core.registry import UIElementRegistry
from marimo._runtime.params import CLIArgs, QueryParams
from marimo._runtime.state import State, StateRegistry
from marimo._runtime.virtual_file import VirtualFileRegistry

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
class GlobalContext:
    """Context shared by all sessions."""
    def __init__(self) -> None:
        ...
    
    @property
    def mpl_installed(self) -> bool:
        ...
    
    def set_mpl_installed(self, mpl_installed: bool) -> None:
        ...
    


_GLOBAL_CONTEXT = ...
def get_global_context() -> GlobalContext:
    ...

@dataclass
class ExecutionContext:
    cell_id: CellId_t
    setting_element_value: bool
    local_cell_id: Optional[CellId_t] = ...
    output: Optional[list[Html]] = ...


@dataclass
class RuntimeContext(abc.ABC):
    ui_element_registry: UIElementRegistry
    state_registry: StateRegistry
    function_registry: FunctionRegistry
    cell_lifecycle_registry: CellLifecycleRegistry
    virtual_file_registry: VirtualFileRegistry
    virtual_files_supported: bool
    stream: Stream
    stdout: Stdout | None
    stderr: Stderr | None
    children: list[RuntimeContext]
    parent: RuntimeContext | None
    filename: str | None
    @property
    @abc.abstractmethod
    def graph(self) -> dataflow.DirectedGraph:
        ...
    
    @property
    @abc.abstractmethod
    def globals(self) -> dict[str, Any]:
        ...
    
    @property
    @abc.abstractmethod
    def execution_context(self) -> ExecutionContext | None:
        ...
    
    @property
    @abc.abstractmethod
    def marimo_config(self) -> MarimoConfig:
        """
        Get the marimo configuration.
        This is a merged configuration from the user config and project config.
        """
        ...
    
    @property
    @abc.abstractmethod
    def cell_id(self) -> Optional[CellId_t]:
        """Get the cell id of the currently executing cell, if any."""
        ...
    
    @property
    @abc.abstractmethod
    def cli_args(self) -> CLIArgs:
        """Get the CLI args."""
        ...
    
    @property
    @abc.abstractmethod
    def query_params(self) -> QueryParams:
        """Get the query params."""
        ...
    
    @abc.abstractmethod
    def get_ui_initial_value(self, object_id: str) -> Any:
        ...
    
    @contextmanager
    @abc.abstractmethod
    def provide_ui_ids(self, prefix: str) -> Iterator[None]:
        ...
    
    @abc.abstractmethod
    def take_id(self) -> str:
        ...
    
    @abc.abstractmethod
    def register_state_update(self, state: State[Any]) -> None:
        ...
    
    @contextmanager
    @abc.abstractmethod
    def with_cell_id(self, cell_id: CellId_t) -> Iterator[None]:
        ...
    
    def add_child(self, runtime_context: RuntimeContext) -> None:
        ...
    
    def remove_child(self, runtime_context: RuntimeContext) -> None:
        ...
    
    @contextmanager
    def install(self) -> Iterator[None]:
        ...
    
    @property
    @abc.abstractmethod
    def app(self) -> InternalApp:
        ...
    


class _ThreadLocalContext(threading.local):
    """Thread-local container that holds thread/session-specific state."""
    def __init__(self) -> None:
        ...
    
    def initialize(self, runtime_context: RuntimeContext) -> None:
        ...
    


class ContextNotInitializedError(Exception):
    ...


_THREAD_LOCAL_CONTEXT = ...
def initialize_context(runtime_context: RuntimeContext) -> None:
    ...

def teardown_context() -> None:
    """Unset the context, for testing."""
    ...

def get_context() -> RuntimeContext:
    """Return the runtime context.

    Throws a ContextNotInitializedError if the context has not been
    created.
    """
    ...

def runtime_context_installed() -> bool:
    ...

