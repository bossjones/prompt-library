"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from dataclasses import dataclass
from typing import Any, Iterator, Optional, TYPE_CHECKING
from marimo._config.config import MarimoConfig
from marimo._messaging.types import Stderr, Stdout, Stream
from marimo._plugins.ui._core.ids import IDProvider
from marimo._runtime.context.types import ExecutionContext, RuntimeContext
from marimo._runtime.dataflow import DirectedGraph
from marimo._runtime.params import CLIArgs, QueryParams
from marimo._server.model import SessionMode
from marimo._ast.app import InternalApp
from marimo._ast.cell import CellId_t
from marimo._runtime.runtime import Kernel
from marimo._runtime.state import State

if TYPE_CHECKING:
    ...
@dataclass
class KernelRuntimeContext(RuntimeContext):
    """Encapsulates runtime state for a session."""
    _kernel: Kernel
    _session_mode: SessionMode
    _app: Optional[InternalApp] = ...
    _id_provider: Optional[IDProvider] = ...
    @property
    def graph(self) -> DirectedGraph:
        ...

    @property
    def globals(self) -> dict[str, Any]:
        ...

    @property
    def execution_context(self) -> ExecutionContext | None:
        ...

    @property
    def marimo_config(self) -> MarimoConfig:
        ...

    @property
    def lazy(self) -> bool:
        ...

    @property
    def cell_id(self) -> Optional[CellId_t]:
        """Get the cell id of the currently executing cell, if any."""
        ...

    @property
    def cli_args(self) -> CLIArgs:
        """Get the CLI args."""
        ...

    @property
    def query_params(self) -> QueryParams:
        """Get the query params."""
        ...

    @property
    def session_mode(self) -> SessionMode:
        """Get the session mode."""
        ...

    @contextmanager
    def provide_ui_ids(self, prefix: str) -> Iterator[None]:
        ...

    def take_id(self) -> str:
        ...

    def get_ui_initial_value(self, object_id: str) -> Any:
        ...

    def register_state_update(self, state: State[Any]) -> None:
        ...

    @contextmanager
    def with_cell_id(self, cell_id: CellId_t) -> Iterator[None]:
        ...

    @property
    def app(self) -> InternalApp:
        ...



def create_kernel_context(*, kernel: Kernel, stream: Stream, stdout: Stdout | None, stderr: Stderr | None, virtual_files_supported: bool, mode: SessionMode, app: InternalApp | None = ..., parent: KernelRuntimeContext | None = ...) -> KernelRuntimeContext:
    ...

def initialize_kernel_context(*, kernel: Kernel, stream: Stream, stdout: Stdout | None, stderr: Stderr | None, virtual_files_supported: bool, mode: SessionMode) -> None:
    """Initializes thread-local/session-specific context.

    Must be called exactly once for each client thread.
    """
    ...
