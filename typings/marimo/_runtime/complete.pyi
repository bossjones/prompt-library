"""
This type stub file was generated by pyright.
"""

import threading
from typing import Any, TYPE_CHECKING
from marimo._messaging.types import Stream
from marimo._runtime import dataflow
from marimo._runtime.requests import CodeCompletionRequest
from marimo._server.types import QueueType

if TYPE_CHECKING:
    ...
LOGGER = ...
def complete(request: CodeCompletionRequest, graph: dataflow.DirectedGraph, glbls: dict[str, Any], glbls_lock: threading.RLock, stream: Stream, docstrings_limit: int = ..., timeout: float | None = ..., prefer_interpreter_completion: bool = ...) -> None:
    """Gets code completions for a request.

    If `prefer_interpreter_completion`, a runtime-based method is used,
    falling back to a static analysis method. Otherwise the static method
    is used, with the interpreter method as a fallback.

    Static completions are safer since they don't execute code, but they
    are slower and sometimes fail. Interpreter executions are faster
    and more comprehensive, but can only be carried out when the kernel
    isn't executing or otherwise handling a request.

    **Args.**

    - `request`: the completion request
    - `graph`: dataflow graph backing the marimo program
    - `glbls`: global namespace
    - `glbls_lock`: lock protecting the global namespace, for interpreter-based
         completion
    - `stream`: Stream through which to communicate completion results
    - `docstrings_limit`: limit past which we won't attempt to fetch type hints
          and docstrings
    - `timeout`: timeout after which we'll stop fetching type hints/docstrings
    - `prefer_interpreter_completion`: whether to prefer interpreter completion
    """
    ...

def completion_worker(completion_queue: QueueType[CodeCompletionRequest], graph: dataflow.DirectedGraph, glbls: dict[str, Any], glbls_lock: threading.RLock, stream: Stream) -> None:
    """Code completion worker.


    **Args:**

    - `completion_queue`: queue from which requests are pulled.
    - `graph`: dataflow graph backing the marimo program
    - `glbls`: dictionary of global variables in interpreter memory
    - `glbls_lock`: lock protecting globals
    - `stream`: stream used to communicate completion results
    """
    ...
