"""
This type stub file was generated by pyright.
"""

import dataclasses
from typing import Any, Callable, Coroutine, Generic, Type, TypeVar
from marimo._ast.cell import CellId_t

"""
This type stub file was generated by pyright.
"""
LOGGER = ...
S = TypeVar("S")
T = TypeVar("T")
@dataclasses.dataclass
class EmptyArgs:
    """Utility type for functions that take no arguments."""
    ...


@dataclasses.dataclass
class Function(Generic[S, T]):
    name: str
    arg_cls: Type[S]
    function: Callable[[S], T] | Callable[[S], Coroutine[Any, Any, T]]
    cell_id: CellId_t | None
    def __init__(self, name: str, arg_cls: Type[S], function: Callable[[S], T]) -> None:
        ...
    
    def __call__(self, args: dict[Any, Any]) -> T | Coroutine[Any, Any, T]:
        ...
    


@dataclasses.dataclass
class FunctionNamespace:
    namespace: str
    functions: dict[str, Function[Any, Any]] = ...
    def add(self, function: Function[Any, Any]) -> None:
        ...
    
    def get(self, name: str) -> Function[Any, Any] | None:
        ...
    


class FunctionRegistry:
    def __init__(self) -> None:
        ...
    
    def register(self, namespace: str, function: Function[Any, Any]) -> None:
        ...
    
    def get_function(self, namespace: str, function_name: str) -> Function[Any, Any] | None:
        ...
    
    def delete(self, namespace: str) -> None:
        ...
    


