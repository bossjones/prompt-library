"""
This type stub file was generated by pyright.
"""

import dataclasses
from typing import Optional, TYPE_CHECKING
from marimo._runtime.cell_lifecycle_item import CellLifecycleItem
from marimo._utils.platform import is_pyodide
from collections.abc import Iterable
from marimo._runtime.context.types import RuntimeContext
from multiprocessing import shared_memory

if TYPE_CHECKING:
    ...
LOGGER = ...
if not is_pyodide():
    ...
_ALPHABET = ...
def random_filename(ext: str) -> str:
    ...

@dataclasses.dataclass
class VirtualFile:
    url: str
    filename: str
    buffer: bytes
    def __init__(self, filename: str, buffer: bytes, url: Optional[str] = ..., as_data_url: bool = ...) -> None:
        ...

    @staticmethod
    def from_external_url(url: str) -> VirtualFile:
        ...



EMPTY_VIRTUAL_FILE = ...
class VirtualFileLifecycleItem(CellLifecycleItem):
    def __init__(self, ext: str, buffer: bytes) -> None:
        ...

    def add_to_cell_lifecycle_registry(self) -> None:
        ...

    @property
    def virtual_file(self) -> VirtualFile:
        ...

    def create(self, context: RuntimeContext | None) -> None:
        """Create the virtual file

        Every virtual file gets a unique random name. Uniqueness is
        required for reference counting.
        """
        ...

    def dispose(self, context: RuntimeContext, deletion: bool) -> bool:
        ...



@dataclasses.dataclass
class VirtualFileRegistryItem:
    shm: shared_memory.SharedMemory
    refcount: int
    ...


@dataclasses.dataclass
class VirtualFileRegistry:
    """Registry of virtual files

    The registry maps virtual file filenames to their contents. Each
    registry item is reference counted: refcount > 0 means that an object
    exists somewhere that uses the virtual file.

    The registry itself doesn't maintain the reference counts, it only
    exposes methods for incrementing, decrementing, and getting the counts.
    """
    registry: dict[str, VirtualFileRegistryItem] = ...
    shutting_down = ...
    def __del__(self) -> None:
        ...

    def has(self, filename: str) -> bool:
        ...

    def filenames(self) -> Iterable[str]:
        ...

    def reference(self, filename: str) -> None:
        """Increment the reference count"""
        ...

    def dereference(self, filename: str) -> None:
        """Decrement the reference count"""
        ...

    def refcount(self, filename: str) -> int:
        """Get the reference count"""
        ...

    def add(self, virtual_file: VirtualFile, context: RuntimeContext) -> None:
        ...

    def remove(self, virtual_file: VirtualFile) -> None:
        ...

    def shutdown(self) -> None:
        ...



def read_virtual_file(filename: str, byte_length: int) -> bytes:
    ...
