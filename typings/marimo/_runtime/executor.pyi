"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Any, Callable, Optional, TYPE_CHECKING, Type
from marimo._ast.cell import CellImpl
from marimo._runtime.dataflow import DirectedGraph

if TYPE_CHECKING:
    ...
EXECUTION_TYPES: dict[str, Type[Executor]] = ...
class MarimoRuntimeException(BaseException):
    """Wrapper for all marimo runtime exceptions."""
    ...


class MarimoNameError(NameError):
    """Wrap a name error to rethrow later."""
    def __init__(self, msg: str, ref: str) -> None:
        ...



class MarimoMissingRefError(BaseException):
    def __init__(self, ref: str, name_error: Optional[NameError] = ...) -> None:
        ...



def raise_name_error(graph: Optional[DirectedGraph], name_error: NameError) -> None:
    ...

def register_execution_type(key: str) -> Callable[[Type[Executor]], Type[Executor]]:
    ...

async def execute_cell_async(cell: CellImpl, glbls: dict[str, Any], graph: DirectedGraph, execution_type: str = ...) -> Any:
    ...

def execute_cell(cell: CellImpl, glbls: dict[str, Any], graph: DirectedGraph, execution_type: str = ...) -> Any:
    ...

class Executor(ABC):
    @staticmethod
    @abstractmethod
    def execute_cell(cell: CellImpl, glbls: dict[str, Any], graph: DirectedGraph) -> Any:
        ...

    @staticmethod
    @abstractmethod
    async def execute_cell_async(cell: CellImpl, glbls: dict[str, Any], graph: DirectedGraph) -> Any:
        ...



@register_execution_type("relaxed")
class DefaultExecutor(Executor):
    @staticmethod
    async def execute_cell_async(cell: CellImpl, glbls: dict[str, Any], graph: Optional[DirectedGraph] = ...) -> Any:
        ...

    @staticmethod
    def execute_cell(cell: CellImpl, glbls: dict[str, Any], graph: Optional[DirectedGraph] = ...) -> Any:
        ...



@register_execution_type("strict")
class StrictExecutor(Executor):
    @staticmethod
    async def execute_cell_async(cell: CellImpl, glbls: dict[str, Any], graph: DirectedGraph) -> Any:
        ...

    @staticmethod
    def execute_cell(cell: CellImpl, glbls: dict[str, Any], graph: DirectedGraph) -> Any:
        ...

    @staticmethod
    def sanitize_inputs(cell: CellImpl, refs: set[str], glbls: dict[str, Any]) -> dict[str, Any]:
        ...

    @staticmethod
    def update_outputs(cell: CellImpl, glbls: dict[str, Any], backup: dict[str, Any]) -> None:
        ...
