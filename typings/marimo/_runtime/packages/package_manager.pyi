"""
This type stub file was generated by pyright.
"""

import abc
from dataclasses import dataclass
from typing import List, Optional

LOGGER = ...
@dataclass
class PackageDescription:
    name: str
    version: str
    ...


class PackageManager(abc.ABC):
    """Interface for a package manager that can install packages."""
    name: str
    docs_url: str
    def __init__(self) -> None:
        ...

    @abc.abstractmethod
    def module_to_package(self, module_name: str) -> str:
        """Canonicalizes a module name to a package name."""
        ...

    @abc.abstractmethod
    def package_to_module(self, package_name: str) -> str:
        """Canonicalizes a package name to a module name."""
        ...

    def is_manager_installed(self) -> bool:
        """Is the package manager is installed on the user machine?"""
        ...

    async def install(self, package: str, version: Optional[str]) -> bool:
        """Attempt to install a package that makes this module available.

        Returns True if installation succeeded, else False.
        """
        ...

    @abc.abstractmethod
    async def uninstall(self, package: str) -> bool:
        """Attempt to uninstall a package

        Returns True if the package was uninstalled, else False.
        """
        ...

    def attempted_to_install(self, package: str) -> bool:
        """True iff package installation was previously attempted."""
        ...

    def should_auto_install(self) -> bool:
        """Should this package manager auto-install packages"""
        ...

    def run(self, command: list[str]) -> bool:
        ...

    def update_notebook_script_metadata(self, filepath: str, *, packages_to_add: Optional[List[str]] = ..., packages_to_remove: Optional[List[str]] = ..., import_namespaces_to_add: Optional[List[str]] = ..., import_namespaces_to_remove: Optional[List[str]] = ...) -> None:
        ...

    @abc.abstractmethod
    def list_packages(self) -> List[PackageDescription]:
        """List installed packages."""
        ...

    def alert_not_installed(self) -> None:
        """Alert the user that the package manager is not installed."""
        ...



class CanonicalizingPackageManager(PackageManager):
    """Base class for package managers.

    Has a heuristic for mapping from package names to module names and back,
    using a registry of well-known packages and basic rules for package
    names.

    Subclasses needs to implement _construct_module_name_mapping.
    """
    def __init__(self) -> None:
        ...

    def module_to_package(self, module_name: str) -> str:
        """Canonicalizes a module name to a package name on PyPI."""
        ...

    def package_to_module(self, package_name: str) -> str:
        """Canonicalizes a package name to a module name."""
        ...
