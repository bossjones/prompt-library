"""
This type stub file was generated by pyright.
"""

from typing import Any, Type, TypeVar, Union

T = TypeVar("T")
def to_snake(string: str) -> str:
    ...

class DataclassParser:
    def __init__(self, allow_unknown_keys: bool = ...) -> None:
        ...

    def build_dataclass(self, values: dict[Any, Any], cls: Type[T]) -> T:
        """Returns instance of dataclass [cls] instantiated from [values]."""
        ...



def parse_raw(message: Union[bytes, dict[Any, Any]], cls: Type[T], allow_unknown_keys: bool = ...) -> T:
    """Utility to parse a message as JSON, and instantiate into supplied type.

    `cls` must be a dataclass.

    Supported collection types in the dataclass:
    - List, Tuple, Set, Dict
    - for Python 3.8 compatibility, must use collection types from
      the typing module (e.g., typing.List[int] instead of list[int])

    Transforms all fields in the parsed JSON from camel case to snake case.

    Args:
    ----
    message: the message to parse
    cls: the type to instantiate
    """
    ...
