"""
This type stub file was generated by pyright.
"""

import threading
import queue
from typing import Callable, Generic, TYPE_CHECKING, TypeVar, Union
from marimo._utils.disposable import Disposable
from marimo._utils.typed_connection import TypedConnection

if TYPE_CHECKING:
    ...
LOGGER = ...
T = TypeVar("T")
Consumer = Callable[[T], None]
class ConnectionDistributor(Generic[T]):
    """
    Used to distribute the response of a multiprocessing Connection to multiple
    consumers.

    This also handles adding and removing new consumers.

    NOTE: This class uses the `add_reader()` API, which requires the
    SelectorEventLoop to be used on Windows, not the default ProactorEventLoop.
    See

    https://bugs.python.org/issue37373#:~:text=On%20Windows%20there%20are%20two,subprocesses%20and%20generally%20lower%20scalability.

    for context.
    """
    def __init__(self, input_connection: TypedConnection[T]) -> None:
        ...

    def add_consumer(self, consumer: Consumer[T]) -> Disposable:
        """Add a consumer to the distributor."""
        ...

    def start(self) -> Disposable:
        """Start distributing the response."""
        ...

    def stop(self) -> None:
        """Stop distributing the response."""
        ...

    def flush(self) -> None:
        """Flush the distributor."""
        ...



class QueueDistributor(Generic[T]):
    def __init__(self, queue: queue.Queue[Union[T, None]]) -> None:
        ...

    def add_consumer(self, consumer: Consumer[T]) -> Disposable:
        """Add a consumer to the distributor."""
        ...

    def start(self) -> threading.Thread:
        ...

    def stop(self) -> None:
        ...

    def flush(self) -> None:
        """Flush the distributor."""
        ...
