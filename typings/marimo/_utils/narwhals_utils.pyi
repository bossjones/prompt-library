"""
This type stub file was generated by pyright.
"""

import sys
import narwhals.stable.v1 as nw
from typing import Any, TYPE_CHECKING, TypeGuard
from narwhals.typing import IntoFrame

if sys.version_info < (3, 11):
    ...
else:
    ...
if TYPE_CHECKING:
    ...
def empty_df(native_df: IntoFrame) -> IntoFrame:
    """
    Get an empty dataframe with the same schema as the given dataframe.
    """
    ...

def assert_narwhals_dataframe(df: nw.DataFrame[Any]) -> None:
    """
    Assert that the given dataframe is a valid narwhals dataframe.
    """
    ...

def assert_narwhals_series(series: nw.Series) -> None:
    """
    Assert that the given series is a valid narwhals series.
    """
    ...

def can_narwhalify(obj: Any, eager_only: bool = ...) -> TypeGuard[IntoFrame]:
    """
    Check if the given object can be narwhalified.
    """
    ...

def assert_can_narwhalify(obj: Any) -> TypeGuard[IntoFrame]:
    """
    Assert that the given object can be narwhalified.
    """
    ...

def dataframe_to_csv(df: IntoFrame) -> str:
    """
    Convert a dataframe to a CSV string.
    """
    ...

def is_narwhals_integer_type(dtype: Any) -> TypeGuard[nw.Int64 | nw.UInt64 | nw.Int32 | nw.UInt32 | nw.Int16 | nw.UInt16 | nw.Int8 | nw.UInt8]:
    """
    Check if the given dtype is integer type.
    """
    ...

def is_narwhals_temporal_type(dtype: Any) -> TypeGuard[nw.Datetime | nw.Date | nw.Duration | nw.Duration]:
    """
    Check if the given dtype is temporal type.
    """
    ...

def is_narwhals_string_type(dtype: Any) -> TypeGuard[nw.String | nw.Categorical | nw.Enum]:
    """
    Check if the given dtype is string type.
    """
    ...

def unwrap_narwhals_dataframe(df: Any) -> Any:
    """
    Unwrap a narwhals dataframe.
    """
    ...

def unwrap_py_scalar(value: Any) -> Any:
    """
    Convert a narwhals value to a python scalar if possible, otherwise return
    the value as is.
    """
    ...
