"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from pathlib import Path
from typing import TYPE_CHECKING
from marimo._save.cache import Cache, CacheType
from marimo._ast.visitor import Name

if TYPE_CHECKING:
    ...
INCONSISTENT_CACHE_BOILER_PLATE = ...
class Loader(ABC):
    """Loaders are responsible for saving and loading persistent caches.

    Loaders are provided a name, a save path and a cache key or "hash", which
    should be deterministically determined given the notebook context.

    In the future, they may be specialized for different types of data (such as
    numpy or pandas dataframes), or remote storage (such as S3 or marimo
    cloud).
    """
    def __init__(self, name: str) -> None:
        ...

    def build_path(self, hashed_context: str, cache_type: CacheType) -> Path:
        ...

    def cache_attempt(self, defs: set[Name], hashed_context: str, stateful_refs: set[Name], cache_type: CacheType) -> Cache:
        ...

    @abstractmethod
    def cache_hit(self, hashed_context: str, cache_type: CacheType) -> bool:
        """Check if cache has been hit given a result hash.

        Args:
            hashed_context: The hash of the result context
            cache_type: The type of cache to check for

        Returns:
            bool: Whether the cache has been hit
        """
        ...

    @abstractmethod
    def load_cache(self, hashed_context: str, cache_type: CacheType) -> Cache:
        """Load Cache"""
        ...

    @abstractmethod
    def save_cache(self, cache: Cache) -> None:
        """Save Cache"""
        ...
