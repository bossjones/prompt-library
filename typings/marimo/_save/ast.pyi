"""
This type stub file was generated by pyright.
"""

import ast
from typing import Any, Callable, Sequence

class BlockException(Exception):
    ...


def compiled_ast(block: Sequence[ast.AST | ast.stmt]) -> ast.Module:
    ...

def clean_to_modules(pre_block: list[ast.AST], block: ast.With) -> tuple[ast.Module, ast.Module]:
    """Standardizes a `with` block to modules.

    Consider

    >>> <pre_block>
    >>> ...
    >>> </pre_block>
    >>> with fn(val:=other) as x:
    >>>   <block>
    >>>   ...
    >>>   </block>

    We want to compile <pre_block>, and <block> into two separate modules,
    however, line 4 removes the context of "x" and "val", so this is adjusted
    to:

    >>> <pre_block>
    >>> ...
    >>> x = fn(val := other)
    >>> </pre_block>
    >>> <block>
    >>> ...
    >>> </block>
    """
    ...

class ExtractWithBlock(ast.NodeTransformer):
    def __init__(self, line: int, *arg: Any, **kwargs: Any) -> None:
        ...

    def generic_visit(self, node: ast.AST) -> tuple[ast.Module, ast.Module]:
        ...



class DeprivateVisitor(ast.NodeTransformer):
    """Removes the mangling of private variables from a module."""
    def visit_Name(self, node: ast.Name) -> ast.Name:
        ...

    def generic_visit(self, node: ast.AST) -> ast.AST:
        ...



class RemoveReturns(ast.NodeTransformer):
    def visit_Return(self, node: ast.Return) -> ast.Expr:
        ...



def strip_function(fn: Callable[..., Any]) -> ast.Module:
    ...
