"""
This type stub file was generated by pyright.
"""

from typing import Callable, List, Optional
from marimo._ai.types import ChatMessage, ChatModel, ChatModelConfig

DEFAULT_SYSTEM_MESSAGE = ...
class simple(ChatModel):
    """
    Convenience class for wrapping a ChatModel or callable to
    take a single prompt

    **Args:**

    - delegate: A callable that takes a
        single prompt and returns a response
    """
    def __init__(self, delegate: Callable[[str], object]) -> None:
        ...

    def __call__(self, messages: List[ChatMessage], config: ChatModelConfig) -> object:
        ...



class openai(ChatModel):
    """
    OpenAI ChatModel

    **Args:**

    - model: The model to use.
        Can be found on the [OpenAI models page](https://platform.openai.com/docs/models)
    - system_message: The system message to use
    - api_key: The API key to use.
        If not provided, the API key will be retrieved
        from the OPENAI_API_KEY environment variable or the user's config.
    - base_url: The base URL to use
    """
    def __init__(self, model: str, *, system_message: str = ..., api_key: Optional[str] = ..., base_url: Optional[str] = ...) -> None:
        ...

    def __call__(self, messages: List[ChatMessage], config: ChatModelConfig) -> object:
        ...



class anthropic(ChatModel):
    """
    Anthropic ChatModel

    **Args:**

    - model: The model to use.
        Can be found on the [Anthropic models page](https://docs.anthropic.com/en/docs/about-claude/models)
    - system_message: The system message to use
    - api_key: The API key to use.
        If not provided, the API key will be retrieved
        from the ANTHROPIC_API_KEY environment variable
        or the user's config.
    - base_url: The base URL to use
    """
    def __init__(self, model: str, *, system_message: str = ..., api_key: Optional[str] = ..., base_url: Optional[str] = ...) -> None:
        ...

    def __call__(self, messages: List[ChatMessage], config: ChatModelConfig) -> object:
        ...



class google(ChatModel):
    """
    Google AI ChatModel

    **Args:**

    - model: The model to use.
        Can be found on the [Gemini models page](https://ai.google.dev/gemini-api/docs/models/gemini)
    - system_message: The system message to use
    - api_key: The API key to use.
        If not provided, the API key will be retrieved
        from the GOOGLE_AI_API_KEY environment variable
        or the user's config.
    """
    def __init__(self, model: str, *, system_message: str = ..., api_key: Optional[str] = ...) -> None:
        ...

    def __call__(self, messages: List[ChatMessage], config: ChatModelConfig) -> object:
        ...



class groq(ChatModel):
    """
    Groq ChatModel

    **Args:**

    - model: The model to use.
        Can be found on the [Groq models page](https://console.groq.com/docs/models)
    - system_message: The system message to use
    - api_key: The API key to use.
        If not provided, the API key will be retrieved
        from the GROQ_API_KEY environment variable or the user's config.
    - base_url: The base URL to use
    """
    def __init__(self, model: str, *, system_message: str = ..., api_key: Optional[str] = ..., base_url: Optional[str] = ...) -> None:
        ...

    def __call__(self, messages: List[ChatMessage], config: ChatModelConfig) -> object:
        ...
