"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import Any, Iterator, Literal, Optional, TYPE_CHECKING
from marimo._output.mime import MIME
from marimo._output.rich_help import mddoc
from marimo._plugins.core.web_component import JSONType
from marimo._plugins.ui._core.ui_element import UIElement
from marimo._plugins.ui._impl.batch import batch as batch_plugin

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
@mddoc
class Html(MIME):
    """A wrapper around HTML text that can be used as an output.

    Output an `Html` object as the last expression of a cell to render it in
    your app.

    Use f-strings to embed Html objects as text into other HTML or markdown
    strings. For example:

    ```python3
    hello_world = Html("<h2>Hello, World</h2>")
    Html(
        f'''
        <h1>Hello, Universe!</h1>
        {hello_world}
        '''
    )
    ```

    **Attributes.**

    - `text`: a string of HTML

    **Initialization Args.**

    - `text`: a string of HTML

    **Methods.**

    - `batch`: convert this HTML element into a batched UI element
    - `callout`: wrap this element in a callout
    - `center`: center this element in the output area
    - `right`: right-justify this element in the output area
    """
    def __init__(self, text: str) -> None:
        """Initialize the HTML element.

        Subclasses of HTML MUST call this method.
        """
        ...
    
    @property
    def text(self) -> str:
        """A string of HTML representing this element."""
        ...
    
    def __format__(self, spec: str) -> str:
        """Format `self` as HTML text"""
        ...
    
    @mddoc
    def batch(self, **elements: UIElement[JSONType, object]) -> batch_plugin:
        """Convert an HTML object with templated text into a UI element.

        This method lets you create custom UI elements that are represented
        by arbitrary HTML.

        **Example.**

        ```python3
        user_info = mo.md(
            '''
            - What's your name?: {name}
            - When were you born?: {birthday}
            '''
        ).batch(name=mo.ui.text(), birthday=mo.ui.date())
        ```

        In this example, `user_info` is a UI Element whose output is markdown
        and whose value is a dict with keys `'name'` and '`birthday`'
        (and values equal to the values of their corresponding elements).

        **Args.**

        - elements: the UI elements to interpolate into the HTML template.
        """
        ...
    
    @mddoc
    def center(self) -> Html:
        """Center an item.

        **Example.**

        ```python3
        mo.md("# Hello, world").center()
        ```

        **Returns.**

        An `Html` object.
        """
        ...
    
    @mddoc
    def right(self) -> Html:
        """Right-justify.

        **Example.**

        ```python3
        mo.md("# Hello, world").right()
        ```

        **Returns.**

        An `Html` object.
        """
        ...
    
    @mddoc
    def left(self) -> Html:
        """Left-justify.

        **Example.**

        ```python3
        mo.md("# Hello, world").left()
        ```

        **Returns.**

        An `Html` object.
        """
        ...
    
    @mddoc
    def callout(self, kind: Literal["neutral", "danger", "warn", "success", "info"] = ...) -> Html:
        """Create a callout containing this HTML element.

        A callout wraps your HTML element in a raised box, emphasizing its
        importance. You can style the callout for different situations with the
        `kind` argument.

        **Examples.**

        ```python3
        mo.md("Hooray, you did it!").callout(kind="success")
        ```

        ```python3
        mo.md("It's dangerous to go alone!").callout(kind="warn")
        ```
        """
        ...
    
    @mddoc
    def style(self, style: Optional[dict[str, Any]] = ..., **kwargs: Any) -> Html:
        """Wrap an object in a styled container.

        **Example.**

        ```python
        mo.md("...").style({"max-height": "300px", "overflow": "auto"})
        mo.md("...").style(max_height="300px", overflow="auto")
        ```

        **Args.**

        - `style`: an optional dict of CSS styles, keyed by property name
        - `**kwargs`: CSS styles as keyword arguments
        """
        ...
    


@contextmanager
def patch_html_for_non_interactive_output() -> Iterator[None]:
    """
    Patch Html to return text/markdown for simpler non-interactive outputs,
    that can be rendered without JS/CSS (just as in the GitHub viewer).
    """
    ...

