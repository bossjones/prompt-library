"""
This type stub file was generated by pyright.
"""

import traceback
from dataclasses import dataclass
from typing import Any, Callable, Optional, Tuple, Type, TypeVar
from marimo._messaging.mimetypes import KnownMimeType
from marimo._output.hypertext import Html
from marimo._output.rich_help import mddoc

"""Formatting protocol

This module defines a protocol for implementing objects that can be displayed
using marimo's media viewer.

To register a formatter for a type, user have two options:
    1. Implement a method _mime_ on the class that takes an instance
       and returns a (mime, data) tuple (i.e., implement the protocol MIME)
    2. Register a formatter function that takes a value and returns
       a (mime, data) tuple.

The function get_formatter(value: T) can be used to obtain a function that
instantiates a (mime, data) tuple for a value, with registered formatters
taking precedence over the MIME protocol.
"""
T = TypeVar("T")
Formatter = Callable[[T], Tuple[KnownMimeType, str]]
FORMATTERS: dict[Type[Any], Formatter[Any]] = ...
OPINIONATED_FORMATTERS: dict[Type[Any], Formatter[Any]] = ...
LOGGER = ...
def formatter(t: Type[Any]) -> Callable[[Formatter[T]], Formatter[T]]:
    """Register a formatter function for a type

    Decorator to register a custom formatter for a given type.

    For example, to register a formatter for a class Foo with a string
    attribute data:

    ```
    @formatter(Foo)
    def show_foo(foo: Foo) -> tuple[str, str]:
        return ("text/html", f"<p>{foo.data}</p>")
    ```
    """
    ...

def opinionated_formatter(t: Type[Any]) -> Callable[[Formatter[T]], Formatter[T]]:
    """Register an opinionated formatter function for a type

    Decorator to register a custom formatter for a given type.

    For example, to register a formatter for a class Foo with a string
    attribute data:

    ```
    @opinionated_formatter(Foo)
    def show_df(foo: Foo) -> tuple[str, str]:
        return table(foo)._mime_()
    ```
    """
    ...

def get_formatter(obj: T, include_opinionated: bool = ...) -> Optional[Formatter[T]]:
    ...

@dataclass
class FormattedOutput:
    mimetype: KnownMimeType
    data: str
    traceback: Optional[str] = ...
    exception: BaseException | None = ...


def try_format(obj: Any, include_opinionated: bool = ...) -> FormattedOutput:
    ...

@mddoc
def as_html(value: object) -> Html:
    """Convert a value to HTML that can be embedded into markdown

    This function returns an `Html` object representing `value`. Use it to
    embed values into Markdown or other HTML strings.

    **Example.**

    ```python3
    import matplotlib.pyplot as plt
    plt.plot([1, 2])
    axis = plt.gca()
    mo.md(
        f\"\"\"
        Here is a plot:

        {mo.as_html(axis)}
        \"\"\"
    )
    ```

    **Args.**

    - `value`: An object

    **Returns.**

    - An `Html` object
    """
    ...

def as_dom_node(value: object) -> Html:
    """
    Similar to as_html, but allows for string, int, float, and bool values
    to be passed through without being wrapped in an Html object.
    """
    ...

def mime_to_html(mimetype: KnownMimeType, data: Any) -> Html:
    ...

@mddoc
def plain(value: Any) -> Plain:
    """
    Wrap a value to indicate that it should be displayed
    without any opinionated formatting.

    This is the best way to opt out of marimo's
    default dataframe rendering.

    **Example.**

    ```python
    df = data.cars()
    mo.plain(df)
    ```

    **Args.**

    - `value`: Any value
    """
    ...

class Plain:
    """
    Wrapper around a value to indicate that it should be displayed
    without any opinionated formatting.
    """
    def __init__(self, child: Any) -> None:
        ...



@mddoc
def iframe(html: str, *, width: str = ..., height: str = ...) -> Html:
    """
    Embed an HTML string in an iframe.

    Scripts by default are not executed using `mo.as_html` or `mo.Html`,
    so if you have a script tag (written as `<script></script>`),
    you can use `mo.iframe` for scripts to be executed.

    You may also want to use this function to display HTML content
    that may contain styles that could interfere with the rest of the
    page.

    **Example.**

    ```python
    html = "<h1>Hello, world!</h1>"
    mo.iframe(html)
    ```

    **Args.**

    - `html`: An HTML string
    """
    ...
