"""
This type stub file was generated by pyright.
"""

import abc
from enum import Enum
from typing import Callable, TYPE_CHECKING
from marimo._server.ids import ConsumerId
from marimo._messaging.ops import MessageOperation
from marimo._messaging.types import KernelMessage

if TYPE_CHECKING:
    ...
class ConnectionState(Enum):
    """Connection state for a session"""
    OPEN = ...
    CLOSED = ...
    ORPHANED = ...


class SessionMode(str, Enum):
    """Session mode for a session"""
    EDIT = ...
    RUN = ...


class SessionConsumer(metaclass=abc.ABCMeta):
    """
    Consumer for a session

    This allows use to communicate with a session via different
    connection types. Currently we consume a session via WebSocket
    """
    def __init__(self, consumer_id: ConsumerId) -> None:
        ...

    @abc.abstractmethod
    def on_start(self) -> Callable[[KernelMessage], None]:
        """
        Start the session consumer
        and return a subscription function for the session consumer
        """
        ...

    @abc.abstractmethod
    def on_stop(self) -> None:
        ...

    @abc.abstractmethod
    def write_operation(self, op: MessageOperation) -> None:
        ...

    @abc.abstractmethod
    def connection_state(self) -> ConnectionState:
        ...
