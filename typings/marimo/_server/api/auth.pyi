"""
This type stub file was generated by pyright.
"""

import typing
from typing import Any, Dict, Optional, TYPE_CHECKING
from starlette.datastructures import Secret
from starlette.exceptions import HTTPException
from starlette.middleware.sessions import SessionMiddleware
from starlette.responses import JSONResponse
from starlette.authentication import AuthenticationError
from starlette.requests import HTTPConnection
from starlette.types import ASGIApp, Receive, Scope, Send

if TYPE_CHECKING:
    ...
LOGGER = ...
TOKEN_QUERY_PARAM = ...
def validate_auth(conn: HTTPConnection, form_dict: Optional[dict[str, str]] = ...) -> bool:
    ...

def raise_basic_auth_error() -> HTTPException:
    ...

def on_auth_error(request: HTTPConnection, error: AuthenticationError) -> JSONResponse:
    ...

RANDOM_SECRET = ...
class CookieSession:
    """
    Wrapper around starlette's Session to add typesafety
    """
    def __init__(self, session_state: Dict[str, Any]) -> None:
        ...

    def get_access_token(self) -> str:
        ...

    def get_username(self) -> str:
        ...

    def set_access_token(self, token: str) -> None:
        ...

    def set_username(self, username: str) -> None:
        ...



class CustomSessionMiddleware(SessionMiddleware):
    """
    Wrapper around starlette's SessionMiddleware to:
     - customize the session cookie based on the the port
     - only run in Edit mode
    """
    def __init__(self, app: ASGIApp, secret_key: typing.Union[str, Secret], session_cookie: str = ..., max_age: typing.Optional[int] = ..., path: str = ..., same_site: typing.Literal["lax", "strict", "none"] = ..., https_only: bool = ..., domain: typing.Optional[str] = ...) -> None:
        ...

    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:
        ...
