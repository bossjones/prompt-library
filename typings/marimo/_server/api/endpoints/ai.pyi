"""
This type stub file was generated by pyright.
"""

from typing import Generator, TYPE_CHECKING
from starlette.authentication import requires
from starlette.responses import StreamingResponse
from marimo._config.config import MarimoConfig
from anthropic import Client, Stream as AnthropicStream
from anthropic.types import RawMessageStreamEvent
from google.generativeai import GenerativeModel
from google.generativeai.types import GenerateContentResponse
from openai import OpenAI, Stream as OpenAiStream
from openai.types.chat import ChatCompletionChunk
from starlette.requests import Request

if TYPE_CHECKING:
    ...
LOGGER = ...
router = ...
def get_openai_client(config: MarimoConfig) -> OpenAI:
    ...

def get_anthropic_client(config: MarimoConfig) -> Client:
    ...

def get_model(config: MarimoConfig) -> str:
    ...

def get_content(response: RawMessageStreamEvent | ChatCompletionChunk | GenerateContentResponse) -> str | None:
    ...

def make_stream_response(response: OpenAiStream[ChatCompletionChunk] | AnthropicStream[RawMessageStreamEvent] | GenerateContentResponse) -> Generator[str, None, None]:
    ...

def as_stream_response(response: OpenAiStream[ChatCompletionChunk] | AnthropicStream[RawMessageStreamEvent] | GenerateContentResponse) -> Generator[str, None, None]:
    ...

def get_google_client(config: MarimoConfig, model: str) -> GenerativeModel:
    ...

@router.post("/completion")
@requires("edit")
async def ai_completion(*, request: Request) -> StreamingResponse:
    """
    requestBody:
        description: The prompt to get AI completion for
        required: true
        content:
            application/json:
                schema:
                    $ref: "#/components/schemas/AiCompletionRequest"
    responses:
        200:
            description: Get AI completion for a prompt
            content:
                application/json:
                    schema:
                        type: object
                        additionalProperties: true
    """
    ...

@router.post("/chat")
@requires("edit")
async def ai_chat(*, request: Request) -> StreamingResponse:
    """
    Chat endpoint that handles ongoing conversations
    """
    ...
