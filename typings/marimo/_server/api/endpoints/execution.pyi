"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING
from starlette.authentication import requires
from starlette.responses import JSONResponse
from marimo._server.models.models import BaseResponse
from starlette.requests import Request

if TYPE_CHECKING:
    ...
LOGGER = ...
router = ...
@router.post("/set_ui_element_value")
async def set_ui_element_values(*, request: Request) -> BaseResponse:
    """
    requestBody:
        content:
            application/json:
                schema:
                    $ref: "#/components/schemas/UpdateComponentValuesRequest"
    responses:
        200:
            description: Set UI element values
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessResponse"
    """
    ...

@router.post("/instantiate")
async def instantiate(*, request: Request) -> BaseResponse:
    """
    requestBody:
        content:
            application/json:
                schema:
                    $ref: "#/components/schemas/InstantiateRequest"
    responses:
        200:
            description: Instantiate a component
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessResponse"
    """
    ...

@router.post("/function_call")
async def function_call(*, request: Request) -> BaseResponse:
    """
    requestBody:
        content:
            application/json:
                schema:
                    $ref: "#/components/schemas/FunctionCallRequest"
    responses:
        200:
            description: Invoke an RPC
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessResponse"
    """
    ...

@router.post("/interrupt")
@requires("edit")
async def interrupt(*, request: Request) -> BaseResponse:
    """
    responses:
        200:
            description: Interrupt the kernel's execution
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessResponse"
    """
    ...

@router.post("/run")
@requires("edit")
async def run_cell(*, request: Request) -> BaseResponse:
    """
    requestBody:
        content:
            application/json:
                schema:
                    $ref: "#/components/schemas/RunRequest"
    responses:
        200:
            description: Run a cell. Updates cell code in the kernel if needed; registers new cells for unseen cell IDs. Only allowed in edit mode.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessResponse"
    """
    ...

@router.post("/scratchpad/run")
@requires("edit")
async def run_scratchpad(*, request: Request) -> BaseResponse:
    """
    requestBody:
        content:
            application/json:
                schema:
                    $ref: "#/components/schemas/RunScratchpadRequest"
    responses:
        200:
            description: Run the scratchpad
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessResponse"
    """
    ...

@router.post("/restart_session")
@requires("edit")
async def restart_session(*, request: Request) -> BaseResponse:
    """
    responses:
        200:
            description: Restart the current session without affecting other sessions.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessResponse"
    """
    ...

@router.post("/shutdown")
@requires("edit")
async def shutdown(*, request: Request) -> BaseResponse:
    """
    responses:
        200:
            description: Shutdown the kernel
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessResponse"
    """
    ...

@router.post("/takeover")
@requires("edit")
async def takeover_endpoint(*, request: Request) -> JSONResponse:
    """
    responses:
    200:
        description: Successfully closed existing sessions
        content:
            application/json:
                schema:
                    type: object
                    properties:
                        status:
                            type: string
    """
    ...
