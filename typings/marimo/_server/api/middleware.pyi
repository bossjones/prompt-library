"""
This type stub file was generated by pyright.
"""

from http.client import HTTPResponse
from typing import Any, AsyncIterable, Callable, Optional, TYPE_CHECKING, Union
from starlette.authentication import AuthCredentials, AuthenticationBackend, BaseUser
from starlette.middleware.base import BaseHTTPMiddleware, DispatchFunction, RequestResponseEndpoint
from starlette.requests import HTTPConnection, Request
from starlette.responses import Response
from starlette.types import ASGIApp, Receive, Scope, Send

if TYPE_CHECKING:
    ...
LOGGER = ...
class AuthBackend(AuthenticationBackend):
    def __init__(self, should_authenticate: bool = ...) -> None:
        ...

    async def authenticate(self, conn: HTTPConnection) -> Optional[tuple[AuthCredentials, BaseUser]]:
        ...



class SkewProtectionMiddleware:
    def __init__(self, app: ASGIApp) -> None:
        ...

    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:
        ...



class OpenTelemetryMiddleware(BaseHTTPMiddleware):
    def __init__(self, app: ASGIApp, dispatch: DispatchFunction | None = ...) -> None:
        ...

    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:
        ...



class _URLRequest:
    def __init__(self, url: str, method: str, headers: dict[str, str], data: Any) -> None:
        ...



class _AsyncHTTPResponse:
    def __init__(self, response: HTTPResponse) -> None:
        ...

    async def aiter_raw(self) -> AsyncIterable[bytes]:
        ...

    async def aclose(self) -> None:
        ...



class _AsyncHTTPClient:
    def __init__(self, base_url: str) -> None:
        ...

    def build_request(self, method: str, url: Any, headers: dict[str, str], content: Any) -> _URLRequest:
        ...

    async def send(self, request: _URLRequest, stream: bool = ...) -> _AsyncHTTPResponse:
        ...



class ProxyMiddleware:
    def __init__(self, app: ASGIApp, proxy_path: str, target_url: Union[str, Callable[[str], str]], path_rewrite: Callable[[str], str] | None = ...) -> None:
        ...

    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:
        ...
