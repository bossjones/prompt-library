"""
This type stub file was generated by pyright.
"""

from typing import Optional, TYPE_CHECKING, Union
from marimo._config.manager import MarimoConfigManager
from marimo._server.ids import SessionId
from marimo._server.model import SessionMode
from marimo._server.sessions import Session, SessionManager
from marimo._server.tokens import SkewProtectionToken
from starlette.applications import Starlette
from starlette.datastructures import State
from starlette.requests import Request
from starlette.websockets import WebSocket
from uvicorn import Server

if TYPE_CHECKING:
    ...
LOGGER = ...
class AppStateBase:
    """The app state."""
    @staticmethod
    def from_request(request: Union[Request, WebSocket]) -> AppState:
        """Get the app state with a request."""
        ...

    @staticmethod
    def from_app(asgi: Starlette) -> AppStateBase:
        """Get the app state with an ASGIApp app."""
        ...

    def __init__(self, state: State) -> None:
        """Initialize the app state."""
        ...

    @property
    def session_manager(self) -> SessionManager:
        ...

    @property
    def mode(self) -> SessionMode:
        ...

    @property
    def quiet(self) -> bool:
        ...

    @property
    def development_mode(self) -> bool:
        ...

    @property
    def host(self) -> str:
        ...

    @property
    def port(self) -> int:
        ...

    @property
    def maybe_port(self) -> Optional[int]:
        ...

    @property
    def base_url(self) -> str:
        ...

    @property
    def server(self) -> Server:
        ...

    @property
    def config_manager(self) -> MarimoConfigManager:
        ...

    @property
    def watch(self) -> bool:
        ...

    @property
    def headless(self) -> bool:
        ...

    @property
    def skew_protection_token(self) -> SkewProtectionToken:
        ...



class AppState(AppStateBase):
    """The app state with a request."""
    def __init__(self, request: Union[Request, WebSocket]) -> None:
        """Initialize the app state with a request."""
        ...

    def get_current_session_id(self) -> Optional[SessionId]:
        """Get the current session."""
        ...

    def require_current_session_id(self) -> SessionId:
        """Get the current session or raise an error."""
        ...

    def get_current_session(self) -> Optional[Session]:
        """Get the current session."""
        ...

    def require_current_session(self) -> Session:
        """Get the current session or raise an error."""
        ...

    def require_query_params(self, param: str) -> str:
        """Get a query parameter or raise an error."""
        ...

    def query_params(self, param: str) -> Optional[str]:
        """Get a query parameter."""
        ...
