"""
This type stub file was generated by pyright.
"""

import narwhals.stable.v1 as nw
from functools import cached_property
from typing import Any, Optional, Tuple, Union
from narwhals.stable.v1.typing import IntoFrameT
from marimo._data.models import ColumnSummary, ExternalDataType
from marimo._plugins.ui._impl.tables.format import FormatMapping
from marimo._plugins.ui._impl.tables.table_manager import ColumnName, FieldType, TableManager

class NarwhalsTableManager(TableManager[Union[nw.DataFrame[IntoFrameT], nw.LazyFrame[IntoFrameT]]]):
    type = ...
    @staticmethod
    def from_dataframe(data: IntoFrameT) -> NarwhalsTableManager[IntoFrameT]:
        ...

    def as_frame(self) -> nw.DataFrame[Any]:
        ...

    def with_new_data(self, data: nw.DataFrame[Any] | nw.LazyFrame[Any]) -> TableManager[Any]:
        ...

    def to_csv(self, format_mapping: Optional[FormatMapping] = ...) -> bytes:
        ...

    def to_json(self) -> bytes:
        ...

    def apply_formatting(self, format_mapping: Optional[FormatMapping]) -> NarwhalsTableManager[Any]:
        ...

    def supports_filters(self) -> bool:
        ...

    def select_rows(self, indices: list[int]) -> TableManager[Any]:
        ...

    def select_columns(self, columns: list[str]) -> TableManager[Any]:
        ...

    def get_row_headers(self) -> list[str]:
        ...

    @staticmethod
    def is_type(value: Any) -> bool:
        ...

    @cached_property
    def nw_schema(self) -> nw.Schema:
        ...

    def get_field_type(self, column_name: str) -> Tuple[FieldType, ExternalDataType]:
        ...

    def take(self, count: int, offset: int) -> TableManager[Any]:
        ...

    def search(self, query: str) -> TableManager[Any]:
        ...

    def get_summary(self, column: str) -> ColumnSummary:
        ...

    def get_num_rows(self, force: bool = ...) -> Optional[int]:
        ...

    def get_num_columns(self) -> int:
        ...

    def get_column_names(self) -> list[str]:
        ...

    def get_unique_column_values(self, column: str) -> list[str | int | float]:
        ...

    def get_sample_values(self, column: str) -> list[Any]:
        ...

    def sort_values(self, by: ColumnName, descending: bool) -> TableManager[Any]:
        ...

    def __repr__(self) -> str:
        ...
