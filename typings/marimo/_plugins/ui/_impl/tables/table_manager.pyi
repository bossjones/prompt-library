"""
This type stub file was generated by pyright.
"""

import abc
from typing import Any, Generic, Optional, Tuple, TypeVar
from marimo._data.models import ColumnSummary, DataType, ExternalDataType
from marimo._plugins.core.web_component import JSONType
from marimo._plugins.ui._impl.tables.format import FormatMapping

T = TypeVar("T")
ColumnName = str
FieldType = DataType
FieldTypes = list[Tuple[ColumnName, Tuple[FieldType, ExternalDataType]]]
class TableManager(abc.ABC, Generic[T]):
    DEFAULT_SUMMARY_CHARTS_COLUMN_LIMIT = ...
    DEFAULT_SUMMARY_CHARTS_ROW_LIMIT = ...
    DEFAULT_SUMMARY_STATS_ROW_LIMIT = ...
    type: str = ...
    def __init__(self, data: T) -> None:
        ...

    def to_data(self, format_mapping: Optional[FormatMapping] = ...) -> JSONType:
        """
        The best way to represent the data in a table as JSON.

        By default, this method calls `to_csv` and returns the result as
        a string.
        """
        ...

    def supports_download(self) -> bool:
        ...

    def supports_selection(self) -> bool:
        ...

    def supports_altair(self) -> bool:
        ...

    @abc.abstractmethod
    def apply_formatting(self, format_mapping: Optional[FormatMapping]) -> TableManager[Any]:
        ...

    @abc.abstractmethod
    def supports_filters(self) -> bool:
        ...

    @abc.abstractmethod
    def sort_values(self, by: ColumnName, descending: bool) -> TableManager[Any]:
        ...

    @abc.abstractmethod
    def to_csv(self, format_mapping: Optional[FormatMapping] = ...) -> bytes:
        ...

    @abc.abstractmethod
    def to_json(self) -> bytes:
        ...

    @abc.abstractmethod
    def select_rows(self, indices: list[int]) -> TableManager[Any]:
        ...

    @abc.abstractmethod
    def select_columns(self, columns: list[str]) -> TableManager[Any]:
        ...

    @abc.abstractmethod
    def get_row_headers(self) -> list[str]:
        ...

    @abc.abstractmethod
    def get_field_type(self, column_name: str) -> Tuple[FieldType, ExternalDataType]:
        ...

    def get_field_types(self) -> FieldTypes:
        ...

    @abc.abstractmethod
    def take(self, count: int, offset: int) -> TableManager[Any]:
        ...

    @abc.abstractmethod
    def search(self, query: str) -> TableManager[Any]:
        ...

    @staticmethod
    @abc.abstractmethod
    def is_type(value: Any) -> bool:
        ...

    @abc.abstractmethod
    def get_summary(self, column: str) -> ColumnSummary:
        ...

    @abc.abstractmethod
    def get_num_rows(self, force: bool = ...) -> Optional[int]:
        ...

    @abc.abstractmethod
    def get_num_columns(self) -> int:
        ...

    @abc.abstractmethod
    def get_column_names(self) -> list[str]:
        ...

    @abc.abstractmethod
    def get_unique_column_values(self, column: str) -> list[str | int | float]:
        ...

    @abc.abstractmethod
    def get_sample_values(self, column: str) -> list[Any]:
        ...

    def __repr__(self) -> str:
        ...



class TableManagerFactory(abc.ABC):
    @staticmethod
    @abc.abstractmethod
    def package_name() -> str:
        ...

    @staticmethod
    @abc.abstractmethod
    def create() -> type[TableManager[Any]]:
        ...
