"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional, Sequence, Tuple, Union
from marimo._data.models import ColumnSummary, ExternalDataType
from marimo._output.mime import MIME
from marimo._plugins.core.web_component import JSONType
from marimo._plugins.ui._impl.tables.format import FormatMapping
from marimo._plugins.ui._impl.tables.table_manager import ColumnName, FieldType, FieldTypes, TableManager

JsonTableData = Union[Sequence[Union[str, int, float, bool, MIME, None]], Sequence[JSONType], List[JSONType], Dict[str, Sequence[Union[str, int, float, bool, MIME, None]]], Dict[str, JSONType],]
class DefaultTableManager(TableManager[JsonTableData]):
    type = ...
    def __init__(self, data: JsonTableData) -> None:
        ...

    def supports_download(self) -> bool:
        ...

    def apply_formatting(self, format_mapping: Optional[FormatMapping]) -> TableManager[JsonTableData]:
        ...

    def supports_filters(self) -> bool:
        ...

    def to_data(self, format_mapping: Optional[FormatMapping] = ...) -> JSONType:
        ...

    def to_csv(self, format_mapping: Optional[FormatMapping] = ...) -> bytes:
        ...

    def to_json(self) -> bytes:
        ...

    def select_rows(self, indices: List[int]) -> DefaultTableManager:
        ...

    def select_columns(self, columns: List[str]) -> DefaultTableManager:
        ...

    def take(self, count: int, offset: int) -> DefaultTableManager:
        ...

    def search(self, query: str) -> DefaultTableManager:
        ...

    def get_row_headers(self) -> list[str]:
        ...

    def get_field_type(self, column_name: str) -> Tuple[FieldType, ExternalDataType]:
        ...

    def get_field_types(self) -> FieldTypes:
        ...

    def get_summary(self, column: str) -> ColumnSummary:
        ...

    def get_num_rows(self, force: bool = ...) -> int:
        ...

    def get_num_columns(self) -> int:
        ...

    def get_column_names(self) -> List[str]:
        ...

    def get_unique_column_values(self, column: str) -> list[str | int | float]:
        ...

    def get_sample_values(self, column: str) -> list[Any]:
        ...

    def sort_values(self, by: ColumnName, descending: bool) -> DefaultTableManager:
        ...

    @staticmethod
    def is_type(value: Any) -> bool:
        ...
