"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, Final, Iterator, Optional, TYPE_CHECKING
from marimo._output.hypertext import Html
from marimo._output.rich_help import mddoc
from marimo._plugins.core.web_component import JSONType
from marimo._plugins.ui._core.ui_element import UIElement
from collections.abc import ItemsView, ValuesView

if TYPE_CHECKING:
    ...
class _batch_base(UIElement[Dict[str, JSONType], Dict[str, object]]):
    """
    A batch of named UI elements represented by HTML text.
    """
    _name: Final[str] = ...
    def __init__(self, html: Html, elements: dict[str, UIElement[JSONType, object]], label: str = ..., on_change: Optional[Callable[[Dict[str, object]], None]] = ...) -> None:
        ...

    @property
    def elements(self) -> dict[str, UIElement[JSONType, object]]:
        ...

    def __len__(self) -> int:
        ...

    def __getitem__(self, key: str) -> UIElement[JSONType, object]:
        ...

    def __iter__(self) -> Iterator[str]:
        ...

    def __reversed__(self) -> Iterator[str]:
        ...

    def __contains__(self, item: str) -> bool:
        ...

    def get(self, key: str, default: Any | None = ...) -> Any:
        ...

    def items(self) -> ItemsView[str, UIElement[JSONType, object]]:
        ...

    def values(self) -> ValuesView[UIElement[JSONType, object]]:
        ...



@mddoc
class batch(_batch_base):
    """
    Convert an HTML object with templated text into a UI element.

    A `batch` is a UI element that wraps other UI elements, and is
    represented by custom HTML or markdown. You can create
    a `batch` by calling the `batch()` method on `Html` objects.

    Get the value of the wrapped UI elements using the `value` attribute
    of the batch.

    **Example.**

    In the below example, `user_info` is a UI Element whose output is markdown
    and whose value is a dict with keys `'name'` and `'birthday'`
    (and values equal to the values of their corresponding elements).


    ```python3
    user_info = mo.md(
        '''
        - What's your name?: {name}
        - When were you born?: {birthday}
        '''
    ).batch(name=mo.ui.text(), birthday=mo.ui.date())
    ```

    To get the value of `name` and `birthday`, use:

    ```
    user_info.value
    ```

    You can also instantiate this class directly:

    ```python3
    markdown = mo.md(
        '''
        - What's your name?: {name}
        - When were you born?: {birthday}
        '''
    )
    batch = mo.ui.batch(
        markdown, {"name": mo.ui.text(), "birthday": mo.ui.date()}
    )
    ```

    **Attributes.**

    - `value`: a `dict` of the batched elements' values
    - `elements`: a `dict` of the batched elements (clones of the originals)
    - `on_change`: optional callback to run when this element's value changes

    **Initialization Args.**

    - html: a templated `Html` object
    - elements: the UI elements to interpolate into the HTML template
    - `on_change`: optional callback to run when this element's value changes
    """
    def __init__(self, html: Html, elements: dict[str, UIElement[Any, Any]], on_change: Optional[Callable[[Dict[str, object]], None]] = ...) -> None:
        ...
