"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Tuple, Type, TypeVar
from marimo._output.rich_help import mddoc
from marimo._plugins.ui._core.ui_element import UIElement
from panel.viewable import Viewable

if TYPE_CHECKING:
    ...
LOGGER = ...
COMM_MANAGER = ...
comm_class: Optional[Type[Any]] = ...
loaded_extension: int = ...
loaded_extensions: list[str] = ...
T = TypeVar("T", bound=Dict[str, Any])
@dataclass
class SendToWidgetArgs:
    message: Any
    buffers: Optional[List[Any]] = ...


def render_extension(load_timeout: int = ..., loaded: bool = ...) -> str:
    """
    Render Panel extension JavaScript.

    Args:
        load_timeout: Timeout for loading resources (in milliseconds)
        loaded: Whether the extension has been loaded before

    Returns:
        JavaScript code for Panel extension
    """
    ...

def render_component(obj: Viewable) -> Tuple[str, dict[str, Any], dict[str, Any]]:
    """
    Render a Panel component.

    Args:
        obj: Panel Viewable object

    Returns:
        Tuple containing reference ID, docs JSON, and render JSON
    """
    ...

@mddoc
class panel(UIElement[T, T]):
    """
    Create a UIElement from a Panel component.
    This proxies all the widget's attributes and methods.

    **Example.**

    ```python
    import marimo as mo
    import panel as pn

    slider = pn.widgets.IntSlider(start=0, end=10, value=5)
    rx_stars = mo.ui.panel(slider.rx() * "*")

    # In another cell, access its value
    # This works for all widgets
    slider.value
    ```

    **Attributes.**

    - `obj`: The widget being wrapped.

    **Initialization Args.**

    - `obj`: The widget to wrap.
    """
    def __init__(self, obj: Any) -> None:
        ...

    def __setattr__(self, name: str, value: Any) -> None:
        ...

    def __getattr__(self, name: str) -> Any:
        ...
