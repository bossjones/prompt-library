"""
This type stub file was generated by pyright.
"""

import plotly.graph_objects as go
from typing import Any, Callable, Dict, Final, List, Optional, TYPE_CHECKING
from marimo._output.rich_help import mddoc
from marimo._plugins.core.web_component import JSONType
from marimo._plugins.ui._core.ui_element import UIElement

LOGGER = ...
if TYPE_CHECKING:
    ...
PlotlySelection = Dict[str, JSONType]
@mddoc
class plotly(UIElement[PlotlySelection, List[Dict[str, Any]]]):
    """Make reactive plots with Plotly.

    Use `mo.ui.plotly` to make plotly plots reactive: select data with your
    cursor on the frontend, get them as a list of dicts in Python!

    This function currently only supports scatter plots, treemaps charts,
    and sunbursts charts.

    **Example.**

    ```python
    import plotly.express as px
    import marimo as mo
    from vega_datasets import data

    _plot = px.scatter(
        data.cars(), x="Horsepower", y="Miles_per_Gallon", color="Origin"
    )

    plot = mo.ui.plotly(_plot)
    ```

    ```
    # View the plot and selected data
    mo.hstack([plot, plot.value])
    ```

    Or with custom configuration:

    ```python
    plot = mo.ui.plotly(
        _plot,
        config={"staticPlot": True},
    )
    ```

    **Attributes.**

    - `value`: a dict of the plot data
    - `ranges`: the selection of the plot; this may be an interval along
       the name of an axis

    **Initialization Args.**

    - `figure`: A `plotly.graph_objects.Figure`
    - `config`: optional configuration for the plot.
        This is a dictionary that is passed directly to the plotly.
        See the plotly documentation for more information:
        https://plotly.com/javascript/configuration-options/
        This takes precedence over the default configuration of the renderer.
    - `renderer_name`: optional renderer to use for the plot.
        If this is not provided, the default renderer (pio.renderers.default)
        is used.
    - `label`: optional markdown label for the element
    - `on_change`: optional callback to run when this element's value changes
    """
    name: Final[str] = ...
    def __init__(self, figure: go.Figure, config: Optional[Dict[str, Any]] = ..., renderer_name: Optional[str] = ..., *, label: str = ..., on_change: Optional[Callable[[JSONType], None]] = ...) -> None:
        ...

    @property
    def ranges(self) -> Dict[str, List[float]]:
        ...

    @property
    def points(self) -> List[Dict[str, Any]]:
        ...

    @property
    def indices(self) -> List[int]:
        ...
