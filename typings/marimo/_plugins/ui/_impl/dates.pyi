"""
This type stub file was generated by pyright.
"""

import datetime as dt
from typing import Any, Callable, Final, Optional, Tuple, Union
from marimo._data.series import DataFrameSeries
from marimo._output.rich_help import mddoc
from marimo._plugins.ui._core.ui_element import UIElement

"""
This type stub file was generated by pyright.
"""
LOGGER = ...
Numeric = Union[int, float]
@mddoc
class date(UIElement[str, dt.date]):
    """
    A date picker with an optional start and stop date.

    **Example.**

    ```python
    # initialize the date picker at a given date
    date = mo.ui.date(value="2022-01-01")
    ```

    ```python
    # when value is omitted, date picker initializes with today's date
    date = mo.ui.date()
    ```

    ```python
    # create a date picker with bounds
    date = mo.ui.date(
        value="2022-06-01",
        start="2022-01-01",
        stop="2022-12-31",
    )
    ```

    Or from a dataframe series:

    ```python
    date = mo.ui.date.from_series(df["column_name"])
    ```

    **Attributes.**

    - `value`: a str (YYYY-MM-DD) or `datetime.date` object of the chosen date
    - `start`: the start date
    - `stop`: the stop date

    **Initialization Args.**

    - `start`: minimum date selectable; if None, defaults to 01-01-0001
    - `stop`: maximum date selectable; if None, defaults to 12-31-9999
    - `value`: default date
        - if `None` and `start` and `stop` are `None`, defaults to the
          current day;
        - else if `None` and `start` is not `None`, defaults to `start`;
        - else if `None` and `stop` is not `None`, defaults to `stop`
    - `label`: markdown label for the element
    - `on_change`: optional callback to run when this element's value changes
    - `full_width`: whether the input should take up the full width of its
        container
    """
    _name: Final[str] = ...
    DATE_FORMAT = ...
    def __init__(self, start: Optional[dt.date | str] = ..., stop: Optional[dt.date | str] = ..., value: Optional[dt.date | str] = ..., *, label: str = ..., on_change: Optional[Callable[[dt.date], None]] = ..., full_width: bool = ...) -> None:
        ...
    
    @staticmethod
    def from_series(series: DataFrameSeries, **kwargs: Any) -> date:
        """Create a date picker from a dataframe series."""
        ...
    
    @property
    def start(self) -> dt.date:
        ...
    
    @property
    def stop(self) -> dt.date:
        ...
    


@mddoc
class datetime(UIElement[Optional[str], Optional[dt.datetime]]):
    """
    A datetime picker over an interval.

    **Example.**

    ```python
    datetime_picker = mo.ui.datetime(
        start=dt.datetime(2023, 1, 1),
        stop=dt.datetime(2023, 12, 31, 23, 59, 59),
    )
    ```

    Or from a dataframe series:

    ```python
    datetime_picker = mo.ui.datetime.from_series(df["datetime_column"])
    ```

    **Attributes.**

    - `value`: the selected datetime, possibly `None`
    - `start`: the minimum selectable datetime
    - `stop`: the maximum selectable datetime

    **Initialization Args.**

    - `start`: the minimum selectable datetime (default: minimum datetime)
    - `stop`: the maximum selectable datetime (default: maximum datetime)
    - `value`: default value
    - `label`: markdown label for the element
    - `on_change`: optional callback to run when this element's value changes
    - `full_width`: whether the input should take up the full width of
      its container
    """
    _name: Final[str] = ...
    DATETIME_FORMAT: Final[str] = ...
    def __init__(self, start: Optional[dt.datetime | str] = ..., stop: Optional[dt.datetime | str] = ..., value: Optional[dt.datetime | str] = ..., *, label: Optional[str] = ..., on_change: Optional[Callable[[Optional[dt.datetime]], None]] = ..., full_width: bool = ...) -> None:
        ...
    
    @staticmethod
    def from_series(series: DataFrameSeries, **kwargs: Any) -> datetime:
        """Create a datetime picker from a dataframe series."""
        ...
    
    @property
    def start(self) -> dt.datetime:
        ...
    
    @property
    def stop(self) -> dt.datetime:
        ...
    


@mddoc
class date_range(UIElement[Tuple[str, str], Tuple[dt.date, dt.date]]):
    """
    A date range picker over an interval.

    **Example.**

    ```python
    date_range = mo.ui.date_range(
        start=dt.date(2023, 1, 1), stop=dt.date(2023, 12, 31)
    )
    ```

    Or from a dataframe series:

    ```python
    date_range = mo.ui.date_range.from_series(df["date_column"])
    ```

    **Attributes.**

    - `value`: a tuple of two dates representing the selected range
    - `start`: the minimum selectable date
    - `stop`: the maximum selectable date

    **Initialization Args.**

    - `start`: the minimum selectable date (default: minimum date)
    - `stop`: the maximum selectable date (default: maximum date)
    - `value`: default value (tuple of two dates)
    - `label`: markdown label for the element
    - `on_change`: optional callback to run when this element's value changes
    - `full_width`: whether the input should take up the full width of its
      container
    """
    _name: Final[str] = ...
    DATEFORMAT: Final[str] = ...
    def __init__(self, start: Optional[dt.date | str] = ..., stop: Optional[dt.date | str] = ..., value: Optional[Tuple[dt.date, dt.date] | Tuple[str, str]] = ..., *, label: Optional[str] = ..., on_change: Optional[Callable[[Tuple[dt.date, dt.date]], None]] = ..., full_width: bool = ...) -> None:
        ...
    
    @staticmethod
    def from_series(series: DataFrameSeries, **kwargs: Any) -> date_range:
        """Create a date range picker from a dataframe series."""
        ...
    
    @property
    def start(self) -> dt.date:
        ...
    
    @property
    def stop(self) -> dt.date:
        ...
    


