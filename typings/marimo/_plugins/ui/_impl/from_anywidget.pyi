"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Dict, Optional, TYPE_CHECKING
from marimo._output.rich_help import mddoc
from marimo._plugins.ui._core.ui_element import UIElement
from anywidget import AnyWidget

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
LOGGER = ...
cache: Dict[Any, UIElement[Any, Any]] = ...
def from_anywidget(widget: AnyWidget) -> UIElement[Any, Any]:
    """Create a UIElement from an AnyWidget."""
    ...

T = Dict[str, Any]
@dataclass
class SendToWidgetArgs:
    content: Any
    buffers: Optional[Any] = ...


@mddoc
class anywidget(UIElement[T, T]):
    """
    Create a UIElement from an AnyWidget.
    This proxies all the widget's attributes and methods.

    **Example.**

    ```python
    from drawdata import ScatterWidget
    import marimo as mo

    scatter = ScatterWidget()
    scatter = mo.ui.anywidget(scatter)

    # In another cell, access its value
    # This works for all widgets
    scatter.value

    # Or attributes specifically on the ScatterWidget
    scatter.data_as_pandas
    scatter.data_as_polars
    ```

    **Attributes.**

    - `value`: The value of the widget's traits as a dictionary.
    - `widget`: The widget being wrapped.

    **Initialization Args.**

    - `widget`: The widget to wrap.
    """
    def __init__(self, widget: AnyWidget) -> None:
        ...
    
    def __setattr__(self, name: str, value: Any) -> None:
        ...
    
    def __getattr__(self, name: str) -> Any:
        ...
    


