"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, Final, Iterator, Optional, Sequence
from marimo._output.hypertext import Html
from marimo._output.rich_help import mddoc
from marimo._plugins.core.web_component import JSONType
from marimo._plugins.ui._core.ui_element import UIElement

"""
This type stub file was generated by pyright.
"""
@mddoc
class array(UIElement[Dict[str, JSONType], Sequence[object]]):
    """
    An array of UI elements.

    Use an array to

    - create a dynamic number of UI elements at runtime
    - group together logically related UI elements
    - keep the number of global variables in your program small

    Access the values of the elements using the `value` attribute of the array
    (`array.value`).

    The elements in the array can be accessed using square brackets
    (`array[index]`) and embedded in other marimo outputs. You can also
    iterate over the UI elements using the `in` operator (`for element in
    array`).

    Note: The UI elements in the array are clones of the original elements:
    interacting with the array will _not_ update the original elements, and
    vice versa.

    **Examples.**

    A heterogeneous collection of UI elements:

    ```python
    array = mo.ui.array([mo.ui.slider(1, 10), mo.ui.text(), mo.ui.date()])
    ```

    Get the values of the `slider`, `text`, and `date` elements via
    `array.value`:

    ```python
    # array.value returns a list with the values of the elements
    array.value
    ```

    Access and output a UI element in the array:

    ```python
    mo.md(f"This is a slider: array[0]")
    ```

    Some number of UI elements, determined at runtime:

    ```python
    mo.ui.array([mo.ui.slider(1, 10) for _ in range random.randint(4, 8)])
    ```

    **Attributes.**

    - `value`: a list containing the values of the array's entries
    - `elements`: a list of the wrapped elements (clones of the originals)

    **Initialization Args.**

    - `elements`: the UI elements to include
    - `label`: a descriptive name for the array
    - `on_change`: optional callback to run when this element's value changes
    """
    _name: Final[str] = ...
    def __init__(self, elements: Sequence[UIElement[Any, Any]], *, label: str = ..., on_change: Optional[Callable[[Sequence[object]], None]] = ...) -> None:
        ...
    
    @property
    def elements(self) -> Sequence[UIElement[JSONType, object]]:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __getitem__(self, key: int) -> UIElement[JSONType, object]:
        ...
    
    def __iter__(self) -> Iterator[UIElement[JSONType, object]]:
        ...
    
    def __reversed__(self) -> Iterator[UIElement[JSONType, object]]:
        ...
    
    def __contains__(self, item: UIElement[JSONType, object]) -> bool:
        ...
    
    def hstack(self, **kwargs: Any) -> Html:
        """
        Stack the elements horizontally.

        For kwargs, see `marimo.hstack`.
        """
        ...
    
    def vstack(self, **kwargs: Any) -> Html:
        """
        Stack the elements vertically.

        For kwargs, see `marimo.vstack`.
        """
        ...
    


