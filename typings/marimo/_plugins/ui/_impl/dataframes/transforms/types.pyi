"""
This type stub file was generated by pyright.
"""

import abc
from dataclasses import dataclass
from enum import Enum
from typing import Any, Generic, List, Literal, Optional, TypeVar, Union

DataFrameType = TypeVar("DataFrameType")
ColumnId = Union[str, int]
ColumnIds = List[ColumnId]
NumpyDataType = str
Operator = Literal["==", "!=", "<", ">", "<", "<=", ">=", "is_true", "is_false", "is_nan", "is_not_nan", "equals", "does_not_equal", "contains", "regex", "starts_with", "ends_with", "in",]
Aggregation = Literal["count", "sum", "mean", "median", "min", "max",]
class TransformType(Enum):
    AGGREGATE = ...
    COLUMN_CONVERSION = ...
    FILTER_ROWS = ...
    GROUP_BY = ...
    RENAME_COLUMN = ...
    SELECT_COLUMNS = ...
    SORT_COLUMN = ...
    SHUFFLE_ROWS = ...
    SAMPLE_ROWS = ...
    EXPLODE_COLUMNS = ...
    EXPAND_DICT = ...


@dataclass(frozen=True)
class Condition:
    column_id: ColumnId
    operator: Operator
    value: Optional[Any] = ...
    def __hash__(self) -> int:
        ...

    def __post_init__(self) -> None:
        ...



@dataclass
class ColumnConversionTransform:
    type: Literal[TransformType.COLUMN_CONVERSION]
    column_id: ColumnId
    data_type: NumpyDataType
    errors: Literal["ignore", "raise"]
    ...


@dataclass
class RenameColumnTransform:
    type: Literal[TransformType.RENAME_COLUMN]
    column_id: ColumnId
    new_column_id: ColumnId
    ...


@dataclass
class SortColumnTransform:
    type: Literal[TransformType.SORT_COLUMN]
    column_id: ColumnId
    ascending: bool
    na_position: Literal["first", "last"]
    ...


@dataclass
class FilterRowsTransform:
    type: Literal[TransformType.FILTER_ROWS]
    operation: Literal["keep_rows", "remove_rows"]
    where: List[Condition]
    ...


@dataclass
class GroupByTransform:
    type: Literal[TransformType.GROUP_BY]
    column_ids: ColumnIds
    drop_na: bool
    aggregation: Aggregation
    ...


@dataclass
class AggregateTransform:
    type: Literal[TransformType.AGGREGATE]
    column_ids: ColumnIds
    aggregations: List[Aggregation]
    ...


@dataclass
class SelectColumnsTransform:
    type: Literal[TransformType.SELECT_COLUMNS]
    column_ids: ColumnIds
    ...


@dataclass
class ShuffleRowsTransform:
    type: Literal[TransformType.SHUFFLE_ROWS]
    seed: int
    ...


@dataclass
class SampleRowsTransform:
    type: Literal[TransformType.SAMPLE_ROWS]
    n: int
    replace: bool
    seed: int
    ...


@dataclass
class ExplodeColumnsTransform:
    type: Literal[TransformType.EXPLODE_COLUMNS]
    column_ids: ColumnIds
    ...


@dataclass
class ExpandDictTransform:
    type: Literal[TransformType.EXPAND_DICT]
    column_id: ColumnId
    ...


Transform = Union[AggregateTransform, ColumnConversionTransform, FilterRowsTransform, GroupByTransform, RenameColumnTransform, SelectColumnsTransform, SortColumnTransform, ShuffleRowsTransform, SampleRowsTransform, ExplodeColumnsTransform, ExpandDictTransform,]
@dataclass
class Transformations:
    transforms: List[Transform]
    ...


T = TypeVar("T")
class TransformHandler(abc.ABC, Generic[T]):
    @staticmethod
    @abc.abstractmethod
    def handle_column_conversion(df: T, transform: ColumnConversionTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_rename_column(df: T, transform: RenameColumnTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_sort_column(df: T, transform: SortColumnTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_filter_rows(df: T, transform: FilterRowsTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_group_by(df: T, transform: GroupByTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_aggregate(df: T, transform: AggregateTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_select_columns(df: T, transform: SelectColumnsTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_shuffle_rows(df: T, transform: ShuffleRowsTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_sample_rows(df: T, transform: SampleRowsTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_explode_columns(df: T, transform: ExplodeColumnsTransform) -> T:
        ...

    @staticmethod
    @abc.abstractmethod
    def handle_expand_dict(df: T, transform: ExpandDictTransform) -> T:
        ...

    @staticmethod
    def as_python_code(df_name: str, columns: List[str], transforms: List[Transform]) -> str | None:
        ...

    @staticmethod
    def as_sql_code(transformed_df: T) -> str | None:
        ...
