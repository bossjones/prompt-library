"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Callable, Dict, Final, List, Optional
from marimo._output.rich_help import mddoc
from marimo._plugins.ui._core.ui_element import UIElement
from marimo._plugins.ui._impl.dataframes.transforms.types import DataFrameType
from marimo._plugins.ui._impl.table import SearchTableArgs, SearchTableResponse
from marimo._plugins.ui._impl.tables.table_manager import FieldTypes
from marimo._runtime.functions import EmptyArgs

@dataclass
class GetDataFrameResponse:
    url: str
    total_rows: int
    row_headers: List[str]
    field_types: FieldTypes
    python_code: Optional[str] = ...
    sql_code: Optional[str] = ...


@dataclass
class GetColumnValuesArgs:
    column: str
    ...


@dataclass
class GetColumnValuesResponse:
    values: List[str | int | float]
    too_many_values: bool
    ...


class ColumnNotFound(Exception):
    def __init__(self, column: str) -> None:
        ...



class GetDataFrameError(Exception):
    def __init__(self, error: str) -> None:
        ...



@mddoc
class dataframe(UIElement[Dict[str, Any], DataFrameType]):
    """
    Run transformations on a DataFrame or series.
    Currently only Pandas or Polars DataFrames are supported.

    **Example.**

    ```python
    dataframe = mo.ui.dataframe(data)
    ```

    **Attributes.**

    - `value`: the transformed DataFrame or series

    **Initialization Args.**

    - `df`: the DataFrame or series to transform
    - `page_size`: the number of rows to show in the table
    - `limit`: the number of items to load into memory, in case
        the data is remote and lazily fetched. This is likely true
        for SQL-backed dataframes via Ibis.
    """
    _name: Final[str] = ...
    def __init__(self, df: DataFrameType, on_change: Optional[Callable[[DataFrameType], None]] = ..., page_size: Optional[int] = ..., limit: Optional[int] = ...) -> None:
        ...

    def get_dataframe(self, _args: EmptyArgs) -> GetDataFrameResponse:
        ...

    def get_column_values(self, args: GetColumnValuesArgs) -> GetColumnValuesResponse:
        """Get all the unique values in a column."""
        ...

    def search(self, args: SearchTableArgs) -> SearchTableResponse:
        ...
