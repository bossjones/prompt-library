"""
This type stub file was generated by pyright.
"""

from typing import Callable, Final, Optional
from marimo._output.rich_help import mddoc
from marimo._plugins.ui._core.ui_element import UIElement

"""
This type stub file was generated by pyright.
"""
@mddoc
class tabs(UIElement[str, str]):
    """Display objects in a tabbed view.

    **Examples.**

    Show content in tabs:

    ```python
    tab1 = mo.vstack([
        "slider": mo.ui.slider(1, 10),
        "text": mo.ui.text(),
        "date": mo.ui.date()
    ])

    tab2 = mo.md("You can show arbitrary content in a tab.")

    tabs = mo.ui.tabs({
        "Heading 1": tab1,
        "Heading 2": tab2
    })
    ```

    Control which tab is selected:

    ```python
    tabs = mo.ui.tabs(
        {"Heading 1": tab1, "Heading 2": tab2}, value="Heading 2"
    )
    ```

    Tab content can be lazily loaded:

    ```python
    tabs = mo.ui.tabs(
        {"Heading 1": tab1, "Heading 2": expensive_component}, lazy=True
    )
    ```

    **Attributes.**

    - `value`: A string, the name of the selected tab.

    **Initialization Args.**

    - `tabs`: a dictionary of tab names to tab content; strings are interpreted
              as markdown
    - `value`: the name of the tab to open; defaults to the first tab
    - `lazy`: a boolean, whether to lazily load the tab content.
              This is a convenience that wraps each tab in a `mo.lazy`
              component.
    """
    _name: Final[str] = ...
    def __init__(self, tabs: dict[str, object], value: Optional[str] = ..., lazy: bool = ..., *, label: str = ..., on_change: Optional[Callable[[str], None]] = ...) -> None:
        ...
    


