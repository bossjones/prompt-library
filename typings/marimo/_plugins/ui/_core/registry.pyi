"""
This type stub file was generated by pyright.
"""

import sys
from typing import Any, Dict, Iterable, Optional, TypeAlias, TypeVar, Union
from marimo._ast.cell import CellId_t
from marimo._plugins.ui._core.ui_element import UIElement

if sys.version_info < (3, 10):
    ...
else:
    ...
UIElementId = str
T = TypeVar("T")
LensValue: TypeAlias = Union[T, Dict[str, "LensValue[T]"]]
class UIElementRegistry:
    def __init__(self) -> None:
        ...

    def register(self, object_id: UIElementId, ui_element: UIElement[Any, Any]) -> None:
        ...

    def bound_names(self, object_id: UIElementId) -> Iterable[str]:
        ...

    def register_scope(self, glbls: dict[str, Any], defs: Optional[set[str]] = ...) -> None:
        ...

    def lookup(self, name: str) -> Optional[UIElement[Any, Any]]:
        ...

    def get_object(self, object_id: UIElementId) -> UIElement[Any, Any]:
        ...

    def get_cell(self, object_id: UIElementId) -> CellId_t:
        ...

    def resolve_lens(self, object_id: UIElementId, value: LensValue[T]) -> tuple[str, LensValue[T]]:
        """Resolve a lens, if any, to an object id and value update

        Returns (resolved object id, resolved value)

        Raises KeyError if `object_id` does not exist in the registry,
        RuntimeError if the object was deleted.
        """
        ...

    def delete(self, object_id: UIElementId, python_id: int) -> None:
        """Delete a UI element from the registry

        This function may be called by the Python garbage collector, while
        a cell is executing. For this reason we make sure not to log
        anything -- these logs would show up as console output in the
        frontend, confusing the user.
        """
        ...
