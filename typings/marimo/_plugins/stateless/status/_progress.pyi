"""
This type stub file was generated by pyright.
"""

from typing import Any, Iterable, Literal, Optional, TYPE_CHECKING, TypeVar
from marimo._output.hypertext import Html
from marimo._output.rich_help import mddoc
from marimo._utils.debounce import debounce
from collections.abc import Collection

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
S = TypeVar("S")
T = TypeVar("T")
class _Progress(Html):
    """A mutable class to represent a progress indicator in the UI."""
    def __init__(self, title: Optional[str], subtitle: Optional[str], total: Optional[int], show_rate: bool, show_eta: bool) -> None:
        ...
    
    def update_progress(self, increment: int = ..., title: Optional[str] = ..., subtitle: Optional[str] = ...) -> None:
        """Update the progress indicator.

        **Example.**

        ```python
        # Increment by 1
        progress.update()

        # Increment by 10 and update title and subtitle
        progress.update(10, title="Loading", subtitle="Still going...")
        ```

        **Args.**

        - increment: amount to increment by. Defaults to 1.
        - title: new title. Defaults to None.
        - subtitle: new subtitle. Defaults to None.
        """
        ...
    
    @debounce(0.15)
    def debounced_flush(self) -> None:
        """Flush the output to the UI"""
        ...
    
    def clear(self) -> None:
        ...
    
    def close(self) -> None:
        ...
    


class ProgressBar(_Progress):
    def __init__(self, title: str | None, subtitle: str | None, total: int, show_rate: bool, show_eta: bool) -> None:
        ...
    
    def update(self, increment: int = ..., title: str | None = ..., subtitle: str | None = ...) -> None:
        ...
    


class Spinner(_Progress):
    """A spinner output representing a loading state"""
    def __init__(self, title: str | None, subtitle: str | None) -> None:
        ...
    
    def update(self, title: str | None = ..., subtitle: str | None = ...) -> None:
        """Update the title and subtitle of the spinner

        This method updates a spinner output in-place. Must be used
        in the cell the spinner was created.

        **Example.**

        ```python
        with mo.status.spinner("Hang tight!") as _spinner:
            ...
            _spinner.update(title="Almost done!")
        # Optionally, remove the spinner from the output
        # _spinner.clear()
        ```
        """
        ...
    


@mddoc
class spinner:
    """Show a loading spinner

    Use `mo.status.spinner()` as a context manager to show a loading spinner.
    You can optionally pass a title and subtitle.

    **Example.**

    ```python
    with mo.status.spinner(subtitle="Loading data ...") as _spinner:
        data = expensive_function()
        _spinner.update(subtitle="Crunching numbers ...")
        ...

    mo.ui.table(data)
    ```

    You can also show the spinner without a context manager:

    ```python
    mo.status.spinner(title="Loading ...") if condition else mo.md("Done!")
    ```

    **Args:**

    - `title`: optional title
    - `subtitle`: optional subtitle
    - `remove_on_exit`: if True, the spinner is removed from output on exit
    """
    def __init__(self, title: Optional[str] = ..., subtitle: Optional[str] = ..., remove_on_exit: bool = ...) -> None:
        ...
    
    def __enter__(self) -> Spinner:
        ...
    
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None:
        ...
    


class progress_bar:
    """Iterate over a collection and show a progress bar

    **Example.**

    ```python
    for i in mo.status.progress_bar(range(10)):
        ...
    ```

    You can optionally provide a title and subtitle to show
    during iteration, and a title/subtitle to show upon completion.

    You can also use progress_bar with a context manager and manually update
    the bar:

    ```python
    with mo.status.progress_bar(total=10) as bar:
        for i in range(10):
            ...
            bar.update()
    ```

    The `update` method accepts the optional keyword
    arguments `increment` (defaults to `1`), `title`,
    and `subtitle`.

    For performance reasons, the progress bar is only updated in the UI
    every 150ms.

    **Args.**

    - `collection`: optional collection to iterate over
    - `title`: optional title
    - `subtitle`: optional subtitle
    - `completion_title`: optional title to show during completion
    - `completion_subtitle`: optional subtitle to show during completion
    - `total`: optional total number of items to iterate over
    - `show_rate`: if True, show the rate of progress (items per second)
    - `show_eta`: if True, show the estimated time of completion
    - `remove_on_exit`: if True, remove the progress bar from output on exit
    - `disabled`: if True, disable the progress bar
    """
    def __init__(self, collection: Optional[Collection[S | int]] = ..., *, title: Optional[str] = ..., subtitle: Optional[str] = ..., completion_title: Optional[str] = ..., completion_subtitle: Optional[str] = ..., total: Optional[int] = ..., show_rate: bool = ..., show_eta: bool = ..., remove_on_exit: bool = ..., disabled: bool = ...) -> None:
        ...
    
    def __iter__(self) -> Iterable[S | int]:
        ...
    
    def __enter__(self) -> ProgressBar:
        ...
    
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None:
        ...
    


@mddoc
def toast(title: str, description: str = ..., kind: Optional[Literal["danger"]] = ...) -> None:
    """Show a toast notification

    Use `mo.status.toast()` to display a brief notification.

    **Example.**

    ```python
    mo.status.toast(
        "Operation completed",
        "Your task has finished successfully",
    )
    ```

    **Args:**

    - `title`: The main message of the toast
    - `description`: Optional additional details (can include HTML)
    - `kind`: Optional kind, use "danger" for error toasts
    """
    ...

