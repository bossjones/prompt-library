"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Coroutine, Final, Union
from marimo._output.hypertext import Html
from marimo._output.rich_help import mddoc
from marimo._plugins.ui._core.ui_element import UIElement

@mddoc
class routes(UIElement[str, str]):
    """
    Renders a list of routes that are switched based on the
    URL path.

    Routes currently don't support nested routes, or
    dynamic routes (e.g. `#/user/:id`). If you'd like to
    see these features, please let us know on GitHub:
    https://github.com/marimo-team/marimo/issues

    For a simple-page-application (SPA) experience, you
    should use hash-based routing. For example, prefix
    your routes with `#/`.

    If you are using a multi-page-application (MPA) with
    `marimo.create_asgi_app`, you should use path-based routing.
    For example, prefix your routes with `/`.

    **Examples.**

    ```python
    mo.routes(
        {
            "#/": render_home,
            "#/about": render_about,
            "#/contact": render_contact,
            mo.routes.CATCH_ALL: render_home,
        }
    )
    ```

    **Args.**

    - `routes`: a dictionary of routes, where the key is the URL path
      and the value is a function that returns the content to display.

    **Returns.**

    - An `Html` object.
    """
    _name: Final[str] = ...
    CATCH_ALL = ...
    DEFAULT = ...
    def __init__(self, routes: dict[str, Union[Callable[[], object], Callable[[], Coroutine[None, None, object]], object,],]) -> None:
        ...

    def batch(self, *args: Any, **kwargs: Any) -> Any:
        ...

    def center(self, *args: Any, **kwargs: Any) -> Html:
        ...

    def right(self, *args: Any, **kwargs: Any) -> Html:
        ...

    def left(self, *args: Any, **kwargs: Any) -> Html:
        ...

    def callout(self, *args: Any, **kwargs: Any) -> Html:
        ...

    def style(self, *args: Any, **kwargs: Any) -> Html:
        ...
