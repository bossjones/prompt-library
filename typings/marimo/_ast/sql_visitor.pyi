"""
This type stub file was generated by pyright.
"""

import ast
from dataclasses import dataclass
from typing import Any

LOGGER = ...
class SQLVisitor(ast.NodeVisitor):
    """
    Find any SQL queries in the AST.
    This should be inside a function called `.execute` or `.sql`.
    """
    def __init__(self) -> None:
        ...

    def visit_Call(self, node: ast.Call) -> None:
        ...

    def get_sqls(self) -> list[str]:
        ...



def normalize_sql_f_string(node: ast.JoinedStr) -> str:
    """
    Normalize a f-string to a string by joining the parts.

    We add placeholder for {...} expressions in the f-string.
    This is so we can create a valid SQL query to be passed to
    other utilities.
    """
    ...

class TokenExtractor:
    def __init__(self, sql_statement: str, tokens: list[Any]) -> None:
        ...

    def token_str(self, i: int) -> str:
        ...

    def is_keyword(self, i: int, match: str) -> bool:
        ...

    def strip_quotes(self, token: str) -> str:
        ...



@dataclass
class SQLDefs:
    tables: list[str] = ...
    views: list[str] = ...
    schemas: list[str] = ...
    catalogs: list[str] = ...
    reffed_schemas: list[str] = ...
    reffed_catalogs: list[str] = ...


def find_sql_defs(sql_statement: str) -> SQLDefs:
    """
    Find the tables, views, schemas, and catalogs created/attached in a SQL statement.

    This function uses the DuckDB tokenizer to find the tables created
    and schemas attached in a SQL statement. It returns a list of the table
    names created, views created, schemas created, and catalogs attached in the
    statement.

    Args:
        sql_statement: The SQL statement to parse.

    Returns:
        SQLDefs
    """
    ...

def find_sql_refs(sql_statement: str) -> list[str]:
    """
    Find table and schema references in a SQL statement.

    Args:
        sql_statement: The SQL statement to parse.

    Returns:
        A list of table and schema names referenced in the statement.
    """
    ...
