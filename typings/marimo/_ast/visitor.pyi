"""
This type stub file was generated by pyright.
"""

import ast
import sys
from dataclasses import dataclass
from typing import Callable, Literal, Optional, Union

LOGGER = ...
Name = str
Language = Literal["python", "sql"]
@dataclass
class ImportData:
    module: str
    definition: str
    imported_symbol: Optional[str] = ...
    import_level: Optional[int] = ...
    def __post_init__(self) -> None:
        ...



@dataclass
class VariableData:
    kind: Literal["function", "class", "import", "variable", "table", "view", "schema", "catalog",] = ...
    required_refs: set[Name] = ...
    import_data: Optional[ImportData] = ...
    @property
    def language(self) -> Language:
        ...



@dataclass
class Block:
    """A scope in which names are declared."""
    defs: set[Name] = ...
    global_names: set[Name] = ...
    variable_data: dict[Name, list[VariableData]] = ...
    is_comprehension: bool = ...
    def is_defined(self, name: str) -> bool:
        ...



@dataclass
class ObscuredScope:
    """The scope in which a name is hidden."""
    obscured: Optional[str] = ...


@dataclass
class RefData:
    """Metadata about variables referenced but not defined by a cell."""
    deleted: bool
    parent_blocks: list[Block]
    ...


NamedNode = Union[ast.Name, ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef, ast.arg, ast.Global, "ast.MatchAs", "ast.MatchMapping", "ast.MatchStar", "ast.TypeVar", "ast.ParamSpec", "ast.TypeVarTuple",]
class ScopedVisitor(ast.NodeVisitor):
    def __init__(self, mangle_prefix: Optional[str] = ..., ignore_local: bool = ..., on_def: Callable[[NamedNode, str, list[Block]], None] | None = ..., on_ref: Callable[[NamedNode], None] | None = ...) -> None:
        ...

    @property
    def defs(self) -> set[Name]:
        """Get all global defs."""
        ...

    @property
    def variable_data(self) -> dict[Name, list[VariableData]]:
        """Get data accompanying globals."""
        ...

    @property
    def refs(self) -> set[Name]:
        """Names referenced but not defined."""
        ...

    @property
    def deleted_refs(self) -> set[Name]:
        """Referenced names that were deleted with `del`."""
        ...

    def generic_visit(self, node: ast.AST) -> ast.AST:
        """Visits the children of node and manages the block stack.

        Note: visit calls visit_ClassName, or generic_visit() if the former
        doesn't exist. That means that _this method should never call
        visit on `node`_, as this could lead to unbounded recursion.
        (Calling visit on `node`'s children is fine.) In summary:
        call super().generic_visit on `node` and `visit()` on node's children.
        """
        ...

    def visit_ClassDef(self, node: ast.ClassDef) -> ast.ClassDef:
        ...

    def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -> ast.AsyncFunctionDef:
        ...

    def visit_FunctionDef(self, node: ast.FunctionDef) -> ast.FunctionDef:
        ...

    def visit_Call(self, node: ast.Call) -> ast.Call:
        ...

    def visit_Lambda(self, node: ast.Lambda) -> ast.Lambda:
        ...

    def visit_arg(self, node: ast.arg) -> ast.arg:
        ...

    def visit_arguments(self, node: ast.arguments) -> ast.arguments:
        ...

    def visit_Assign(self, node: ast.Assign) -> ast.Assign:
        ...

    def visit_AugAssign(self, node: ast.AugAssign) -> ast.AugAssign:
        ...

    def visit_AnnAssign(self, node: ast.AnnAssign) -> ast.AnnAssign:
        ...

    def visit_comprehension(self, node: ast.comprehension) -> ast.comprehension:
        ...

    def visit_NamedExpr(self, node: ast.NamedExpr) -> ast.NamedExpr:
        ...

    def visit_Name(self, node: ast.Name) -> ast.Name:
        ...

    def visit_Global(self, node: ast.Global) -> ast.Global:
        ...

    def visit_Import(self, node: ast.Import) -> ast.Import:
        ...

    def visit_ImportFrom(self, node: ast.ImportFrom) -> ast.ImportFrom:
        ...

    if sys.version_info >= (3, 10):
        def visit_MatchAs(self, node: ast.MatchAs) -> ast.MatchAs:
            ...

        def visit_MatchMapping(self, node: ast.MatchMapping) -> ast.MatchMapping:
            ...

        def visit_MatchStar(self, node: ast.MatchStar) -> ast.MatchStar:
            ...

    if sys.version_info >= (3, 12):
        def visit_TypeVar(self, node: ast.TypeVar) -> ast.TypeVar:
            ...

        def visit_ParamSpec(self, node: ast.ParamSpec) -> ast.ParamSpec:
            ...

        def visit_TypeVarTuple(self, node: ast.TypeVarTuple) -> ast.TypeVarTuple:
            ...
