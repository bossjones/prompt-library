"""
This type stub file was generated by pyright.
"""

from typing import Optional, TYPE_CHECKING, Union
from marimo._ast.app import App
from marimo._messaging.cell_output import CellOutput

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
LOGGER = ...
class MarimoIslandStub:
    def __init__(self, display_code: bool = ..., display_output: bool = ..., is_reactive: bool = ..., *, cell_id: str, app_id: str, code: str) -> None:
        ...
    
    @property
    def output(self) -> Optional[CellOutput]:
        ...
    
    @property
    def code(self) -> str:
        ...
    
    def render(self, display_code: Optional[bool] = ..., display_output: Optional[bool] = ..., is_reactive: Optional[bool] = ...) -> str:
        """
        Render the HTML island code for the cell.
        Note: This will override construction defaults.

        *Args:*

        - display_code (bool): Whether to display the code in HTML.
        - display_output (bool): Whether to include the output in the HTML.
        - is_reactive (bool): Whether this code block will run with pyodide.

        *Returns:*

        - str: The HTML code.
        """
        ...
    


class MarimoIslandGenerator:
    """
    Generates Marimo islands for embedding in other pages.

    This is a great way to use another SSG framework that converts
    Python code to HTML using marimo-islands.

    Generally you will want to:

    1. Find all the code snippets and add them to the generator.
    2. Build the app.
    3. Replace all code snippets with the rendered HTML.
    4. Include the header in the <head> tag.

    # Example

    ```python
    from marimo.islands import MarimoIslandGenerator

    generator = MarimoIslandGenerator()
    block1 = generator.add_code("import marimo as mo")
    block2 = generator.add_code("mo.md('Hello, islands!')")

    # Build the app
    app = await generator.build()

    # Render the app
    output = f\"\"\"
    <html>
        <head>
            {generator.render_head()}
        </head>
        <body>
            {block1.render(display_output=False)}
            {block2.render()}
        </body>
    </html>
    \"\"\"
    ```
    """
    def __init__(self, app_id: str = ...) -> None:
        ...
    
    @staticmethod
    def from_file(filename: str, display_code: bool = ...) -> MarimoIslandGenerator:
        """
        Create a MarimoIslandGenerator and populate MarimoIslandStubs
        using code cells from a marimo *.py file.

        *Args:*

        - filename (str): Marimo .py filename to convert to reactive HTML.
        - display_code (bool): Whether to display the code in HTML snippets.
        """
        ...
    
    def add_code(self, code: str, display_code: bool = ..., display_output: bool = ..., is_reactive: bool = ..., is_raw: bool = ...) -> MarimoIslandStub:
        """Add a code cell to the app.

        *Args:*

        - code (str): The code to add to the app.
        - display_code (bool): Whether to display the code in the HTML.
        - display_output (bool): Whether to display the output in the HTML.
        - is_raw (bool): Whether to handled the code without formatting.
        - is_reactive (bool): Whether this code block will run with pyodide.
        """
        ...
    
    async def build(self) -> App:
        """
        Build the app. This should be called after adding all the code cells.

        *Returns:*

        - App: The built app.
        """
        ...
    
    def render_head(self, *, version_override: str = ..., _development_url: Union[str, bool] = ...) -> str:
        """
        Render the header for the app.
        This should be included in the <head> tag of the page.

        *Args:*

        - version_override (str): Marimo version to use for loaded js/css.
        - _development_url (str): If True, uses local marimo islands js.
        """
        ...
    
    def render_init_island(self) -> str:
        """
        Renders a static html MarimoIsland str which displays a spinning
        initialization loader while Pyodide loads and disappears once
        the kernel is ready to use.
        """
        ...
    
    def render_body(self, *, include_init_island: bool = ..., max_width: Optional[str] = ..., margin: Optional[str] = ..., style: Optional[str] = ...) -> str:
        """
        Render the body for the app.
        This should be included in the <body> tag of the page.

        *Args:*
        - include_init_island (bool): If True, adds initialization loader.
        - max_width (str): CSS style max_width property.
        - margin (str): CSS style margin property.
        - style (str): CSS style. Overrides max_width and margin.
        """
        ...
    
    def render_html(self, *, version_override: str = ..., _development_url: Union[str, bool] = ..., include_init_island: bool = ..., max_width: Optional[str] = ..., margin: Optional[str] = ..., style: Optional[str] = ...) -> str:
        """
        Render reactive html for the app.

        *Args:*

        - version_override (str): Marimo version to use for loaded js/css.
        - _development_url (str): If True, uses local marimo islands js.
        - include_init_island (bool): If True, adds initialization loader.
        - max_width (str): CSS style max_width property.
        - margin (str): CSS style margin property.
        - style (str): CSS style. Overrides max_width and margin.
        """
        ...
    


def remove_empty_lines(text: str) -> str:
    ...

