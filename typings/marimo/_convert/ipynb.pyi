"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, List
from marimo._ast.visitor import NamedNode

Transform = Callable[[List[str]], List[str]]
def transform_fixup_multiple_definitions(sources: List[str]) -> List[str]:
    """
    Fixup multiple definitions of the same name in different cells,
    by making the name private (underscore) to each cell.

    This only takes effect if the declaration and reference are in
    the same cell.
    """
    ...

def transform_add_marimo_import(sources: List[str]) -> List[str]:
    """
    Add an import statement for marimo if any cell uses
    the `mo.md` or `mo.sql` functions.
    """
    ...

def transform_magic_commands(sources: List[str]) -> List[str]:
    """
    Transform Jupyter magic commands to their marimo equivalents
    or comment them out.
    """
    ...

def transform_exclamation_mark(sources: List[str]) -> List[str]:
    """
    Handle exclamation mark commands.
    """
    ...

class Renamer:
    def __init__(self, cell_remappings: dict[int, dict[str, str]]) -> None:
        ...

    def rename_named_node(self, cell: int, node: NamedNode, is_reference: bool) -> None:
        ...



def transform_duplicate_definitions(sources: List[str]) -> List[str]:
    """
    Rename variables with duplicate definitions across multiple cells,
    even when the variables are declared in one cell and used in another.

    We assume the notebook was meant to be run top-to-bottom,
    so references to the name will be renamed to the last definition.

    If a new definition is derived from a previous definition,
    then at the top of the cell, we add a new line that assigns
    the new definition to the previous definition.

    ```
    # Cell 1
    a = 1

    # Cell 2
    print(a)

    # Cell 3
    a = 2

    # Cell 4
    a = 3
    print(a)
    ```

    Then we transform it to:

    ```
    # Cell 1
    a = 1

    # Cell 2
    print(a)

    # Cell 3
    a_1 = a
    a_1 = a_1 + 2

    # Cell 4
    a_2 = 3
    print(a_2)
    ```
    """
    ...

def transform_cell_metadata(sources: List[str], metadata: List[Dict[str, Any]]) -> List[str]:
    """
    Handle cell metadata, such as tags or cell IDs.
    """
    ...

def transform_remove_duplicate_imports(sources: List[str]) -> List[str]:
    """
    Remove duplicate imports appearing in any cell.
    """
    ...

def transform_remove_empty_cells(sources: List[str]) -> List[str]:
    """
    Remove empty cells.
    """
    ...

def transform_strip_whitespace(sources: List[str]) -> List[str]:
    """
    Strip whitespace from the beginning and end of each cell.
    """
    ...

def extract_inline_meta(script: str) -> tuple[str | None, str]:
    """
    Extract PEP 723 metadata from a Python source.

    Returns a tuple of the metadata comment and the remaining script.
    """
    ...

def convert_from_ipynb(raw_notebook: str) -> str:
    ...
