"""
This type stub file was generated by pyright.
"""

import contextlib
import queue
from typing import Any, Iterable, Iterator, Optional, Protocol, TYPE_CHECKING
from marimo._ast.cell import CellId_t
from marimo._messaging.types import KernelMessage, Stderr, Stdin, Stdout, Stream
from marimo._server.types import QueueType

if TYPE_CHECKING:
    ...
LOGGER = ...
OUTPUT_MAX_BYTES = ...
STD_STREAM_MAX_BYTES = ...
class PipeProtocol(Protocol):
    def send(self, obj: Any) -> None:
        ...



class QueuePipe:
    def __init__(self, queue: queue.Queue[KernelMessage]) -> None:
        ...

    def send(self, obj: Any) -> None:
        ...



class ThreadSafeStream(Stream):
    """A thread-safe wrapper around a pipe."""
    def __init__(self, pipe: PipeProtocol, input_queue: QueueType[str], cell_id: Optional[CellId_t] = ...) -> None:
        ...

    def write(self, op: str, data: dict[Any, Any]) -> None:
        ...



class Watcher:
    """Watches and redirects a standard stream."""
    def __init__(self, standard_stream: ThreadSafeStdout | ThreadSafeStderr) -> None:
        ...

    def start(self) -> None:
        ...

    def pause(self) -> None:
        ...

    def stop(self) -> None:
        ...



class ThreadSafeStdout(Stdout):
    encoding = ...
    errors = ...
    _fileno: int | None = ...
    def __init__(self, stream: ThreadSafeStream) -> None:
        ...

    def fileno(self) -> int:
        ...

    def writable(self) -> bool:
        ...

    def readable(self) -> bool:
        ...

    def seekable(self) -> bool:
        ...

    def flush(self) -> None:
        ...

    def writelines(self, sequence: Iterable[str]) -> None:
        ...



class ThreadSafeStderr(Stderr):
    encoding = ...
    errors = ...
    _fileno: int | None = ...
    def __init__(self, stream: ThreadSafeStream) -> None:
        ...

    def fileno(self) -> int:
        ...

    def writable(self) -> bool:
        ...

    def readable(self) -> bool:
        ...

    def seekable(self) -> bool:
        ...

    def flush(self) -> None:
        ...

    def writelines(self, sequence: Iterable[str]) -> None:
        ...



class ThreadSafeStdin(Stdin):
    """Implements a subset of stdin."""
    encoding = ...
    errors = ...
    def __init__(self, stream: ThreadSafeStream) -> None:
        ...

    def fileno(self) -> int:
        ...

    def writable(self) -> bool:
        ...

    def readable(self) -> bool:
        ...

    def readline(self, size: int | None = ...) -> str:
        ...

    def readlines(self, hint: int | None = ...) -> list[str]:
        ...



@contextlib.contextmanager
def redirect(standard_stream: Stdout | Stderr) -> Iterator[None]:
    """Redirect a standard stream to the frontend."""
    ...
