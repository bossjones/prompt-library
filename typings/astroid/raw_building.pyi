"""
This type stub file was generated by pyright.
"""

import types
from collections.abc import Iterable
from typing import Any, Union
from astroid import nodes
from astroid.manager import AstroidManager

"""this module contains a set of functions to create astroid trees from scratch
(build_* functions) or from living object (object_build_* functions)
"""
logger = ...
_FunctionTypes = Union[types.FunctionType, types.MethodType, types.BuiltinFunctionType, types.WrapperDescriptorType, types.MethodDescriptorType, types.ClassMethodDescriptorType,]
_CONSTANTS = ...
TYPE_NONE = ...
TYPE_NOTIMPLEMENTED = ...
TYPE_ELLIPSIS = ...
def attach_dummy_node(node, name: str, runtime_object=...) -> None:
    """create a dummy node and register it in the locals of the given
    node with the specified name
    """
    ...

def attach_const_node(node, name: str, value) -> None:
    """create a Const node and register it in the locals of the given
    node with the specified name
    """
    ...

def attach_import_node(node, modname: str, membername: str) -> None:
    """create a ImportFrom node and register it in the locals of the given
    node with the specified name
    """
    ...

def build_module(name: str, doc: str | None = ...) -> nodes.Module:
    """create and initialize an astroid Module node"""
    ...

def build_class(name: str, basenames: Iterable[str] = ..., doc: str | None = ...) -> nodes.ClassDef:
    """Create and initialize an astroid ClassDef node."""
    ...

def build_function(name: str, args: list[str] | None = ..., posonlyargs: list[str] | None = ..., defaults: list[Any] | None = ..., doc: str | None = ..., kwonlyargs: list[str] | None = ..., kwonlydefaults: list[Any] | None = ...) -> nodes.FunctionDef:
    """create and initialize an astroid FunctionDef node"""
    ...

def build_from_import(fromname: str, names: list[str]) -> nodes.ImportFrom:
    """create and initialize an astroid ImportFrom import statement"""
    ...

def register_arguments(func: nodes.FunctionDef, args: list | None = ...) -> None:
    """add given arguments to local

    args is a list that may contains nested lists
    (i.e. def func(a, (b, c, d)): ...)
    """
    ...

def object_build_class(node: nodes.Module | nodes.ClassDef, member: type, localname: str) -> nodes.ClassDef:
    """create astroid for a living class object"""
    ...

def object_build_function(node: nodes.Module | nodes.ClassDef, member: _FunctionTypes, localname: str) -> None:
    """create astroid for a living function object"""
    ...

def object_build_datadescriptor(node: nodes.Module | nodes.ClassDef, member: type, name: str) -> nodes.ClassDef:
    """create astroid for a living data descriptor object"""
    ...

def object_build_methoddescriptor(node: nodes.Module | nodes.ClassDef, member: _FunctionTypes, localname: str) -> None:
    """create astroid for a living method descriptor object"""
    ...

class InspectBuilder:
    """class for building nodes from living object

    this is actually a really minimal representation, including only Module,
    FunctionDef and ClassDef nodes and some others as guessed.
    """
    bootstrapped: bool = ...
    def __init__(self, manager_instance: AstroidManager | None = ...) -> None:
        ...

    def inspect_build(self, module: types.ModuleType, modname: str | None = ..., path: str | None = ...) -> nodes.Module:
        """build astroid from a living module (i.e. using inspect)
        this is used when there is no python source code available (either
        because it's a built-in module or because the .py is not available)
        """
        ...

    def object_build(self, node: nodes.Module | nodes.ClassDef, obj: types.ModuleType | type) -> None:
        """recursive method which create a partial ast from real objects
        (only function, class, and method are handled)
        """
        ...

    def imported_member(self, node, member, name: str) -> bool:
        """verify this is not an imported class or handle it"""
        ...



_CONST_PROXY: dict[type, nodes.ClassDef] = ...
