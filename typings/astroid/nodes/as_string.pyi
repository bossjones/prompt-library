"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING
from astroid import nodes, objects
from astroid.nodes.node_classes import Match, MatchAs, MatchCase, MatchClass, MatchMapping, MatchOr, MatchSequence, MatchSingleton, MatchStar, MatchValue, Unknown

"""This module renders Astroid nodes as string"""
if TYPE_CHECKING:
    ...
DOC_NEWLINE = ...
class AsStringVisitor:
    """Visitor to render an Astroid node as a valid python code string"""
    def __init__(self, indent: str = ...) -> None:
        ...

    def __call__(self, node) -> str:
        """Makes this visitor behave as a simple function"""
        ...

    def visit_await(self, node) -> str:
        ...

    def visit_asyncwith(self, node) -> str:
        ...

    def visit_asyncfor(self, node) -> str:
        ...

    def visit_arguments(self, node) -> str:
        """return an astroid.Function node as string"""
        ...

    def visit_assignattr(self, node) -> str:
        """return an astroid.AssAttr node as string"""
        ...

    def visit_assert(self, node) -> str:
        """return an astroid.Assert node as string"""
        ...

    def visit_assignname(self, node) -> str:
        """return an astroid.AssName node as string"""
        ...

    def visit_assign(self, node) -> str:
        """return an astroid.Assign node as string"""
        ...

    def visit_augassign(self, node) -> str:
        """return an astroid.AugAssign node as string"""
        ...

    def visit_annassign(self, node) -> str:
        """Return an astroid.AugAssign node as string"""
        ...

    def visit_binop(self, node) -> str:
        """return an astroid.BinOp node as string"""
        ...

    def visit_boolop(self, node) -> str:
        """return an astroid.BoolOp node as string"""
        ...

    def visit_break(self, node) -> str:
        """return an astroid.Break node as string"""
        ...

    def visit_call(self, node) -> str:
        """return an astroid.Call node as string"""
        ...

    def visit_classdef(self, node) -> str:
        """return an astroid.ClassDef node as string"""
        ...

    def visit_compare(self, node) -> str:
        """return an astroid.Compare node as string"""
        ...

    def visit_comprehension(self, node) -> str:
        """return an astroid.Comprehension node as string"""
        ...

    def visit_const(self, node) -> str:
        """return an astroid.Const node as string"""
        ...

    def visit_continue(self, node) -> str:
        """return an astroid.Continue node as string"""
        ...

    def visit_delete(self, node) -> str:
        """return an astroid.Delete node as string"""
        ...

    def visit_delattr(self, node) -> str:
        """return an astroid.DelAttr node as string"""
        ...

    def visit_delname(self, node) -> str:
        """return an astroid.DelName node as string"""
        ...

    def visit_decorators(self, node) -> str:
        """return an astroid.Decorators node as string"""
        ...

    def visit_dict(self, node) -> str:
        """return an astroid.Dict node as string"""
        ...

    def visit_dictunpack(self, node) -> str:
        ...

    def visit_dictcomp(self, node) -> str:
        """return an astroid.DictComp node as string"""
        ...

    def visit_expr(self, node) -> str:
        """return an astroid.Discard node as string"""
        ...

    def visit_emptynode(self, node) -> str:
        """dummy method for visiting an Empty node"""
        ...

    def visit_excepthandler(self, node) -> str:
        ...

    def visit_empty(self, node) -> str:
        """return an Empty node as string"""
        ...

    def visit_for(self, node) -> str:
        """return an astroid.For node as string"""
        ...

    def visit_importfrom(self, node) -> str:
        """return an astroid.ImportFrom node as string"""
        ...

    def visit_joinedstr(self, node) -> str:
        ...

    def visit_formattedvalue(self, node) -> str:
        ...

    def handle_functiondef(self, node: nodes.FunctionDef, keyword: str) -> str:
        """return a (possibly async) function definition node as string"""
        ...

    def visit_functiondef(self, node: nodes.FunctionDef) -> str:
        """return an astroid.FunctionDef node as string"""
        ...

    def visit_asyncfunctiondef(self, node: nodes.AsyncFunctionDef) -> str:
        """return an astroid.AsyncFunction node as string"""
        ...

    def visit_generatorexp(self, node) -> str:
        """return an astroid.GeneratorExp node as string"""
        ...

    def visit_attribute(self, node) -> str:
        """return an astroid.Getattr node as string"""
        ...

    def visit_global(self, node) -> str:
        """return an astroid.Global node as string"""
        ...

    def visit_if(self, node) -> str:
        """return an astroid.If node as string"""
        ...

    def visit_ifexp(self, node) -> str:
        """return an astroid.IfExp node as string"""
        ...

    def visit_import(self, node) -> str:
        """return an astroid.Import node as string"""
        ...

    def visit_keyword(self, node) -> str:
        """return an astroid.Keyword node as string"""
        ...

    def visit_lambda(self, node) -> str:
        """return an astroid.Lambda node as string"""
        ...

    def visit_list(self, node) -> str:
        """return an astroid.List node as string"""
        ...

    def visit_listcomp(self, node) -> str:
        """return an astroid.ListComp node as string"""
        ...

    def visit_module(self, node) -> str:
        """return an astroid.Module node as string"""
        ...

    def visit_name(self, node) -> str:
        """return an astroid.Name node as string"""
        ...

    def visit_namedexpr(self, node) -> str:
        """Return an assignment expression node as string"""
        ...

    def visit_nonlocal(self, node) -> str:
        """return an astroid.Nonlocal node as string"""
        ...

    def visit_paramspec(self, node: nodes.ParamSpec) -> str:
        """return an astroid.ParamSpec node as string"""
        ...

    def visit_pass(self, node) -> str:
        """return an astroid.Pass node as string"""
        ...

    def visit_partialfunction(self, node: objects.PartialFunction) -> str:
        """Return an objects.PartialFunction as string."""
        ...

    def visit_raise(self, node) -> str:
        """return an astroid.Raise node as string"""
        ...

    def visit_return(self, node) -> str:
        """return an astroid.Return node as string"""
        ...

    def visit_set(self, node) -> str:
        """return an astroid.Set node as string"""
        ...

    def visit_setcomp(self, node) -> str:
        """return an astroid.SetComp node as string"""
        ...

    def visit_slice(self, node) -> str:
        """return an astroid.Slice node as string"""
        ...

    def visit_subscript(self, node) -> str:
        """return an astroid.Subscript node as string"""
        ...

    def visit_try(self, node) -> str:
        """return an astroid.Try node as string"""
        ...

    def visit_trystar(self, node) -> str:
        """return an astroid.TryStar node as string"""
        ...

    def visit_tuple(self, node) -> str:
        """return an astroid.Tuple node as string"""
        ...

    def visit_typealias(self, node: nodes.TypeAlias) -> str:
        """return an astroid.TypeAlias node as string"""
        ...

    def visit_typevar(self, node: nodes.TypeVar) -> str:
        """return an astroid.TypeVar node as string"""
        ...

    def visit_typevartuple(self, node: nodes.TypeVarTuple) -> str:
        """return an astroid.TypeVarTuple node as string"""
        ...

    def visit_unaryop(self, node) -> str:
        """return an astroid.UnaryOp node as string"""
        ...

    def visit_while(self, node) -> str:
        """return an astroid.While node as string"""
        ...

    def visit_with(self, node) -> str:
        """return an astroid.With node as string"""
        ...

    def visit_yield(self, node) -> str:
        """yield an ast.Yield node as string"""
        ...

    def visit_yieldfrom(self, node) -> str:
        """Return an astroid.YieldFrom node as string."""
        ...

    def visit_starred(self, node) -> str:
        """return Starred node as string"""
        ...

    def visit_match(self, node: Match) -> str:
        """Return an astroid.Match node as string."""
        ...

    def visit_matchcase(self, node: MatchCase) -> str:
        """Return an astroid.MatchCase node as string."""
        ...

    def visit_matchvalue(self, node: MatchValue) -> str:
        """Return an astroid.MatchValue node as string."""
        ...

    @staticmethod
    def visit_matchsingleton(node: MatchSingleton) -> str:
        """Return an astroid.MatchSingleton node as string."""
        ...

    def visit_matchsequence(self, node: MatchSequence) -> str:
        """Return an astroid.MatchSequence node as string."""
        ...

    def visit_matchmapping(self, node: MatchMapping) -> str:
        """Return an astroid.MatchMapping node as string."""
        ...

    def visit_matchclass(self, node: MatchClass) -> str:
        """Return an astroid.MatchClass node as string."""
        ...

    def visit_matchstar(self, node: MatchStar) -> str:
        """Return an astroid.MatchStar node as string."""
        ...

    def visit_matchas(self, node: MatchAs) -> str:
        """Return an astroid.MatchAs node as string."""
        ...

    def visit_matchor(self, node: MatchOr) -> str:
        """Return an astroid.MatchOr node as string."""
        ...

    def visit_frozenset(self, node):
        ...

    def visit_super(self, node):
        ...

    def visit_uninferable(self, node): # -> str:
        ...

    def visit_property(self, node):
        ...

    def visit_evaluatedobject(self, node):
        ...

    def visit_unknown(self, node: Unknown) -> str:
        ...



to_code = ...
