"""
This type stub file was generated by pyright.
"""

from functools import lru_cache
from typing import TYPE_CHECKING
from astroid import bases, nodes
from astroid.nodes import node_classes

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
IMPL_PREFIX = ...
LEN_OF_IMPL_PREFIX = ...
class ObjectModel:
    def __init__(self) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def __call__(self, instance):
        ...
    
    def __get__(self, instance, cls=...):
        ...
    
    def __contains__(self, name) -> bool:
        ...
    
    @lru_cache
    def attributes(self) -> list[str]:
        """Get the attributes which are exported by this object model."""
        ...
    
    def lookup(self, name):
        """Look up the given *name* in the current model.

        It should return an AST or an interpreter object,
        but if the name is not found, then an AttributeInferenceError will be raised.
        """
        ...
    
    @property
    def attr___new__(self) -> bases.BoundMethod:
        """Calling cls.__new__(type) on an object returns an instance of 'type'."""
        ...
    
    @property
    def attr___init__(self) -> bases.BoundMethod:
        """Calling cls.__init__() normally returns None."""
        ...
    


class ModuleModel(ObjectModel):
    @property
    def attr_builtins(self):
        ...
    
    @property
    def attr___path__(self):
        ...
    
    @property
    def attr___name__(self):
        ...
    
    @property
    def attr___doc__(self):
        ...
    
    @property
    def attr___file__(self):
        ...
    
    @property
    def attr___dict__(self):
        ...
    
    @property
    def attr___package__(self):
        ...
    
    @property
    def attr___spec__(self):
        ...
    
    @property
    def attr___loader__(self):
        ...
    
    @property
    def attr___cached__(self):
        ...
    


class FunctionModel(ObjectModel):
    @property
    def attr___name__(self):
        ...
    
    @property
    def attr___doc__(self):
        ...
    
    @property
    def attr___qualname__(self):
        ...
    
    @property
    def attr___defaults__(self):
        ...
    
    @property
    def attr___annotations__(self):
        ...
    
    @property
    def attr___dict__(self):
        ...
    
    attr___globals__ = ...
    @property
    def attr___kwdefaults__(self):
        ...
    
    @property
    def attr___module__(self):
        ...
    
    @property
    def attr___get__(self):
        class DescriptorBoundMethod(bases.BoundMethod):
            """Bound method which knows how to understand calling descriptor
            binding.
            """
            ...
        
        
    
    @property
    def attr___ne__(self):
        ...
    
    attr___subclasshook__ = ...
    attr___str__ = ...
    attr___sizeof__ = ...
    attr___setattr___ = ...
    attr___repr__ = ...
    attr___reduce__ = ...
    attr___reduce_ex__ = ...
    attr___lt__ = ...
    attr___eq__ = ...
    attr___gt__ = ...
    attr___format__ = ...
    attr___delattr___ = ...
    attr___getattribute__ = ...
    attr___hash__ = ...
    attr___dir__ = ...
    attr___call__ = ...
    attr___class__ = ...
    attr___closure__ = ...
    attr___code__ = ...


class ClassModel(ObjectModel):
    def __init__(self) -> None:
        ...
    
    @property
    def attr___annotations__(self) -> node_classes.Unkown:
        ...
    
    @property
    def attr___module__(self):
        ...
    
    @property
    def attr___name__(self):
        ...
    
    @property
    def attr___qualname__(self):
        ...
    
    @property
    def attr___doc__(self):
        ...
    
    @property
    def attr___mro__(self):
        ...
    
    @property
    def attr_mro(self):
        class MroBoundMethod(bases.BoundMethod):
            ...
        
        
    
    @property
    def attr___bases__(self):
        ...
    
    @property
    def attr___class__(self):
        ...
    
    @property
    def attr___subclasses__(self):
        """Get the subclasses of the underlying class.

        This looks only in the current module for retrieving the subclasses,
        thus it might miss a couple of them.
        """
        class SubclassesBoundMethod(bases.BoundMethod):
            ...
        
        
    
    @property
    def attr___dict__(self):
        ...
    
    @property
    def attr___call__(self):
        """Calling a class A() returns an instance of A."""
        ...
    


class SuperModel(ObjectModel):
    @property
    def attr___thisclass__(self):
        ...
    
    @property
    def attr___self_class__(self):
        ...
    
    @property
    def attr___self__(self):
        ...
    
    @property
    def attr___class__(self):
        ...
    


class UnboundMethodModel(ObjectModel):
    @property
    def attr___class__(self):
        ...
    
    @property
    def attr___func__(self):
        ...
    
    @property
    def attr___self__(self):
        ...
    
    attr_im_func = ...
    attr_im_class = ...
    attr_im_self = ...


class ContextManagerModel(ObjectModel):
    """Model for context managers.

    Based on 3.3.9 of the Data Model documentation:
    https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers
    """
    @property
    def attr___enter__(self) -> bases.BoundMethod:
        """Representation of the base implementation of __enter__.

        As per Python documentation:
        Enter the runtime context related to this object. The with statement
        will bind this method's return value to the target(s) specified in the
        as clause of the statement, if any.
        """
        ...
    
    @property
    def attr___exit__(self) -> bases.BoundMethod:
        """Representation of the base implementation of __exit__.

        As per Python documentation:
        Exit the runtime context related to this object. The parameters describe the
        exception that caused the context to be exited. If the context was exited
        without an exception, all three arguments will be None.
        """
        ...
    


class BoundMethodModel(FunctionModel):
    @property
    def attr___func__(self):
        ...
    
    @property
    def attr___self__(self):
        ...
    


class GeneratorModel(FunctionModel, ContextManagerModel):
    def __new__(cls, *args, **kwargs):
        ...
    
    @property
    def attr___name__(self):
        ...
    
    @property
    def attr___doc__(self):
        ...
    


class AsyncGeneratorModel(GeneratorModel):
    def __new__(cls, *args, **kwargs):
        ...
    


class InstanceModel(ObjectModel):
    @property
    def attr___class__(self):
        ...
    
    @property
    def attr___module__(self):
        ...
    
    @property
    def attr___doc__(self):
        ...
    
    @property
    def attr___dict__(self):
        ...
    


class ExceptionInstanceModel(InstanceModel):
    @property
    def attr_args(self) -> nodes.Tuple:
        ...
    
    @property
    def attr___traceback__(self):
        ...
    


class SyntaxErrorInstanceModel(ExceptionInstanceModel):
    @property
    def attr_text(self):
        ...
    


class OSErrorInstanceModel(ExceptionInstanceModel):
    @property
    def attr_filename(self):
        ...
    
    @property
    def attr_errno(self):
        ...
    
    @property
    def attr_strerror(self):
        ...
    
    attr_filename2 = ...


class ImportErrorInstanceModel(ExceptionInstanceModel):
    @property
    def attr_name(self):
        ...
    
    @property
    def attr_path(self):
        ...
    


class UnicodeDecodeErrorInstanceModel(ExceptionInstanceModel):
    @property
    def attr_object(self):
        ...
    


BUILTIN_EXCEPTIONS = ...
class DictModel(ObjectModel):
    @property
    def attr___class__(self):
        ...
    
    @property
    def attr_items(self):
        ...
    
    @property
    def attr_keys(self):
        ...
    
    @property
    def attr_values(self):
        ...
    


class PropertyModel(ObjectModel):
    """Model for a builtin property."""
    @property
    def attr_fget(self):
        class PropertyFuncAccessor(nodes.FunctionDef):
            ...
        
        
    
    @property
    def attr_fset(self):
        class PropertyFuncAccessor(nodes.FunctionDef):
            ...
        
        
    
    @property
    def attr_setter(self):
        ...
    
    @property
    def attr_deleter(self):
        ...
    
    @property
    def attr_getter(self):
        ...
    


