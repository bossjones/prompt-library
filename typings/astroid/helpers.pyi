"""
This type stub file was generated by pyright.
"""

from astroid import bases, nodes, util
from astroid.context import InferenceContext
from astroid.typing import InferenceResult

"""
This type stub file was generated by pyright.
"""
def safe_infer(node: nodes.NodeNG | bases.Proxy | util.UninferableBase, context: InferenceContext | None = ...) -> InferenceResult | None:
    ...

def object_type(node: InferenceResult, context: InferenceContext | None = ...) -> InferenceResult | None:
    """Obtain the type of the given node.

    This is used to implement the ``type`` builtin, which means that it's
    used for inferring type calls, as well as used in a couple of other places
    in the inference.
    The node will be inferred first, so this function can support all
    sorts of objects, as long as they support inference.
    """
    ...

def object_isinstance(node: InferenceResult, class_or_seq: list[InferenceResult], context: InferenceContext | None = ...) -> util.UninferableBase | bool:
    """Check if a node 'isinstance' any node in class_or_seq.

    :raises AstroidTypeError: if the given ``classes_or_seq`` are not types
    """
    ...

def object_issubclass(node: nodes.NodeNG, class_or_seq: list[InferenceResult], context: InferenceContext | None = ...) -> util.UninferableBase | bool:
    """Check if a type is a subclass of any node in class_or_seq.

    :raises AstroidTypeError: if the given ``classes_or_seq`` are not types
    :raises AstroidError: if the type of the given node cannot be inferred
        or its type's mro doesn't work
    """
    ...

def has_known_bases(klass, context: InferenceContext | None = ...) -> bool:
    """Return whether all base classes of a class could be inferred."""
    ...

def is_subtype(type1, type2) -> bool:
    """Check if *type1* is a subtype of *type2*."""
    ...

def is_supertype(type1, type2) -> bool:
    """Check if *type2* is a supertype of *type1*."""
    ...

def class_instance_as_index(node: bases.Instance) -> nodes.Const | None:
    """Get the value as an index for the given instance.

    If an instance provides an __index__ method, then it can
    be used in some scenarios where an integer is expected,
    for instance when multiplying or subscripting a list.
    """
    ...

def object_len(node, context: InferenceContext | None = ...):
    """Infer length of given node object.

    :param Union[nodes.ClassDef, nodes.Instance] node:
    :param node: Node to infer length of

    :raises AstroidTypeError: If an invalid node is returned
        from __len__ method or no __len__ method exists
    :raises InferenceError: If the given node cannot be inferred
        or if multiple nodes are inferred or if the code executed in python
        would result in a infinite recursive check for length
    :rtype int: Integer length of node
    """
    ...

