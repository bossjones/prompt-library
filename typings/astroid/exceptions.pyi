"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable, Iterator
from typing import Any, TYPE_CHECKING
from astroid.typing import InferenceResult, SuccessfulInferenceResult
from astroid import arguments, bases, nodes, objects
from astroid.context import InferenceContext

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
__all__ = ("AstroidBuildingError", "AstroidError", "AstroidImportError", "AstroidIndexError", "AstroidSyntaxError", "AstroidTypeError", "AstroidValueError", "AttributeInferenceError", "DuplicateBasesError", "InconsistentMroError", "InferenceError", "InferenceOverwriteError", "MroError", "NameInferenceError", "NoDefault", "NotFoundError", "ParentMissingError", "ResolveError", "StatementMissing", "SuperArgumentTypeError", "SuperError", "TooManyLevelsError", "UnresolvableName", "UseInferenceDefault")
class AstroidError(Exception):
    """Base exception class for all astroid related exceptions.

    AstroidError and its subclasses are structured, intended to hold
    objects representing state when the exception is thrown.  Field
    values are passed to the constructor as keyword-only arguments.
    Each subclass has its own set of standard fields, but use your
    best judgment to decide whether a specific exception instance
    needs more or fewer fields for debugging.  Field values may be
    used to lazily generate the error message: self.message.format()
    will be called with the field names and values supplied as keyword
    arguments.
    """
    def __init__(self, message: str = ..., **kws: Any) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class AstroidBuildingError(AstroidError):
    """Exception class when we are unable to build an astroid representation.

    Standard attributes:
        modname: Name of the module that AST construction failed for.
        error: Exception raised during construction.
    """
    def __init__(self, message: str = ..., modname: str | None = ..., error: Exception | None = ..., source: str | None = ..., path: str | None = ..., cls: type | None = ..., class_repr: str | None = ..., **kws: Any) -> None:
        ...
    


class AstroidImportError(AstroidBuildingError):
    """Exception class used when a module can't be imported by astroid."""
    ...


class TooManyLevelsError(AstroidImportError):
    """Exception class which is raised when a relative import was beyond the top-level.

    Standard attributes:
        level: The level which was attempted.
        name: the name of the module on which the relative import was attempted.
    """
    def __init__(self, message: str = ..., level: int | None = ..., name: str | None = ..., **kws: Any) -> None:
        ...
    


class AstroidSyntaxError(AstroidBuildingError):
    """Exception class used when a module can't be parsed."""
    def __init__(self, message: str, modname: str | None, error: Exception, path: str | None, source: str | None = ...) -> None:
        ...
    


class NoDefault(AstroidError):
    """Raised by function's `default_value` method when an argument has
    no default value.

    Standard attributes:
        func: Function node.
        name: Name of argument without a default.
    """
    def __init__(self, message: str = ..., func: nodes.FunctionDef | None = ..., name: str | None = ..., **kws: Any) -> None:
        ...
    


class ResolveError(AstroidError):
    """Base class of astroid resolution/inference error.

    ResolveError is not intended to be raised.

    Standard attributes:
        context: InferenceContext object.
    """
    def __init__(self, message: str = ..., context: InferenceContext | None = ..., **kws: Any) -> None:
        ...
    


class MroError(ResolveError):
    """Error raised when there is a problem with method resolution of a class.

    Standard attributes:
        mros: A sequence of sequences containing ClassDef nodes.
        cls: ClassDef node whose MRO resolution failed.
        context: InferenceContext object.
    """
    def __init__(self, message: str, mros: Iterable[Iterable[nodes.ClassDef]], cls: nodes.ClassDef, context: InferenceContext | None = ..., **kws: Any) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class DuplicateBasesError(MroError):
    """Error raised when there are duplicate bases in the same class bases."""
    ...


class InconsistentMroError(MroError):
    """Error raised when a class's MRO is inconsistent."""
    ...


class SuperError(ResolveError):
    """Error raised when there is a problem with a *super* call.

    Standard attributes:
        *super_*: The Super instance that raised the exception.
        context: InferenceContext object.
    """
    def __init__(self, message: str, super_: objects.Super, **kws: Any) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class InferenceError(ResolveError):
    """Raised when we are unable to infer a node.

    Standard attributes:
        node: The node inference was called on.
        context: InferenceContext object.
    """
    def __init__(self, message: str = ..., node: InferenceResult | None = ..., context: InferenceContext | None = ..., target: InferenceResult | None = ..., targets: InferenceResult | None = ..., attribute: str | None = ..., unknown: InferenceResult | None = ..., assign_path: list[int] | None = ..., caller: SuccessfulInferenceResult | None = ..., stmts: Iterator[InferenceResult] | None = ..., frame: InferenceResult | None = ..., call_site: arguments.CallSite | None = ..., func: InferenceResult | None = ..., arg: str | None = ..., positional_arguments: list | None = ..., unpacked_args: list | None = ..., keyword_arguments: dict | None = ..., unpacked_kwargs: dict | None = ..., **kws: Any) -> None:
        ...
    


class NameInferenceError(InferenceError):
    """Raised when a name lookup fails, corresponds to NameError.

    Standard attributes:
        name: The name for which lookup failed, as a string.
        scope: The node representing the scope in which the lookup occurred.
        context: InferenceContext object.
    """
    def __init__(self, message: str = ..., name: str | None = ..., scope: nodes.LocalsDictNodeNG | None = ..., context: InferenceContext | None = ..., **kws: Any) -> None:
        ...
    


class AttributeInferenceError(ResolveError):
    """Raised when an attribute lookup fails, corresponds to AttributeError.

    Standard attributes:
        target: The node for which lookup failed.
        attribute: The attribute for which lookup failed, as a string.
        context: InferenceContext object.
    """
    def __init__(self, message: str = ..., attribute: str = ..., target: nodes.NodeNG | bases.BaseInstance | None = ..., context: InferenceContext | None = ..., mros: list[nodes.ClassDef] | None = ..., super_: nodes.ClassDef | None = ..., cls: nodes.ClassDef | None = ..., **kws: Any) -> None:
        ...
    


class UseInferenceDefault(Exception):
    """Exception to be raised in custom inference function to indicate that it
    should go back to the default behaviour.
    """
    ...


class _NonDeducibleTypeHierarchy(Exception):
    """Raised when is_subtype / is_supertype can't deduce the relation between two
    types.
    """
    ...


class AstroidIndexError(AstroidError):
    """Raised when an Indexable / Mapping does not have an index / key."""
    def __init__(self, message: str = ..., node: nodes.NodeNG | bases.Instance | None = ..., index: nodes.Subscript | None = ..., context: InferenceContext | None = ..., **kws: Any) -> None:
        ...
    


class AstroidTypeError(AstroidError):
    """Raised when a TypeError would be expected in Python code."""
    def __init__(self, message: str = ..., node: nodes.NodeNG | bases.Instance | None = ..., index: nodes.Subscript | None = ..., context: InferenceContext | None = ..., **kws: Any) -> None:
        ...
    


class AstroidValueError(AstroidError):
    """Raised when a ValueError would be expected in Python code."""
    ...


class InferenceOverwriteError(AstroidError):
    """Raised when an inference tip is overwritten.

    Currently only used for debugging.
    """
    ...


class ParentMissingError(AstroidError):
    """Raised when a node which is expected to have a parent attribute is missing one.

    Standard attributes:
        target: The node for which the parent lookup failed.
    """
    def __init__(self, target: nodes.NodeNG) -> None:
        ...
    


class StatementMissing(ParentMissingError):
    """Raised when a call to node.statement() does not return a node.

    This is because a node in the chain does not have a parent attribute
    and therefore does not return a node for statement().

    Standard attributes:
        target: The node for which the parent lookup failed.
    """
    def __init__(self, target: nodes.NodeNG) -> None:
        ...
    


SuperArgumentTypeError = SuperError
UnresolvableName = NameInferenceError
NotFoundError = AttributeInferenceError
