"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import Optional, TYPE_CHECKING, TypeVar, Union
from astroid.typing import SuccessfulInferenceResult, TransformFn
from astroid import nodes

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    _SuccessfulInferenceResultT = TypeVar("_SuccessfulInferenceResultT", bound=SuccessfulInferenceResult)
    _Predicate = Optional[Callable[[_SuccessfulInferenceResultT], bool]]
_Vistables = Union["nodes.NodeNG", list["nodes.NodeNG"], tuple["nodes.NodeNG", ...], str, None]
_VisitReturns = Union[SuccessfulInferenceResult, list[SuccessfulInferenceResult], tuple[SuccessfulInferenceResult, ...], str, None,]
class TransformVisitor:
    """A visitor for handling transforms.

    The standard approach of using it is to call
    :meth:`~visit` with an *astroid* module and the class
    will take care of the rest, walking the tree and running the
    transforms for each encountered node.

    Based on its usage in AstroidManager.brain, it should not be reinstantiated.
    """
    def __init__(self) -> None:
        ...
    
    def register_transform(self, node_class: type[_SuccessfulInferenceResultT], transform: TransformFn[_SuccessfulInferenceResultT], predicate: _Predicate[_SuccessfulInferenceResultT] | None = ...) -> None:
        """Register `transform(node)` function to be applied on the given node.

        The transform will only be applied if `predicate` is None or returns true
        when called with the node as argument.

        The transform function may return a value which is then used to
        substitute the original node in the tree.
        """
        ...
    
    def unregister_transform(self, node_class: type[_SuccessfulInferenceResultT], transform: TransformFn[_SuccessfulInferenceResultT], predicate: _Predicate[_SuccessfulInferenceResultT] | None = ...) -> None:
        """Unregister the given transform."""
        ...
    
    def visit(self, node: nodes.NodeNG) -> SuccessfulInferenceResult:
        """Walk the given astroid *tree* and transform each encountered node.

        Only the nodes which have transforms registered will actually
        be replaced or changed.
        """
        ...
    


