"""
This type stub file was generated by pyright.
"""

import types
from collections.abc import Callable, Iterator
from typing import Any, ClassVar
from astroid import nodes
from astroid.context import InferenceContext
from astroid.interpreter._import import spec
from astroid.typing import AstroidManagerBrain, InferenceResult

"""astroid manager: avoid multiple astroid build of a same module when
possible by providing a class responsible to get astroid representation
from various source and using a cache of built modules)
"""
ZIP_IMPORT_EXTS = ...
def safe_repr(obj: Any) -> str:
    ...

class AstroidManager:
    """Responsible to build astroid from files or modules.

    Use the Borg (singleton) pattern.
    """
    name = ...
    brain: ClassVar[AstroidManagerBrain] = ...
    def __init__(self) -> None:
        ...

    @property
    def always_load_extensions(self) -> bool:
        ...

    @always_load_extensions.setter
    def always_load_extensions(self, value: bool) -> None:
        ...

    @property
    def optimize_ast(self) -> bool:
        ...

    @optimize_ast.setter
    def optimize_ast(self, value: bool) -> None:
        ...

    @property
    def max_inferable_values(self) -> int:
        ...

    @max_inferable_values.setter
    def max_inferable_values(self, value: int) -> None:
        ...

    @property
    def register_transform(self): # -> Callable[..., None]:
        ...

    @property
    def unregister_transform(self): # -> Callable[..., None]:
        ...

    @property
    def builtins_module(self) -> nodes.Module:
        ...

    @property
    def prefer_stubs(self) -> bool:
        ...

    @prefer_stubs.setter
    def prefer_stubs(self, value: bool) -> None:
        ...

    def visit_transforms(self, node: nodes.NodeNG) -> InferenceResult:
        """Visit the transforms and apply them to the given *node*."""
        ...

    def ast_from_file(self, filepath: str, modname: str | None = ..., fallback: bool = ..., source: bool = ...) -> nodes.Module:
        """Given a module name, return the astroid object."""
        ...

    def ast_from_string(self, data: str, modname: str = ..., filepath: str | None = ...) -> nodes.Module:
        """Given some source code as a string, return its corresponding astroid
        object.
        """
        ...

    def ast_from_module_name(self, modname: str | None, context_file: str | None = ..., use_cache: bool = ...) -> nodes.Module:
        """Given a module name, return the astroid object."""
        ...

    def zip_import_data(self, filepath: str) -> nodes.Module | None:
        ...

    def file_from_module_name(self, modname: str, contextfile: str | None) -> spec.ModuleSpec:
        ...

    def ast_from_module(self, module: types.ModuleType, modname: str | None = ...) -> nodes.Module:
        """Given an imported module, return the astroid object."""
        ...

    def ast_from_class(self, klass: type, modname: str | None = ...) -> nodes.ClassDef:
        """Get astroid for the given class."""
        ...

    def infer_ast_from_something(self, obj: object, context: InferenceContext | None = ...) -> Iterator[InferenceResult]:
        """Infer astroid for the given class."""
        ...

    def register_failed_import_hook(self, hook: Callable[[str], nodes.Module]) -> None:
        """Registers a hook to resolve imports that cannot be found otherwise.

        `hook` must be a function that accepts a single argument `modname` which
        contains the name of the module or package that could not be imported.
        If `hook` can resolve the import, must return a node of type `astroid.Module`,
        otherwise, it must raise `AstroidBuildingError`.
        """
        ...

    def cache_module(self, module: nodes.Module) -> None:
        """Cache a module if no module with the same name is known yet."""
        ...

    def bootstrap(self) -> None:
        """Bootstrap the required AST modules needed for the manager to work.

        The bootstrap usually involves building the AST for the builtins
        module, which is required by the rest of astroid to work correctly.
        """
        ...

    def clear_cache(self) -> None:
        """Clear the underlying caches, bootstrap the builtins module and
        re-register transforms.
        """
        ...
