"""
This type stub file was generated by pyright.
"""

import sys
from abc import ABC, abstractmethod
from typing import Self, TYPE_CHECKING, Union
from astroid import nodes
from astroid.typing import InferenceResult

"""
This type stub file was generated by pyright.
"""
if sys.version_info >= (3, 11):
    ...
else:
    ...
if TYPE_CHECKING:
    ...
_NameNodes = Union[nodes.AssignAttr, nodes.Attribute, nodes.AssignName, nodes.Name]
class Constraint(ABC):
    """Represents a single constraint on a variable."""
    def __init__(self, node: nodes.NodeNG, negate: bool) -> None:
        ...
    
    @classmethod
    @abstractmethod
    def match(cls, node: _NameNodes, expr: nodes.NodeNG, negate: bool = ...) -> Self | None:
        """Return a new constraint for node matched from expr, if expr matches
        the constraint pattern.

        If negate is True, negate the constraint.
        """
        ...
    
    @abstractmethod
    def satisfied_by(self, inferred: InferenceResult) -> bool:
        """Return True if this constraint is satisfied by the given inferred value."""
        ...
    


class NoneConstraint(Constraint):
    """Represents an "is None" or "is not None" constraint."""
    CONST_NONE: nodes.Const = ...
    @classmethod
    def match(cls, node: _NameNodes, expr: nodes.NodeNG, negate: bool = ...) -> Self | None:
        """Return a new constraint for node matched from expr, if expr matches
        the constraint pattern.

        Negate the constraint based on the value of negate.
        """
        ...
    
    def satisfied_by(self, inferred: InferenceResult) -> bool:
        """Return True if this constraint is satisfied by the given inferred value."""
        ...
    


def get_constraints(expr: _NameNodes, frame: nodes.LocalsDictNodeNG) -> dict[nodes.If, set[Constraint]]:
    """Returns the constraints for the given expression.

    The returned dictionary maps the node where the constraint was generated to the
    corresponding constraint(s).

    Constraints are computed statically by analysing the code surrounding expr.
    Currently this only supports constraints generated from if conditions.
    """
    ...

ALL_CONSTRAINT_CLASSES = ...
