"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterator
from typing import Final
from astroid import bases, nodes
from astroid.context import InferenceContext
from astroid.manager import AstroidManager

"""Astroid hooks for the Python standard library."""
ENUM_QNAME: Final[str] = ...
TYPING_NAMEDTUPLE_QUALIFIED: Final = ...
TYPING_NAMEDTUPLE_BASENAMES: Final = ...
def infer_func_form(node: nodes.Call, base_type: list[nodes.NodeNG], context: InferenceContext | None = ..., enum: bool = ...) -> tuple[nodes.ClassDef, str, list[str]]:
    """Specific inference function for namedtuple or Python 3 enum."""
    ...

_looks_like_namedtuple = ...
_looks_like_enum = ...
_looks_like_typing_namedtuple = ...
def infer_named_tuple(node: nodes.Call, context: InferenceContext | None = ...) -> Iterator[nodes.ClassDef]:
    """Specific inference function for namedtuple Call node."""
    ...

def infer_enum(node: nodes.Call, context: InferenceContext | None = ...) -> Iterator[bases.Instance]:
    """Specific inference function for enum Call node."""
    ...

INT_FLAG_ADDITION_METHODS = ...
def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
    """Specific inference for enums."""
    ...

def infer_typing_namedtuple_class(class_node, context: InferenceContext | None = ...): # -> Iterator[ClassDef]:
    """Infer a subclass of typing.NamedTuple."""
    ...

def infer_typing_namedtuple_function(node, context: InferenceContext | None = ...): # -> Generator[InferenceResult, None, None]:
    """
    Starting with python3.9, NamedTuple is a function of the typing module.
    The class NamedTuple is build dynamically through a call to `type` during
    initialization of the `_NamedTuple` variable.
    """
    ...

def infer_typing_namedtuple(node: nodes.Call, context: InferenceContext | None = ...) -> Iterator[nodes.ClassDef]:
    """Infer a typing.NamedTuple(...) call."""
    ...

def register(manager: AstroidManager) -> None:
    ...
