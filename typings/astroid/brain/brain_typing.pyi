"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterator
from typing import Final
from astroid import context
from astroid.manager import AstroidManager
from astroid.nodes.node_classes import Call, NodeNG, Subscript
from astroid.nodes.scoped_nodes import ClassDef, FunctionDef

"""Astroid hooks for typing.py support."""
TYPING_TYPEVARS = ...
TYPING_TYPEVARS_QUALIFIED: Final = ...
TYPING_TYPEDDICT_QUALIFIED: Final = ...
TYPING_TYPE_TEMPLATE = ...
TYPING_MEMBERS = ...
TYPING_ALIAS = ...
CLASS_GETITEM_TEMPLATE = ...
def looks_like_typing_typevar_or_newtype(node) -> bool:
    ...

def infer_typing_typevar_or_newtype(node: Call, context_itton: context.InferenceContext | None = ...) -> Iterator[ClassDef]:
    """Infer a typing.TypeVar(...) or typing.NewType(...) call."""
    ...

def infer_typing_attr(node: Subscript, ctx: context.InferenceContext | None = ...) -> Iterator[ClassDef]:
    """Infer a typing.X[...] subscript."""
    ...

def infer_typing_generic_class_pep695(node: ClassDef, ctx: context.InferenceContext | None = ...) -> Iterator[ClassDef]:
    """Add __class_getitem__ for generic classes. Python 3.12+."""
    ...

def infer_typedDict(node: FunctionDef, ctx: context.InferenceContext | None = ...) -> Iterator[ClassDef]:
    """Replace TypedDict FunctionDef with ClassDef."""
    ...

def infer_typing_alias(node: Call, ctx: context.InferenceContext | None = ...) -> Iterator[ClassDef]:
    """
    Infers the call to _alias function
    Insert ClassDef, with same name as aliased class,
    in mro to simulate _GenericAlias.

    :param node: call node
    :param context: inference context

    # TODO: evaluate if still necessary when Py3.12 is minimum
    """
    ...

def infer_special_alias(node: Call, ctx: context.InferenceContext | None = ...) -> Iterator[ClassDef]:
    """Infer call to tuple alias as new subscriptable class typing.Tuple."""
    ...

def infer_typing_cast(node: Call, ctx: context.InferenceContext | None = ...) -> Iterator[NodeNG]:
    """Infer call to cast() returning same type as casted-from var."""
    ...

def register(manager: AstroidManager) -> None:
    ...
