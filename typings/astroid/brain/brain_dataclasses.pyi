"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterator
from typing import Literal, Union
from astroid import context, nodes
from astroid.manager import AstroidManager
from astroid.typing import InferenceResult

"""
Astroid hook for the dataclasses library.

Support built-in dataclasses, pydantic.dataclasses, and marshmallow_dataclass-annotated
dataclasses. References:
- https://docs.python.org/3/library/dataclasses.html
- https://pydantic-docs.helpmanual.io/usage/dataclasses/
- https://lovasoa.github.io/marshmallow_dataclass/
"""
_FieldDefaultReturn = Union[None, tuple[Literal["default"], nodes.NodeNG], tuple[Literal["default_factory"], nodes.Call],]
DATACLASSES_DECORATORS = ...
FIELD_NAME = ...
DATACLASS_MODULES = ...
DEFAULT_FACTORY = ...
def is_decorated_with_dataclass(node: nodes.ClassDef, decorator_names: frozenset[str] = ...) -> bool:
    """Return True if a decorated node has a `dataclass` decorator applied."""
    ...

def dataclass_transform(node: nodes.ClassDef) -> None:
    """Rewrite a dataclass to be easily understood by pylint."""
    ...

def infer_dataclass_attribute(node: nodes.Unknown, ctx: context.InferenceContext | None = ...) -> Iterator[InferenceResult]:
    """Inference tip for an Unknown node that was dynamically generated to
    represent a dataclass attribute.

    In the case that a default value is provided, that is inferred first.
    Then, an Instance of the annotated class is yielded.
    """
    ...

def infer_dataclass_field_call(node: nodes.Call, ctx: context.InferenceContext | None = ...) -> Iterator[InferenceResult]:
    """Inference tip for dataclass field calls."""
    ...

_INFERABLE_TYPING_TYPES = ...
def register(manager: AstroidManager) -> None:
    ...
