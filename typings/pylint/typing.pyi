"""
This type stub file was generated by pyright.
"""

import argparse
from collections.abc import Iterable
from pathlib import Path
from re import Pattern
from typing import Any, Callable, Literal, NamedTuple, Optional, Protocol, TYPE_CHECKING, TypedDict, Union
from pylint.config.callback_actions import _CallbackAction
from pylint.pyreverse.inspector import Project
from pylint.reporters.ureports.nodes import Section
from pylint.utils import LinterStats

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
class FileItem(NamedTuple):
    """Represents data about a file handled by pylint.

    Each file item has:
    - name: full name of the module
    - filepath: path of the file
    - modname: module name
    """
    name: str
    filepath: str
    modpath: str
    ...


class ModuleDescriptionDict(TypedDict):
    """Represents data about a checked module."""
    path: str
    name: str
    isarg: bool
    basepath: str
    basename: str
    ...


class ErrorDescriptionDict(TypedDict):
    """Represents data about errors collected during checking of a module."""
    key: Literal["fatal"]
    mod: str
    ex: ImportError | SyntaxError
    ...


class MessageLocationTuple(NamedTuple):
    """Tuple with information about the location of a to-be-displayed message."""
    abspath: str
    path: str
    module: str
    obj: str
    line: int
    column: int
    end_line: int | None = ...
    end_column: int | None = ...


class ManagedMessage(NamedTuple):
    """Tuple with information about a managed message of the linter."""
    name: str | None
    msgid: str
    symbol: str
    line: int | None
    is_disabled: bool
    ...


MessageTypesFullName = Literal["convention", "error", "fatal", "info", "refactor", "statement", "warning"]
OptionDict = dict[str, Union[None, str, bool, int, Pattern[str], Iterable[Union[str, int, Pattern[str]]], type["_CallbackAction"], Callable[[Any], Any], Callable[[Any, Any, Any, Any], Any],],]
Options = tuple[tuple[str, OptionDict], ...]
ReportsCallable = Callable[["Section", "LinterStats", Optional["LinterStats"]], None]
class ExtraMessageOptions(TypedDict, total=False):
    """All allowed keys in the extra options for message definitions."""
    scope: str
    old_names: list[tuple[str, str]]
    maxversion: tuple[int, int]
    minversion: tuple[int, int]
    shared: bool
    default_enabled: bool
    ...


MessageDefinitionTuple = Union[tuple[str, str, str], tuple[str, str, str, ExtraMessageOptions],]
DirectoryNamespaceDict = dict[Path, tuple[argparse.Namespace, "DirectoryNamespaceDict"]]
class GetProjectCallable(Protocol):
    def __call__(self, module: str, name: str | None = ...) -> Project:
        ...
    


