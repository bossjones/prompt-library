"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterator
from typing import TYPE_CHECKING, TextIO
from pylint.reporters.ureports.nodes import BaseLayout, EvaluationSection, Paragraph, Section, Table

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
class BaseWriter:
    """Base class for ureport writers."""
    def format(self, layout: BaseLayout, stream: TextIO = ..., encoding: str | None = ...) -> None:
        """Format and write the given layout into the stream object.

        unicode policy: unicode strings may be found in the layout;
        try to call 'stream.write' with it, but give it back encoded using
        the given encoding if it fails
        """
        ...

    def format_children(self, layout: EvaluationSection | Paragraph | Section) -> None:
        """Recurse on the layout children and call their accept method
        (see the Visitor pattern).
        """
        ...

    def writeln(self, string: str = ...) -> None:
        """Write a line in the output buffer."""
        ...

    def write(self, string: str) -> None:
        """Write a string in the output buffer."""
        ...

    def begin_format(self) -> None:
        """Begin to format a layout."""
        ...

    def end_format(self) -> None:
        """Finished formatting a layout."""
        ...

    def get_table_content(self, table: Table) -> list[list[str]]:
        """Trick to get table content without actually writing it.

        return an aligned list of lists containing table cells values as string
        """
        ...

    def compute_content(self, layout: BaseLayout) -> Iterator[str]:
        """Trick to compute the formatting of children layout before actually
        writing it.

        return an iterator on strings (one for each child element)
        """
        ...
