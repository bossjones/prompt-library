"""
This type stub file was generated by pyright.
"""

from typing import Optional, TYPE_CHECKING, TypedDict
from pylint.message import Message
from pylint.reporters.base_reporter import BaseReporter
from pylint.lint.pylinter import PyLinter
from pylint.reporters.ureports.nodes import Section

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
OldJsonExport = TypedDict("OldJsonExport", { "type": str,"module": str,"obj": str,"line": int,"column": int,"endLine": Optional[int],"endColumn": Optional[int],"path": str,"symbol": str,"message": str,"message-id": str })
class JSONReporter(BaseReporter):
    """Report messages and layouts in JSON.

    Consider using JSON2Reporter instead, as it is superior and this reporter
    is no longer maintained.
    """
    name = ...
    extension = ...
    def display_messages(self, layout: Section | None) -> None:
        """Launch layouts display."""
        ...
    
    def display_reports(self, layout: Section) -> None:
        """Don't do anything in this reporter."""
        ...
    
    @staticmethod
    def serialize(message: Message) -> OldJsonExport:
        ...
    
    @staticmethod
    def deserialize(message_as_json: OldJsonExport) -> Message:
        ...
    


class JSONMessage(TypedDict):
    type: str
    message: str
    messageId: str
    symbol: str
    confidence: str
    module: str
    path: str
    absolutePath: str
    line: int
    endLine: int | None
    column: int
    endColumn: int | None
    obj: str
    ...


class JSON2Reporter(BaseReporter):
    name = ...
    extension = ...
    def display_reports(self, layout: Section) -> None:
        """Don't do anything in this reporter."""
        ...
    
    def display_messages(self, layout: Section | None) -> None:
        """Launch layouts display."""
        ...
    
    @staticmethod
    def serialize(message: Message) -> JSONMessage:
        ...
    
    @staticmethod
    def deserialize(message_as_json: JSONMessage) -> Message:
        ...
    
    def serialize_stats(self) -> dict[str, str | int | dict[str, int]]:
        """Serialize the linter stats into something JSON dumpable."""
        ...
    


def register(linter: PyLinter) -> None:
    ...

