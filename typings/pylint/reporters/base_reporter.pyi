"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, TextIO
from pylint.message import Message
from pylint.reporters.ureports.nodes import Section
from pylint.utils import LinterStats

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
class BaseReporter:
    """Base class for reporters.

    symbols: show short symbolic names for messages.
    """
    extension = ...
    name = ...
    def __init__(self, output: TextIO | None = ...) -> None:
        ...

    def handle_message(self, msg: Message) -> None:
        """Handle a new message triggered on the current file."""
        ...

    def writeln(self, string: str = ...) -> None:
        """Write a line in the output buffer."""
        ...

    def display_reports(self, layout: Section) -> None:
        """Display results encapsulated in the layout tree."""
        ...

    def display_messages(self, layout: Section | None) -> None:
        """Hook for displaying the messages of the reporter.

        This will be called whenever the underlying messages
        needs to be displayed. For some reporters, it probably
        doesn't make sense to display messages as soon as they
        are available, so some mechanism of storing them could be used.
        This method can be implemented to display them after they've
        been aggregated.
        """
        ...

    def on_set_current_module(self, module: str, filepath: str | None) -> None:
        """Hook called when a module starts to be analysed."""
        ...

    def on_close(self, stats: LinterStats, previous_stats: LinterStats | None) -> None:
        """Hook called when a module finished analyzing."""
        ...
