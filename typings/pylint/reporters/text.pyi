"""
This type stub file was generated by pyright.
"""

from typing import NamedTuple, TYPE_CHECKING, TextIO
from pylint.message import Message
from pylint.reporters import BaseReporter
from pylint.lint import PyLinter

"""Plain text reporters:.

:text: the default one grouping messages by module
:colorized: an ANSI colorized text reporter
"""
if TYPE_CHECKING:
    ...
class MessageStyle(NamedTuple):
    """Styling of a message."""
    color: str | None
    style: tuple[str, ...] = ...


ColorMappingDict = dict[str, MessageStyle]
TITLE_UNDERLINES = ...
ANSI_PREFIX = ...
ANSI_END = ...
ANSI_RESET = ...
ANSI_STYLES = ...
ANSI_COLORS = ...
MESSAGE_FIELDS = ...
def colorize_ansi(msg: str, msg_style: MessageStyle) -> str:
    """Colorize message by wrapping it with ANSI escape codes."""
    ...

def make_header(msg: Message) -> str:
    ...

class TextReporter(BaseReporter):
    """Reports messages and layouts in plain text."""
    name = ...
    extension = ...
    line_format = ...
    def __init__(self, output: TextIO | None = ...) -> None:
        ...

    def on_set_current_module(self, module: str, filepath: str | None) -> None:
        """Set the format template to be used and check for unrecognized arguments."""
        ...

    def write_message(self, msg: Message) -> None:
        """Convenience method to write a formatted message with class default
        template.
        """
        ...

    def handle_message(self, msg: Message) -> None:
        """Manage message of different type and in the context of path."""
        ...



class NoHeaderReporter(TextReporter):
    """Reports messages and layouts in plain text without a module header."""
    name = ...
    def handle_message(self, msg: Message) -> None:
        """Write message(s) without module header."""
        ...



class ParseableTextReporter(TextReporter):
    """A reporter very similar to TextReporter, but display messages in a form
    recognized by most text editors :

    <filename>:<linenum>:<msg>
    """
    name = ...
    line_format = ...
    def __init__(self, output: TextIO | None = ...) -> None:
        ...



class VSTextReporter(ParseableTextReporter):
    """Visual studio text reporter."""
    name = ...
    line_format = ...


class ColorizedTextReporter(TextReporter):
    """Simple TextReporter that colorizes text output."""
    name = ...
    COLOR_MAPPING: ColorMappingDict = ...
    def __init__(self, output: TextIO | None = ..., color_mapping: ColorMappingDict | None = ...) -> None:
        ...

    def handle_message(self, msg: Message) -> None:
        """Manage message of different types, and colorize output
        using ANSI escape codes.
        """
        ...



class GithubReporter(TextReporter):
    """Report messages in GitHub's special format to annotate code in its user
    interface.
    """
    name = ...
    line_format = ...
    category_map = ...
    def write_message(self, msg: Message) -> None:
        ...



def register(linter: PyLinter) -> None:
    ...
