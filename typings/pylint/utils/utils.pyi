"""
This type stub file was generated by pyright.
"""

import argparse
import codecs
import tokenize
from io import BufferedReader, BytesIO
from re import Pattern
from typing import Any, Literal, TYPE_CHECKING, TextIO, TypeVar, Union
from astroid import Module, nodes
from pylint.typing import OptionDict
from pylint.lint import PyLinter

"""
This type stub file was generated by pyright.
"""
HAS_ISORT_5 = ...
if TYPE_CHECKING:
    ...
DEFAULT_LINE_LENGTH = ...
GLOBAL_OPTION_BOOL = Literal["suggestion-mode", "analyse-fallback-blocks", "allow-global-unused-variables", "prefer-stubs",]
GLOBAL_OPTION_INT = Literal["max-line-length", "docstring-min-length"]
GLOBAL_OPTION_LIST = Literal["ignored-modules"]
GLOBAL_OPTION_PATTERN = Literal["no-docstring-rgx", "dummy-variables-rgx", "ignored-argument-names", "mixin-class-rgx",]
GLOBAL_OPTION_PATTERN_LIST = Literal["exclude-too-few-public-methods", "ignore-paths"]
GLOBAL_OPTION_TUPLE_INT = Literal["py-version"]
GLOBAL_OPTION_NAMES = Union[GLOBAL_OPTION_BOOL, GLOBAL_OPTION_INT, GLOBAL_OPTION_LIST, GLOBAL_OPTION_PATTERN, GLOBAL_OPTION_PATTERN_LIST, GLOBAL_OPTION_TUPLE_INT,]
T_GlobalOptionReturnTypes = TypeVar("T_GlobalOptionReturnTypes", bool, int, list[str], Pattern[str], list[Pattern[str]], tuple[int, ...])
def normalize_text(text: str, line_len: int = ..., indent: str = ...) -> str:
    """Wrap the text on the given line length."""
    ...

CMPS = ...
def cmp(a: float, b: float) -> int:
    ...

def diff_string(old: float, new: float) -> str:
    """Given an old and new value, return a string representing the difference."""
    ...

def get_module_and_frameid(node: nodes.NodeNG) -> tuple[str, str]:
    """Return the module name and the frame id in the module."""
    ...

def get_rst_title(title: str, character: str) -> str:
    """Permit to get a title formatted as ReStructuredText test (underlined with a
    chosen character).
    """
    ...

def get_rst_section(section: str | None, options: list[tuple[str, OptionDict, Any]], doc: str | None = ...) -> str:
    """Format an option's section using as a ReStructuredText formatted output."""
    ...

def decoding_stream(stream: BufferedReader | BytesIO, encoding: str, errors: Literal["strict"] = ...) -> codecs.StreamReader:
    ...

def tokenize_module(node: nodes.Module) -> list[tokenize.TokenInfo]:
    ...

def register_plugins(linter: PyLinter, directory: str) -> None:
    """Load all module and package in the given directory, looking for a
    'register' function in each one, used to register pylint checkers.
    """
    ...

def format_section(stream: TextIO, section: str, options: list[tuple[str, OptionDict, Any]], doc: str | None = ...) -> None:
    """Format an option's section using the INI format."""
    ...

class IsortDriver:
    """A wrapper around isort API that changed between versions 4 and 5."""
    def __init__(self, config: argparse.Namespace) -> None:
        ...
    
    def place_module(self, package: str) -> str:
        ...
    


