"""
This type stub file was generated by pyright.
"""

import argparse
from collections.abc import Generator
from typing import Any
from astroid import nodes
from pylint.pyreverse.diagrams import ClassDiagram
from pylint.pyreverse.inspector import Linker, Project
from pylint.pyreverse.utils import LocalsVisitor

"""Handle diagram generation options for class diagram or default diagrams."""
class DiaDefGenerator:
    """Handle diagram generation options."""
    def __init__(self, linker: Linker, handler: DiadefsHandler) -> None:
        """Common Diagram Handler initialization."""
        ...

    def get_title(self, node: nodes.ClassDef) -> str:
        """Get title for objects."""
        ...

    def show_node(self, node: nodes.ClassDef) -> bool:
        """Determine if node should be shown based on config."""
        ...

    def add_class(self, node: nodes.ClassDef) -> None:
        """Visit one class and add it to diagram."""
        ...

    def get_ancestors(self, node: nodes.ClassDef, level: int) -> Generator[nodes.ClassDef]:
        """Return ancestor nodes of a class node."""
        ...

    def get_associated(self, klass_node: nodes.ClassDef, level: int) -> Generator[nodes.ClassDef]:
        """Return associated nodes of a class node."""
        ...

    def extract_classes(self, klass_node: nodes.ClassDef, anc_level: int, association_level: int) -> None:
        """Extract recursively classes related to klass_node."""
        ...



class DefaultDiadefGenerator(LocalsVisitor, DiaDefGenerator):
    """Generate minimum diagram definition for the project :

    * a package diagram including project's modules
    * a class diagram including project's classes
    """
    def __init__(self, linker: Linker, handler: DiadefsHandler) -> None:
        ...

    def visit_project(self, node: Project) -> None:
        """Visit a pyreverse.utils.Project node.

        create a diagram definition for packages
        """
        ...

    def leave_project(self, _: Project) -> Any:
        """Leave the pyreverse.utils.Project node.

        return the generated diagram definition
        """
        ...

    def visit_module(self, node: nodes.Module) -> None:
        """Visit an astroid.Module node.

        add this class to the package diagram definition
        """
        ...

    def visit_classdef(self, node: nodes.ClassDef) -> None:
        """Visit an astroid.Class node.

        add this class to the class diagram definition
        """
        ...

    def visit_importfrom(self, node: nodes.ImportFrom) -> None:
        """Visit astroid.ImportFrom  and catch modules for package diagram."""
        ...



class ClassDiadefGenerator(DiaDefGenerator):
    """Generate a class diagram definition including all classes related to a
    given class.
    """
    def class_diagram(self, project: Project, klass: nodes.ClassDef) -> ClassDiagram:
        """Return a class diagram definition for the class and related classes."""
        ...



class DiadefsHandler:
    """Get diagram definitions from user (i.e. xml files) or generate them."""
    def __init__(self, config: argparse.Namespace) -> None:
        ...

    def get_diadefs(self, project: Project, linker: Linker) -> list[ClassDiagram]:
        """Get the diagram's configuration data.

        :param project:The pyreverse project
        :type project: pyreverse.utils.Project
        :param linker: The linker
        :type linker: pyreverse.inspector.Linker(IdGeneratorMixIn, LocalsVisitor)

        :returns: The list of diagram definitions
        :rtype: list(:class:`pylint.pyreverse.diagrams.ClassDiagram`)
        """
        ...
