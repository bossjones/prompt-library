"""
This type stub file was generated by pyright.
"""

from collections.abc import Sequence
from typing import Any

"""
This type stub file was generated by pyright.
"""
def target_info_from_filename(filename: str) -> tuple[str, str, str]:
    """Transforms /some/path/foo.png into ('/some/path', 'foo.png', 'png')."""
    ...

class DotBackend:
    """Dot File back-end."""
    def __init__(self, graphname: str, rankdir: str | None = ..., size: Any = ..., ratio: Any = ..., charset: str = ..., renderer: str = ..., additional_param: dict[str, Any] | None = ...) -> None:
        ...
    
    def get_source(self) -> str:
        """Returns self._source."""
        ...
    
    source = ...
    def generate(self, outputfile: str | None = ..., mapfile: str | None = ...) -> str:
        """Generates a graph file.

        :param str outputfile: filename and path [defaults to graphname.png]
        :param str mapfile: filename and path

        :rtype: str
        :return: a path to the generated file
        :raises RuntimeError: if the executable for rendering was not found
        """
        ...
    
    def emit(self, line: str) -> None:
        """Adds <line> to final output."""
        ...
    
    def emit_edge(self, name1: str, name2: str, **props: Any) -> None:
        """Emit an edge from <name1> to <name2>.

        For edge properties: see https://www.graphviz.org/doc/info/attrs.html
        """
        ...
    
    def emit_node(self, name: str, **props: Any) -> None:
        """Emit a node with given properties.

        For node properties: see https://www.graphviz.org/doc/info/attrs.html
        """
        ...
    


def normalize_node_id(nid: str) -> str:
    """Returns a suitable DOT node id for `nid`."""
    ...

def get_cycles(graph_dict: dict[str, set[str]], vertices: list[str] | None = ...) -> Sequence[list[str]]:
    """Return a list of detected cycles based on an ordered graph (i.e. keys are
    vertices and values are lists of destination vertices representing edges).
    """
    ...

