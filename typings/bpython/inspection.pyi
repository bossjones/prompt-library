"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Callable, ContextManager, Dict, List, Optional, Type
from types import TracebackType
from ._typing_compat import Literal

class _Repr:
    """
    Helper for `ArgSpec`: Returns the given value in `__repr__()`.
    """
    __slots__ = ...
    def __init__(self, value: str) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    __str__ = ...


@dataclass
class ArgSpec:
    args: List[str]
    varargs: Optional[str]
    varkwargs: Optional[str]
    defaults: Optional[List[_Repr]]
    kwonly: List[str]
    kwonly_defaults: Optional[Dict[str, _Repr]]
    annotations: Optional[Dict[str, Any]]
    ...


@dataclass
class FuncProps:
    func: str
    argspec: ArgSpec
    is_bound_method: bool
    ...


class AttrCleaner(ContextManager[None]):
    """A context manager that tries to make an object not exhibit side-effects
    on attribute lookup.

    Unless explicitly required, prefer `getattr_safe`."""
    def __init__(self, obj: Any) -> None:
        ...
    
    def __enter__(self) -> None:
        """Try to make an object not exhibit side-effects on attribute
        lookup."""
        ...
    
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> Literal[False]:
        """Restore an object's magic methods."""
        ...
    


def parsekeywordpairs(signature: str) -> Dict[str, str]:
    ...

_getpydocspec_re = ...
def getfuncprops(func: str, f: Callable) -> Optional[FuncProps]:
    ...

def is_eval_safe_name(string: str) -> bool:
    ...

_get_encoding_line_re = ...
def get_encoding(obj) -> str:
    """Try to obtain encoding information of the source of an object."""
    ...

def get_encoding_file(fname: str) -> str:
    """Try to obtain encoding information from a Python source file."""
    ...

def getattr_safe(obj: Any, name: str) -> Any:
    """Side effect free getattr (calls getattr_static)."""
    ...

def hasattr_safe(obj: Any, name: str) -> bool:
    ...

