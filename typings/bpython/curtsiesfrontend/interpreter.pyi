"""
This type stub file was generated by pyright.
"""

from codeop import CommandCompiler
from typing import Any, Dict, Iterable, Optional, Tuple, Union
from pygments.token import _TokenType
from pygments.formatter import Formatter
from ..repl import Interpreter as ReplInterpreter

default_colors = ...
class BPythonFormatter(Formatter):
    """This is subclassed from the custom formatter for bpython.  Its format()
    method receives the tokensource and outfile params passed to it from the
    Pygments highlight() method and slops them into the appropriate format
    string as defined above, then writes to the outfile object the final
    formatted string. This does not write real strings. It writes format string
    (FmtStr) objects.

    See the Pygments source for more info; it's pretty
    straightforward."""
    def __init__(self, color_scheme: Dict[_TokenType, str], **options: Union[str, bool, None]) -> None:
        ...
    
    def format(self, tokensource, outfile): # -> None:
        ...
    


class Interp(ReplInterpreter):
    def __init__(self, locals: Optional[Dict[str, Any]] = ...) -> None:
        """Constructor.

        We include an argument for the outfile to pass to the formatter for it
        to write to.
        """
        ...
    
    def writetb(self, lines: Iterable[str]) -> None:
        ...
    
    def format(self, tbtext: str, lexer: Any) -> None:
        ...
    


def code_finished_will_parse(s: str, compiler: CommandCompiler) -> Tuple[bool, bool]:
    """Returns a tuple of whether the buffer could be complete and whether it
    will parse

    True, True means code block is finished and no predicted parse error
    True, False means code block is finished because a parse error is predicted
    False, True means code block is unfinished
    False, False isn't possible - an predicted error makes code block done"""
    ...

