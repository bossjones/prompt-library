"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional, Tuple

"""Extracting and changing portions of the current line

All functions take cursor offset from the beginning of the line and the line of
Python code, and return None, or a tuple of the start index, end index, and the
word."""
@dataclass
class LinePart:
    start: int
    stop: int
    word: str
    ...


_current_word_re = ...
CHARACTER_PAIR_MAP = ...
def current_word(cursor_offset: int, line: str) -> Optional[LinePart]:
    """the object.attribute.attribute just before or under the cursor"""
    ...

_match_all_dict_keys = ...
_match_single_quote_str_bytes = ...
_match_double_quote_str_bytes = ...
_match_dict_before_key = ...
_current_dict_key_re = ...
def current_dict_key(cursor_offset: int, line: str) -> Optional[LinePart]:
    """If in dictionary completion, return the current key"""
    ...

_capture_dict_name = ...
_current_dict_re = ...
def current_dict(cursor_offset: int, line: str) -> Optional[LinePart]:
    """If in dictionary completion, return the dict that should be used"""
    ...

_current_string_re = ...
def current_string(cursor_offset: int, line: str) -> Optional[LinePart]:
    """If inside a string of nonzero length, return the string (excluding
    quotes)

    Weaker than bpython.Repl's current_string, because that checks that a
    string is a string based on previous lines in the buffer."""
    ...

_current_object_re = ...
def current_object(cursor_offset: int, line: str) -> Optional[LinePart]:
    """If in attribute completion, the object on which attribute should be
    looked up."""
    ...

_current_object_attribute_re = ...
def current_object_attribute(cursor_offset: int, line: str) -> Optional[LinePart]:
    """If in attribute completion, the attribute being completed"""
    ...

_current_from_import_from_re = ...
def current_from_import_from(cursor_offset: int, line: str) -> Optional[LinePart]:
    """If in from import completion, the word after from

    returns None if cursor not in or just after one of the two interesting
    parts of an import: from (module) import (name1, name2)
    """
    ...

_current_from_import_import_re_1 = ...
_current_from_import_import_re_2 = ...
_current_from_import_import_re_3 = ...
def current_from_import_import(cursor_offset: int, line: str) -> Optional[LinePart]:
    """If in from import completion, the word after import being completed

    returns None if cursor not in or just after one of these words
    """
    ...

_current_import_re_1 = ...
_current_import_re_2 = ...
_current_import_re_3 = ...
def current_import(cursor_offset: int, line: str) -> Optional[LinePart]:
    ...

_current_method_definition_name_re = ...
def current_method_definition_name(cursor_offset: int, line: str) -> Optional[LinePart]:
    """The name of a method being defined"""
    ...

_current_single_word_re = ...
def current_single_word(cursor_offset: int, line: str) -> Optional[LinePart]:
    """the un-dotted word just before or under the cursor"""
    ...

def current_dotted_attribute(cursor_offset: int, line: str) -> Optional[LinePart]:
    """The dotted attribute-object pair before the cursor"""
    ...

_current_expression_attribute_re = ...
def current_expression_attribute(cursor_offset: int, line: str) -> Optional[LinePart]:
    """If after a dot, the attribute being completed"""
    ...

def cursor_on_closing_char_pair(cursor_offset: int, line: str, ch: Optional[str] = ...) -> Tuple[bool, bool]:
    """Checks if cursor sits on closing character of a pair
    and whether its pair character is directly behind it
    """
    ...

