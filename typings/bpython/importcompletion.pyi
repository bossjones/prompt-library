"""
This type stub file was generated by pyright.
"""

import sys
from dataclasses import dataclass
from pathlib import Path
from typing import Generator, Iterable, Optional, Sequence, Set, Union

SUFFIXES = ...
LOADERS = ...
_LOADED_INODE_DATACLASS_ARGS = ...
if sys.version_info[: 2] >= (3, 10):
    ...
@dataclass(**_LOADED_INODE_DATACLASS_ARGS)
class _LoadedInode:
    dev: int
    inode: int
    ...


class ModuleGatherer:
    def __init__(self, paths: Optional[Iterable[Union[str, Path]]] = ..., skiplist: Optional[Sequence[str]] = ...) -> None:
        """Initialize module gatherer with all modules in `paths`, which should be a list of
        directory names. If `paths` is not given, `sys.path` will be used."""
        ...
    
    def module_matches(self, cw: str, prefix: str = ...) -> Set[str]:
        """Modules names to replace cw with"""
        ...
    
    def attr_matches(self, cw: str, prefix: str = ..., only_modules: bool = ...) -> Set[str]:
        """Attributes to replace name with"""
        ...
    
    def module_attr_matches(self, name: str) -> Set[str]:
        """Only attributes which are modules to replace name with"""
        ...
    
    def complete(self, cursor_offset: int, line: str) -> Optional[Set[str]]:
        """Construct a full list of possibly completions for imports."""
        ...
    
    def find_modules(self, path: Path) -> Generator[Optional[str], None, None]:
        """Find all modules (and packages) for a given directory."""
        ...
    
    def find_all_modules(self, paths: Iterable[Path]) -> Generator[None, None, None]:
        """Return a list with all modules in `path`, which should be a list of
        directory names. If path is not given, sys.path will be used."""
        ...
    
    def find_coroutine(self) -> bool:
        ...
    


