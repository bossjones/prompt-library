"""
This type stub file was generated by pyright.
"""

import argparse
import code
from typing import Callable, List, NoReturn, Optional, Tuple
from .config import Config

"""
Module to handle command line argument parsing, for all front-ends.
"""
logger = ...
class ArgumentParserFailed(ValueError):
    """Raised by the RaisingOptionParser for a bogus commandline."""
    ...


class RaisingArgumentParser(argparse.ArgumentParser):
    def error(self, msg: str) -> NoReturn:
        ...
    


def version_banner(base: str = ...) -> str:
    ...

def copyright_banner() -> str:
    ...

Options = Tuple[str, str, Callable[[argparse._ArgumentGroup], None]]
def parse(args: Optional[List[str]], extras: Optional[Options] = ..., ignore_stdin: bool = ...) -> Tuple[Config, argparse.Namespace, List[str]]:
    """Receive an argument list - if None, use sys.argv - parse all args and
    take appropriate action. Also receive optional extra argument: this should
    be a tuple of (title, description, callback)
        title:          The title for the argument group
        description:    A full description of the argument group
        callback:       A callback that adds argument to the argument group

    e.g.:

    def callback(group):
        group.add_argument('-f', action='store_true', dest='f', help='Explode')
        group.add_argument('-l', action='store_true', dest='l', help='Love')

    parse(
        ['-i', '-m', 'foo.py'],
        (
            'Front end-specific options',
            'A full description of what these options are for',
            callback
        ),
    )


    Return a tuple of (config, options, exec_args) wherein "config" is the
    config object either parsed from a default/specified config file or default
    config options, "options" is the parsed options from
    ArgumentParser.parse_args, and "exec_args" are the args (if any) to be parsed
    to the executed file (if any).
    """
    ...

def exec_code(interpreter: code.InteractiveInterpreter, args: List[str]) -> None:
    """
    Helper to execute code in a given interpreter, e.g. to implement the behavior of python3 [-i] file.py

    args should be a [faked] sys.argv.
    """
    ...

