"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Iterable, List, Optional, TextIO

class History:
    """Stores readline-style history and current place in it"""
    def __init__(self, entries: Optional[Iterable[str]] = ..., duplicates: bool = ..., hist_size: int = ...) -> None:
        ...
    
    def append(self, line: str) -> None:
        ...
    
    def append_to(self, entries: List[str], line: str) -> None:
        ...
    
    def first(self) -> str:
        """Move back to the beginning of the history."""
        ...
    
    def back(self, start: bool = ..., search: bool = ..., target: Optional[str] = ..., include_current: bool = ...) -> str:
        """Move one step back in the history."""
        ...
    
    @property
    def entry(self) -> str:
        """The current entry, which may be the saved line"""
        ...
    
    @property
    def entries_by_index(self) -> List[str]:
        ...
    
    def find_match_backward(self, search_term: str, include_current: bool = ...) -> int:
        ...
    
    def find_partial_match_backward(self, search_term: str, include_current: bool = ...) -> int:
        ...
    
    def forward(self, start: bool = ..., search: bool = ..., target: Optional[str] = ..., include_current: bool = ...) -> str:
        """Move one step forward in the history."""
        ...
    
    def find_match_forward(self, search_term: str, include_current: bool = ...) -> int:
        ...
    
    def find_partial_match_forward(self, search_term: str, include_current: bool = ...) -> int:
        ...
    
    def last(self) -> str:
        """Move forward to the end of the history."""
        ...
    
    @property
    def is_at_end(self) -> bool:
        ...
    
    @property
    def is_at_start(self) -> bool:
        ...
    
    def enter(self, line: str) -> None:
        ...
    
    def reset(self) -> None:
        ...
    
    def load(self, filename: Path, encoding: str) -> None:
        ...
    
    def load_from(self, fd: TextIO) -> List[str]:
        ...
    
    def save(self, filename: Path, encoding: str, lines: int = ...) -> None:
        ...
    
    def save_to(self, fd: TextIO, entries: Optional[List[str]] = ..., lines: int = ...) -> None:
        ...
    
    def append_reload_and_write(self, s: str, filename: Path, encoding: str) -> None:
        ...
    


