"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
def update_wrapper(decorated, fn):
    ...

class PluginLoader:
    def __init__(self, group) -> None:
        ...
    
    def load(self, name):
        ...
    
    def register(self, name, modulepath, objname):
        ...
    


def verify_directory(dir_):
    """create and/or verify a filesystem directory."""
    ...

def to_list(x, default=...):
    ...

class memoized_property:
    """A read-only @property that is only evaluated once."""
    def __init__(self, fget, doc=...) -> None:
        ...
    
    def __get__(self, obj, cls):
        ...
    


class memoized_instancemethod:
    """Decorate a method memoize its return value.

    Best applied to no-arg methods: memoization is not sensitive to
    argument values, and will always return the same value even when
    called with different arguments.

    """
    def __init__(self, fget, doc=...) -> None:
        ...
    
    def __get__(self, obj, cls):
        ...
    


class SetLikeDict(dict):
    """a dictionary that has some setlike methods on it"""
    def union(self, other):
        """produce a 'union' of this dict and another (at the key level).

        values in the second dict take precedence over that of the first"""
        ...
    


class FastEncodingBuffer:
    """a very rudimentary buffer that is faster than StringIO,
    and supports unicode data."""
    def __init__(self, encoding=..., errors=...) -> None:
        ...
    
    def truncate(self):
        ...
    
    def getvalue(self):
        ...
    


class LRUCache(dict):
    """A dictionary-like object that stores a limited number of items,
    discarding lesser used items periodically.

    this is a rewrite of LRUCache from Myghty to use a periodic timestamp-based
    paradigm so that synchronization is not really needed.  the size management
    is inexact.
    """
    class _Item:
        def __init__(self, key, value) -> None:
            ...
        
        def __repr__(self):
            ...
        
    
    
    def __init__(self, capacity, threshold=...) -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def values(self):
        ...
    
    def setdefault(self, key, value):
        ...
    
    def __setitem__(self, key, value):
        ...
    


_PYTHON_MAGIC_COMMENT_re = ...
def parse_encoding(fp):
    """Deduce the encoding of a Python source file (binary mode) from magic
    comment.

    It does this in the same way as the `Python interpreter`__

    .. __: http://docs.python.org/ref/encodings.html

    The ``fp`` argument should be a seekable file object in binary mode.
    """
    ...

def sorted_dict_repr(d):
    """repr() a dictionary with the keys in order.

    Used by the lexer unit test to compare parse trees based on strings.

    """
    ...

def restore__ast(_ast):
    """Attempt to restore the required classes to the _ast module if it
    appears to be missing them
    """
    ...

def read_file(path, mode=...):
    ...

def read_python_file(path):
    ...

