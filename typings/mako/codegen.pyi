"""
This type stub file was generated by pyright.
"""

"""provides functionality for rendering a parsetree constructing into module
source code."""
MAGIC_NUMBER = ...
TOPLEVEL_DECLARED = ...
RESERVED_NAMES = ...
def compile(node, uri, filename=..., default_filters=..., buffer_filters=..., imports=..., future_imports=..., source_encoding=..., generate_magic_comment=..., strict_undefined=..., enable_loop=..., reserved_names=...): # -> bytes | str:
    """Generate module source code given a parsetree node,
    uri, and optional source filename"""
    ...

class _CompileContext:
    def __init__(self, uri, filename, default_filters, buffer_filters, imports, future_imports, source_encoding, generate_magic_comment, strict_undefined, enable_loop, reserved_names) -> None:
        ...



class _GenerateRenderMethod:
    """A template visitor object which generates the
    full module source for a template.

    """
    def __init__(self, printer, compiler, node) -> None:
        ...

    def write_metadata_struct(self): # -> None:
        ...

    @property
    def identifiers(self): # -> None:
        ...

    def write_toplevel(self): # -> list[Any]:
        """Traverse a template structure for module-level directives and
        generate the start of module-level code.

        """
        class FindTopLevel:
            ...



    def write_render_callable(self, node, name, args, buffered, filtered, cached): # -> None:
        """write a top-level render callable.

        this could be the main render() method or that of a top-level def."""
        ...

    def write_module_code(self, module_code): # -> None:
        """write module-level template code, i.e. that which
        is enclosed in <%! %> tags in the template."""
        ...

    def write_inherit(self, node): # -> None:
        """write the module-level inheritance-determination callable."""
        ...

    def write_namespaces(self, namespaces): # -> None:
        """write the module-level namespace-generating callable."""
        ...

    def write_variable_declares(self, identifiers, toplevel=..., limit=...): # -> None:
        """write variable declarations at the top of a function.

        the variable declarations are in the form of callable
        definitions for defs and/or name lookup within the
        function's context argument. the names declared are based
        on the names that are referenced in the function body,
        which don't otherwise have any explicit assignment
        operation. names that are assigned within the body are
        assumed to be locally-scoped variables and are not
        separately declared.

        for def callable definitions, if the def is a top-level
        callable then a 'stub' callable is generated which wraps
        the current Context into a closure. if the def is not
        top-level, it is fully rendered as a local closure.

        """
        ...

    def write_def_decl(self, node, identifiers): # -> None:
        """write a locally-available callable referencing a top-level def"""
        ...

    def write_inline_def(self, node, identifiers, nested): # -> None:
        """write a locally-available def callable inside an enclosing def."""
        ...

    def write_def_finish(self, node, buffered, filtered, cached, callstack=...): # -> None:
        """write the end section of a rendering function, either outermost or
        inline.

        this takes into account if the rendering function was filtered,
        buffered, etc.  and closes the corresponding try: block if any, and
        writes code to retrieve captured content, apply filters, send proper
        return value."""
        ...

    def write_cache_decorator(self, node_or_pagetag, name, args, buffered, identifiers, inline=..., toplevel=...): # -> None:
        """write a post-function decorator to replace a rendering
        callable with a cached version of itself."""
        ...

    def create_filter_callable(self, args, target, is_expression): # -> str:
        """write a filter-applying expression based on the filters
        present in the given filter names, adjusting for the global
        'default' filter aliases as needed."""
        ...

    def visitExpression(self, node): # -> None:
        ...

    def visitControlLine(self, node): # -> None:
        ...

    def visitText(self, node): # -> None:
        ...

    def visitTextTag(self, node): # -> None:
        ...

    def visitCode(self, node): # -> None:
        ...

    def visitIncludeTag(self, node): # -> None:
        ...

    def visitNamespaceTag(self, node): # -> None:
        ...

    def visitDefTag(self, node): # -> None:
        ...

    def visitBlockTag(self, node): # -> None:
        ...

    def visitCallNamespaceTag(self, node): # -> None:
        ...

    def visitCallTag(self, node): # -> None:
        class DefVisitor:
            ...





class _Identifiers:
    """tracks the status of identifier names as template code is rendered."""
    def __init__(self, compiler, node=..., parent=..., nested=...) -> None:
        ...

    def branch(self, node, **kwargs): # -> _Identifiers:
        """create a new Identifiers for a new Node, with
        this Identifiers as the parent."""
        ...

    @property
    def defs(self): # -> set[Any]:
        ...

    def __repr__(self): # -> str:
        ...

    def check_declared(self, node): # -> None:
        """update the state of this Identifiers with the undeclared
        and declared identifiers of the given node."""
        ...

    def add_declared(self, ident): # -> None:
        ...

    def visitExpression(self, node): # -> None:
        ...

    def visitControlLine(self, node): # -> None:
        ...

    def visitCode(self, node): # -> None:
        ...

    def visitNamespaceTag(self, node): # -> None:
        ...

    def visitDefTag(self, node): # -> None:
        ...

    def visitBlockTag(self, node): # -> None:
        ...

    def visitTextTag(self, node): # -> None:
        ...

    def visitIncludeTag(self, node): # -> None:
        ...

    def visitPageTag(self, node): # -> None:
        ...

    def visitCallNamespaceTag(self, node): # -> None:
        ...

    def visitCallTag(self, node): # -> None:
        ...



_FOR_LOOP = ...
def mangle_mako_loop(node, printer): # -> str | Any:
    """converts a for loop into a context manager wrapped around a for loop
    when access to the `loop` variable has been detected in the for loop body
    """
    ...

class LoopVariable:
    """A node visitor which looks for the name 'loop' within undeclared
    identifiers."""
    def __init__(self) -> None:
        ...

    def visitControlLine(self, node): # -> None:
        ...

    def visitCode(self, node): # -> None:
        ...

    def visitExpression(self, node): # -> None:
        ...
