"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
_regexp_cache = ...
class Lexer:
    def __init__(self, text, filename=..., input_encoding=..., preprocessor=...) -> None:
        ...
    
    @property
    def exception_kwargs(self):
        ...
    
    def match(self, regexp, flags=...):
        """compile the given regexp, cache the reg, and call match_reg()."""
        ...
    
    def match_reg(self, reg):
        """match the given regular expression object to the current text
        position.

        if a match occurs, update the current text and line position.

        """
        ...
    
    def parse_until_text(self, watch_nesting, *text):
        ...
    
    def append_node(self, nodecls, *args, **kwargs):
        ...
    
    _coding_re = ...
    def decode_raw_stream(self, text, decode_raw, known_encoding, filename):
        """given string/unicode or bytes/string, determine encoding
        from magic encoding comment, return body as unicode
        or raw if decode_raw=False

        """
        ...
    
    def parse(self):
        ...
    
    def match_tag_start(self):
        ...
    
    def match_tag_end(self):
        ...
    
    def match_end(self):
        ...
    
    def match_percent(self):
        ...
    
    def match_text(self):
        ...
    
    def match_python_block(self):
        ...
    
    def match_expression(self):
        ...
    
    def match_control_line(self):
        ...
    
    def match_comment(self):
        """matches the multiline version of a comment"""
        ...
    


