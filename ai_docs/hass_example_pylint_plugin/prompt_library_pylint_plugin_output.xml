<documents>
<document index="1">
<source>/Users/malcolm/dev/bossjones/prompt-library/pyproject.toml</source>
<document_content>
[project]
name = "prompt-library"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    {name = "Malcolm Jones", email = "bossjones@theblacktonystark.com"}
]
keywords = ["python"]
requires-python = ">=3.12"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "copier>=9.4.1",
    "llm-cmd>=0.2a0",
    "llm>=0.19.1",
    "llm-clip>=0.1",
    "llm-sentence-transformers>=0.2",
    "llm-replicate>=0.3.1",
    "llm-perplexity>=2024.11.0",
    "llm-claude-3>=0.10",
    "llm-python>=0.1",
    "loguru>=0.7.3",
    "better-exceptions>=0.3.3",
    "promptim>=0.0.7",
    "marimo>=0.9.32",
    "rich>=13.9.4",
    "datachain>=0.7.9",
    "transformers>=4.47.0",
    "imutils>=0.5.4",
    "imageio>=2.36.1",
    "logging-tree>=1.10",
    "typer>=0.15.1",
    "files-to-prompt>=0.4",
    "python-dotenv>=1.0.1",
    "pydantic-settings>=2.6.1",
    "altair>=5.5.0",
    "vega-datasets>=0.9.0",
    "pandas>=2.2.3",
    "matplotlib>=3.9.3",
    "mako>=1.3.8",
    "pyperclip>=1.9.0",
    "defusedxml>=0.7.1",
    "langchain-anthropic>=0.3.0",
    "langchain-chroma>=0.1.4",
    "langchain-community>=0.3.10",
    "langchain-core>=0.3.22",
    "langchain-fireworks>=0.2.5",
    "langchain-google-genai>=2.0.6",
    "langchain-groq>=0.2.1",
    "langchain-openai>=0.2.11",
    "langchain>=0.3.10",
    "langgraph-checkpoint-sqlite>=2.0.1",
    "langgraph-sdk>=0.1.43",
    "langgraph>=0.2.56",
    "langsmith>=0.1.147",
    "asyncer>=0.0.8",
    "codetiming>=1.4.0",
    "uritools>=4.0.3",
]

[dependency-groups]
dev = [
    "bpython>=0.24",
    "coverage[toml]>=7.6.9",
    "pre-commit>=4.0.1",
    "pylint-pydantic>=0.3.4",
    "pysnooper>=1.2.1",
    "pytest-cov>=6.0.0",
    "pytest>=8.3.4",
    "pytest-aiohttp>=1.0.5",
    "pytest-asyncio>=0.24.0",
    "pytest-clarity>=1.0.1",
    "pytest-httpx>=0.35.0",
    "pytest-ignore-flaky>=2.2.1",
    "pytest-memray>=1.7.0",
    "pytest-mock>=3.14.0",
    "pytest-recording>=0.13.2",
    "pytest-retry>=1.6.3",
    "pytest-skip-slow>=0.0.5",
    "pytest-sugar>=1.0.0",
    "pyupgrade>=3.19.0",
    "ruff>=0.8.2",
    "tox-uv>=1.16.1",
    "pylint-to-ruff>=0.3.0",
    "pylint>=3.3.2",
]

[project.urls]
Homepage = "https://bossjones.github.io/democracy-exe/"
Repository = "https://github.com/bossjones/prompt-library"
Documentation = "https://bossjones.github.io/prompt-library/"

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project.scripts]
prompt_library = "prompt_library:main"

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true

extend-include = [
    "*.ipynb",
    "src/*.ipynb",
    "notebook/*.ipynb",
    "notebooks/*.ipynb",
    "notebooks/*.py",
    "*.py",
    # "*.pyi",
    "**/pyproject.toml",
    "*.ipynb",
    "pyproject.toml",
    "src/**/*.py",
]
output-format = "full"
force-exclude = true
respect-gitignore = true
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
extend-exclude = [
    "__pycache__",
    "__pypackages__",
    "_build",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git-rewrite",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "**/__pycache__",
    "buck-out",
    "build",
    "data",
    "data/*",
    "dist",
    "docs",
    "doc",
    "git",
    "logs/*",
    "node_modules",
    # "notebooks/*",
    "tests/data",
    "venv",
    "typings",
    "contrib",
    # Marimo notebook exclusions
    # "marimo_prompt_analysis.py",
    # "marimo_prompt_library.py",
    # "marimo_adhoc_prompting.py",
    # "marimo_is_awesome_demo.py",
    # "marimo_multi_llm_prompting.py",
    # "marimo_multi_language_model_ranker.py",
    ".marimo",
]

# https://docs.astral.sh/ruff/settings/#indent-width
# The formatter wraps lines at a length of 88
unsafe-fixes = false

[tool.ruff.lint]
# **************************************
# extend-select = ["I", "N812"]
unfixable = [
    "ERA", # do not autoremove commented out code
]
fixable = ["ALL"]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    # "TRY",

    "C90",    # mccabe
    "I002",   # from __future__ import annotations
    "N812",   # lowercase-imported-as-non-lowercase (N812) - Derived from the pep8-naming linter.
    "NPY001", # numpy-deprecated-type-alias
]
# ignore = [
#     # LineTooLong
#     "E501",
#     # DoNotAssignLambda
#     "E731",
# ]
# SOURCE: https://github.com/ansible-collections/cloud-content-handbook/blob/9be137d78af4d1cc140b210f3058977164021c9d/proposals/ruff_transition.md - end
# Conflicts with the formatter
ignore = [
    "N807",
    "C408",  # Checks for unnecessary calls to dict(), list(), or tuple() that can be rewritten as empty literals
    "UP031", # Checks for unnecessary format string usage
    "UP040", # Checks for unnecessary use of typing.TypeAlias in Python 3.12+

    "SIM110", # Checks for `return` statements that can be simplified to a single `return` statement
    "SIM103", # Checks for `return` statements that can be simplified by removing unnecessary `else` clauses
    "RUF012", # Checks for mutable default values in class attributes
    "A002",   # Checks for function arguments that shadow built-in names
    "RUF008", # Checks for non-pep604 unions (e.g., `Union[int, str]` instead of `int | str`)
    "RUF013", # Checks for implicit `Optional` in type annotations when the default parameter value is `None`
    "S602",   # Checks for `subprocess` calls with `shell=True`
    "RUF006", # Checks for unnecessary `elif` statements after `if` statements that always return
    "SIM108", # Checks for `if`-`else` blocks that can be replaced with a ternary operator
    "C416",   # Checks for unnecessary list/set/dict comprehensions
    "SIM101", # Checks for duplicate `if` conditions
    "B007",   # Checks for unused loop variables
    "RUF002", # Checks for ambiguous unicode characters
    "S608",   # Checks for SQL injection vulnerabilities in SQL string formatting
    "SIM116", # Checks for `if` blocks that can be replaced with `dict.get()` or `getattr()`
    "S101",   # Checks for uses of the `assert` keyword
    "B904",   # Checks for `raise` statements in exception handlers without a `from` clause
    "SIM117", # Checks for nested `with` statements that can be combined
    "UP038",  # Checks for uses of `sys.version` or `sys.version_info`
    "A001",   # Checks for variable assignments that shadow built-in names
    "SIM115", # Checks for cases where files are opened without using a context manager
    "S113",   # Checks for HTTP requests without a timeout
    "S108",   # Checks for hardcoded temporary file paths
    "S605",   # Checks for calls to `subprocess.run()` without explicitly setting `shell=False`
    "C417",   # Checks for unnecessary use of `map()` or `filter()` with `lambda`
    "B018",   # Checks for useless expressions


    "S105",    # Possible hardcoded password
    "UP007",   # Use X | Y for union types
    "TRY003",  # Long messages outside exception class
    "N815",    # Mixed case vars in class scope
    "PLW0603", # Global statement at module level
    "D",       # Docstring style rules (multiple)
    "COM812",  # Missing trailing comma
    "ISC001",  # Implicit string concatenation
    "N804",    # First param of classmethod not cls
    "F821",    # Undefined name
    "PLR1722", # Use sys.exit() instead of exit
    "N802",    # Function name should be lowercase
    "N801",    # Class name should use CapWords
    "PLW0602", # Global variable undefined
    "PLW2901", # Outer loop variable overwritten
    "YTT201",  # sys.version instead of sys.version_info
    "E722",    # Do not use bare except
    "PLC0132", # Use format specifiers in logging
    "PLW0128", # Redundant if-else in comprehension
    "W191",    # tab-indentation
    "E111",    # indentation-with-invalid-multiple
    "E114",    # indentation-with-invalid-multiple-comment
    "E117",    # over-indented
    "D206",    # indent-with-spaces
    "D300",    # triple-single-quotes
    "Q000",    # bad-quotes-inline-string
    "Q001",    # bad-quotes-multiline-string
    "Q002",    # bad-quotes-docstring
    "Q003",    # avoidable-escaped-quote
    "COM812",  # missing-trailing-comma
    "COM819",  # prohibited-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
    "ISC002",  # multi-line-implicit-string-concatenation

    "E501",    # Line too long
    "E721",    # Don't compare types, use isinstance()
    "E741",    # Ambiguous variable name
    "E731",    # Do not assign lambda expression
    "PLR1714", # Consider merging dict literals
    "N818",    # Exception name should end with "Error"
    "PLW0127", # Self-assigning variable
    "PT012",   # pytest.raises() without match=
    "N806",    # Variable in function should be lowercase
    "E712",    # Use "is" to compare with True/False/None
    "E711",    # Use "is" to compare with None
    "W505",    # Doc line too long
    "PT006",   # pytest.parametrize() values not a tuple
    "PLR2004", # Magic value used in comparison
    "N812",    # Lowercase imported as non-lowercase
    "F841",    # Local variable is assigned but unused

    "TID",     # flake8-tidy-imports (TID)#
    "F401",    # unused-import	{name} imported but unused; consider using importlib.util.find_spec to test for availability
    "F402",    # import-shadowed-by-loop-var	Import {name} from {row} shadowed by loop variable
    "F403",    # undefined-local-with-import-star	from {name} import * used; unable to detect undefined names
    "F404",    # late-future-import	from __future__ imports must occur at the beginning of the file
    "F405",    # undefined-local-with-import-star-usage	{name} may be undefined, or defined from star imports
    "F406",    # undefined-local-with-nested-import-star-usage	from {name} import * only allowed at module level
    "E401",    # multiple-imports-on-one-line	Multiple imports on one line
    "E402",    # module-import-not-at-top-of-file	Module level import not at top of cell
    "UP026",   # deprecated-mock-import	mock is deprecated, use unittest.mock
    "UP029",   # unnecessary-builtin-import	Unnecessary builtin import: {import}
    "UP035",   # deprecated-import	Import from {target} instead: {names}
    "ICN",     # flake8-import-conventions (ICN)
    "TCH",     # flake8-type-checking (TCH)#
    "PLC0414", # useless-import-alias	Import alias does not rename original package
    "PLC0415", # PLC0415	import-outside-top-level	import should be at the top-level of a file
    "PLC2403", # non-ascii-import-name	Module alias {name} contains a non-ASCII character, use an ASCII-only alias
    "PLC2701", # import-private-name	Private name import {name} from external module {module}
    "PLR0402", # manual-from-import	Use from {module} import {name} in lieu of alias
    "PLW0406", # import-self	Module {name} imports itself

    # via hatch: https://github.com/pypa/hatch/blob/864854478bac936de2d94273ae083c7c29564df2/scripts/update_ruff.py#L12
    # Allow non-abstract empty methods in abstract base classes
    'B027', # empty-method-without-abstract-decorator	{name} is an empty method in an abstract base class, but has no abstract decorator
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    'FBT003', # boolean-positional-value-in-call	Boolean positional value in function call
    # Ignore complexity
    'C901',    # complex-structure	{name} is too complex ({complexity} > {max_complexity})
    'PLR0904', # too-many-public-methods	Too many public methods ({methods} > {max_methods})
    "PLR0911", # too-many-return-statements	Too many return statements ({returns} > {max_returns})
    "PLR0912", # too-many-branches	Too many branches ({branches} > {max_branches})
    "PLR0913", # too-many-arguments	Too many arguments in function definition ({c_args} > {max_args})
    "PLR0914", # too-many-locals	Too many local variables ({current_amount}/{max_amount})
    "PLR0915", # too-many-statements	Too many statements ({statements} > {max_statements})
    "PLR0916", # too-many-boolean-expressions	Too many Boolean expressions ({expressions} > {max_expressions})
    "PLR0917", # too-many-positional	Too many positional arguments ({c_pos}/{max_pos})
    'PLR1702', # too-many-nested-blocks	Too many nested blocks ({nested_blocks} > {max_nested_blocks})

    # These are dependent on projects themselves
    'AIR', # airflow
    'CPY', # flake8-copyright (CPY)#
    'D',   # pydocstyle (D)#
    # 'NPY', # NumPy-specific rules (NPY)#
    'PD', # pandas-vet (PD)

    # Many projects either don't have type annotations or it would take much effort to satisfy this
    'ANN', # flake8-annotations (ANN).

    # Don't be too strict about TODOs as not everyone uses them the same way
    'FIX',     # flake8-fixme (FIX)#
    'TD001',   # invalid-todo-tag	Invalid TODO tag: {tag}
    'TD002',   # missing-todo-author	Missing author in TODO; try: # TODO(<author_name>): ... or # TODO @<author_name>: ...
    'TD003',   # missing-todo-link	Missing issue link on the line following this TODO
    'PTH',     # flake8-use-pathlib (PTH) # There are valid reasons to not use pathlib such as performance and import cost
    'FURB101', # read-whole-file	open and read should be replaced by Path({filename}).{suggestion}

    # Conflicts with type checking
    'RET501', # unnecessary-return-none	Do not explicitly return None in function if it is the only possible return value
    'RET502', # implicit-return-value	Do not implicitly return None in function able to return non-None value

    # Under review https://github.com/astral-sh/ruff/issues/8796
    'PT004', # pytest-missing-fixture-name-underscore	Fixture {function} does not return anything, add leading underscore
    'PT005', # pytest-incorrect-fixture-name-underscore	Fixture {function} returns a value, remove leading underscore

    # Buggy https://github.com/astral-sh/ruff/issues/4845
    'ERA001', # commented-out-code	Found commented-out code

    # Business logic relying on other programs has no choice but to use subprocess
    'S404', # suspicious-subprocess-import	subprocess module is possibly insecure

    # Too prone to false positives and might be removed https://github.com/astral-sh/ruff/issues/4045
    'S603', # subprocess-without-shell-equals-true	subprocess call: check for execution of untrusted input

    # Too prone to false positives https://github.com/astral-sh/ruff/issues/8761
    'SIM401', # if-else-block-instead-of-dict-get	Use {contents} instead of an if block

    # Allow for easy ignores
    'PGH003', # blanket-type-ignore	Use specific rule codes when ignoring type issues
    'PGH004', # blanket-noqa	Use specific rule codes when using noqa

    # This is required sometimes, and doesn't matter on Python 3.11+
    'PERF203', # try-except-in-loop	try-except within a loop incurs performance overhead

    # Potentially unnecessary on Python 3.12+
    'FURB140', # reimplemented-starmap	Use itertools.starmap instead of the generator

    # Conflicts with formatter, see:
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "E111",    # indentation-with-invalid-multiple	Indentation is not a multiple of {indent_size}
    "E114",    # indentation-with-invalid-multiple-comment	Indentation is not a multiple of {indent_size} (comment)
    "E117",    # over-indented	Over-indented (comment)
    "E301",    # blank-line-between-methods	Expected {BLANK_LINES_NESTED_LEVEL:?} blank line, found 0
    "E302",    # blank-lines-top-level	Expected {expected_blank_lines:?} blank lines, found {actual_blank_lines}
    "E303",    # too-many-blank-lines	Too many blank lines ({actual_blank_lines})
    "E304",    # blank-line-after-decorator	Blank lines found after function decorator ({lines})
    "E305",    # blank-lines-after-function-or-class	Expected 2 blank lines after class or function definition, found ({blank_lines})
    "E306",    # blank-lines-before-nested-definition	Expected 1 blank line before a nested definition, found 0
    "E501",    # line-too-long	Line too long ({width} > {limit})
    "W191",    # tab-indentation	Indentation contains tabs
    "D206",    # indent-with-spaces	Docstring should be indented with spaces, not tabs
    "D300",    # triple-single-quotes	Use triple double quotes """
    "COM812",  # missing-trailing-comma	Trailing comma missing
    "COM819",  # prohibited-trailing-comma	Trailing comma prohibited
    "ISC001",  # single-line-implicit-string-concatenation	Implicitly concatenated string literals on one line
    "ISC002",  # multi-line-implicit-string-concatenation	Implicitly concatenated string literals over multiple lines
    "Q000",    # bad-quotes-inline-string	Single quotes found but double quotes preferred
    "Q001",    # bad-quotes-multiline-string	Single quote multiline found but double quotes preferred
    "Q002",    # bad-quotes-docstring	Single quote docstring found but double quotes preferred
    "Q003",    # avoidable-escaped-quote	Change outer quotes to avoid escaping inner quotes
    "Q004",    # unnecessary-escaped-quote	Unnecessary escape on inner quote character
    "PLE1141", # dict-iter-missing-items	Unpacking a dictionary in iteration without calling .items()
    "PLE1142", # await-outside-async	await should be used within an async function
    "Q",       # Various quote-related rules
    "N999",    # Invalid module name
    "S702",     # Mako templates allow HTML/JS rendering (known XSS risk we accept)
    "S607",
    "S314"
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

# SOURCE: https://github.com/google/jax/blob/a1c82219e2d23ec994e42761ebcaf4c53d9e4ea7/pyproject.toml#L159C1-L160C20
[tool.ruff.lint.mccabe]
# max-complexity = 18
max-complexity = 31 # C901: Recommended goal is 10

# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.
[tool.ruff.lint.per-file-ignores]
"src/prompt_library/models/loggers/__init__.py" = ["N815", "B005", "RUF005", "F811"]
"src/prompt_library/agentic/studio/react/*" = ["N815", "B005", "RUF005"]
"src/prompt_library/agentic/studio/*" = ["N815", "B005", "RUF005"]
"cookbook/studio/*" = ["N815", "B005", "RUF005"]
"src/prompt_library/agentic/graph.py" = ["N815", "B005", "RUF005"]
"src/prompt_library/agentic/studio/graph.py" = ["N815", "B005", "RUF005"]
"src/prompt_library/prompt_library/gen_ai/models/vectorstores/*" = ["N815"]
"tests/*" = ["PT011", "S101"]
"src/prompt_library/prompt_library/tutorials/design_patterns/practical_examples/*" = [
    "PT018",
    "PLW0211",
    "ISC003",
    "N803",
]
"__init__.py" = ["F401", "E402"]
"**/{tests,docs,doc}/*" = ["E402"]
# https://github.com/astral-sh/ruff/issues/3928
# "*.pyi" = [
#     "I002", # from __future__ import annotations
# ]
"conf/*" = ["D"]
"demo/*" = ["D"]
"docs/*" = ["D"]
"test/*" = ["D"]
"tests/conftest.py" = ["D", "F811"]
"*.pyi" = ["D", "E501", "E701", "I002"]

"marimo_fix.py" = [
    "B005",  # Using .strip() with multi-character strings is misleading
    "D",  # pydocstyle (D)
    "F811",  # Redefinition of unused name
    "N803",  # Argument name should be lowercase
    "N806",  # Variable in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N815",  # Variable in class scope should not be mixedCase
    "RUF005",  # Consider `[x] * n` instead of `[x for _ in range(n)]`
    "RUF005", # collection-literal-concatenation (RUF005)
]

"marimo_prompt_analysis.py" = [
    "B005",  # Using .strip() with multi-character strings is misleading
    "D",  # pydocstyle (D)
    "F811",  # Redefinition of unused name
    "N803",  # Argument name should be lowercase
    "N806",  # Variable in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N815",  # Variable in class scope should not be mixedCase
    "RUF005",  # Consider `[x] * n` instead of `[x for _ in range(n)]`
    "RUF005", # collection-literal-concatenation (RUF005)
]

"marimo_prompt_library.py" = [
    "B005",  # Using .strip() with multi-character strings is misleading
    "D",  # pydocstyle (D)
    "F811",  # Redefinition of unused name
    "N803",  # Argument name should be lowercase
    "N806",  # Variable in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N815",  # Variable in class scope should not be mixedCase
    "RUF005",  # Consider `[x] * n` instead of `[x for _ in range(n)]`
    "RUF005", # collection-literal-concatenation (RUF005)
]



"mariomo_multi_language_model_ranker.py" = [
    "B005",  # Using .strip() with multi-character strings is misleading
    "D",  # pydocstyle (D)
    "F811",  # Redefinition of unused name
    "N803",  # Argument name should be lowercase
    "N806",  # Variable in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N815",  # Variable in class scope should not be mixedCase
    "RUF005",  # Consider `[x] * n` instead of `[x for _ in range(n)]`
    "RUF005", # collection-literal-concatenation (RUF005)
]

"mariomo_multi_llm_prompting.py" = [
    "B005",  # Using .strip() with multi-character strings is misleading
    "D",  # pydocstyle (D)
    "F811",  # Redefinition of unused name
    "N803",  # Argument name should be lowercase
    "N806",  # Variable in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N815",  # Variable in class scope should not be mixedCase
    "RUF005",  # Consider `[x] * n` instead of `[x for _ in range(n)]`
    "RUF005", # collection-literal-concatenation (RUF005)
]




"mariomo_prompt_library.py" = [
    "B005",  # Using .strip() with multi-character strings is misleading
    "D",  # pydocstyle (D)
    "F811",  # Redefinition of unused name
    "N803",  # Argument name should be lowercase
    "N806",  # Variable in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N815",  # Variable in class scope should not be mixedCase
    "RUF005",  # Consider `[x] * n` instead of `[x for _ in range(n)]`
    "RUF005", # collection-literal-concatenation (RUF005)
]

"pylint/plugins/*.py" = [
    "SIM102", #  SIM102 Use a single `if` statement instead of nested `if` statements

]



# ===========================[ ISORT ]========================
# SOURCE: https://github.com/zulip/zulip/blob/f4d109c289f614273b43b411cbd8d1fad128842e/pyproject.toml#L199
[tool.ruff.lint.isort]
# Use a single line between direct and from import.
lines-between-types = 1
# Use a single line after each import block.
lines-after-imports = 2

# Add the specified import line to all files.
# PEP 563: Postponed evaluation of annotations
# https://peps.python.org/pep-0563/
required-imports = ["from __future__ import annotations"]

# Allow imports relative to the "app" directory.
known-third-party = [
    "boto3",
    "fastapi",
    "langchain",
    "pydantic",
    "beautifulsoup4",
    "langchain_community",
    "langchain_openai",
    "openai",
    "requests",
    "discord",
    "uvicorn",
]
split-on-trailing-comma = false

known-first-party = ["src", "tests"]

known-local-folder = ["src/*"]

section-order = [
    "future",
    "standard-library",
    "third-party",
    "pytest",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
"pytest" = ["conftest", "pytest", "pytest_mock"]

# ===========================[ FLAKE8-TYPE-CHECKING ]========================
[tool.ruff.lint.flake8-type-checking]
# pydantic models use annotations at runtime
runtime-evaluated-base-classes = [
    # NOTE: ruff is unable to detect that these are subclasses of pydantic.BaseModel
    "pydantic.BaseModel",
]
runtime-evaluated-decorators = ["pydantic.dataclasses.dataclass"]

# ===========================[ PYUPGRADE ]========================
[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
ignore-decorators = ["typing.overload"]
property-decorators = ["gi.repository.GObject.Property"]
# NOTE: Enabling a convention will disable any rules that are not included in the specified convention. As such, the intended workflow is to enable a convention and then selectively enable or disable any additional rules on top of it. See: https://github.com/astral-sh/ruff/blob/c3e28f9d55b4484b0e7507d3bee6339b9fb83bb5/docs/faq.md
# Accepts: "google", "numpy", or "pep257".
convention = "pep257"


[tool.ruff.format]
preview = true
# SOURCE: https://github.com/ansible-collections/cloud-content-handbook/blob/9be137d78af4d1cc140b210f3058977164021c9d/proposals/ruff_transition.md - end
# Conflicts with the formatter
exclude = [
    "N999", # Invalid module name
    "D203", # one-blank-line-before-class	1 blank line required before class docstring

    "COM812",  # Missing trailing comma
    "ISC001",  # Implicit string concatenation
    "N804",    # First param of classmethod not 'cls'
    "F821",    # Undefined name
    "PLR1722", # Use sys.exit() instead of exit()
    "N802",    # Function name should be lowercase
    "N801",    # Class name should use CapWords
    "PLW0602", # Global variable undefined
    "F811",    # Redefinition of unused name
    "PLW2901", # Outer loop var overwritten in loop
    "YTT201",  # sys.version instead of version_info
    "E722",    # Do not use bare 'except'
    "PLC0132", # Use f-strings in logging
    "PLW0128", # Redundant if-else in comprehension

    "W191",   # tab-indentation
    "E111",   # indentation-with-invalid-multiple
    "E114",   # indentation-with-invalid-multiple-comment
    "E117",   # over-indented
    "D206",   # indent-with-spaces
    "D300",   # triple-single-quotes
    "Q000",   # bad-quotes-inline-string
    "Q001",   # bad-quotes-multiline-string
    "Q002",   # bad-quotes-docstring
    "Q003",   # avoidable-escaped-quote
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    "ISC002", # multi-line-implicit-string-concatenation

    "E501",    # Line too long
    "E721",    # Don't compare types, use isinstance()
    "E741",    # Ambiguous variable name
    "E731",    # Do not assign lambda expression
    "PLR1714", # Consider merging dict literals
    "N818",    # Exception name should end with "Error"
    "PLW0127", # Self-assigning variable
    "PT012",   # pytest.raises() without match=
    "N806",    # Variable in function should be lowercase
    "E712",    # Use "is" to compare with True/False/None
    "E711",    # Use "is" to compare with None
    "W505",    # Doc line too long
    "PT006",   # pytest.parametrize() values not a tuple
    "PLR2004", # Magic value used in comparison
    "N812",    # Lowercase imported as non-lowercase
    "F841",    # Local variable is assigned but unused

    "TID",     # flake8-tidy-imports (TID)#
    "F401",    # unused-import	{name} imported but unused; consider using importlib.util.find_spec to test for availability
    "F402",    # import-shadowed-by-loop-var	Import {name} from {row} shadowed by loop variable
    "F403",    # undefined-local-with-import-star	from {name} import * used; unable to detect undefined names
    "F404",    # late-future-import	from __future__ imports must occur at the beginning of the file
    "F405",    # undefined-local-with-import-star-usage	{name} may be undefined, or defined from star imports
    "F406",    # undefined-local-with-nested-import-star-usage	from {name} import * only allowed at module level
    "E401",    # multiple-imports-on-one-line	Multiple imports on one line
    "E402",    # module-import-not-at-top-of-file	Module level import not at top of cell
    "UP026",   # deprecated-mock-import	mock is deprecated, use unittest.mock
    "UP029",   # unnecessary-builtin-import	Unnecessary builtin import: {import}
    "UP035",   # deprecated-import	Import from {target} instead: {names}
    "ICN",     # flake8-import-conventions (ICN)
    "TCH",     # flake8-type-checking (TCH)#
    "PLC0414", # useless-import-alias	Import alias does not rename original package
    "PLC0415", # PLC0415	import-outside-top-level	import should be at the top-level of a file
    "PLC2403", # non-ascii-import-name	Module alias {name} contains a non-ASCII character, use an ASCII-only alias
    "PLC2701", # import-private-name	Private name import {name} from external module {module}
    "PLR0402", # manual-from-import	Use from {module} import {name} in lieu of alias
    "PLW0406", # import-self	Module {name} imports itself

    # via hatch: https://github.com/pypa/hatch/blob/864854478bac936de2d94273ae083c7c29564df2/scripts/update_ruff.py#L12
    # Allow non-abstract empty methods in abstract base classes
    'B027', # empty-method-without-abstract-decorator	{name} is an empty method in an abstract base class, but has no abstract decorator
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    'FBT003', # boolean-positional-value-in-call	Boolean positional value in function call
    # Ignore complexity
    'C901',    # complex-structure	{name} is too complex ({complexity} > {max_complexity})
    'PLR0904', # too-many-public-methods	Too many public methods ({methods} > {max_methods})
    "PLR0911", # too-many-return-statements	Too many return statements ({returns} > {max_returns})
    "PLR0912", # too-many-branches	Too many branches ({branches} > {max_branches})
    "PLR0913", # too-many-arguments	Too many arguments in function definition ({c_args} > {max_args})
    "PLR0914", # too-many-locals	Too many local variables ({current_amount}/{max_amount})
    "PLR0915", # too-many-statements	Too many statements ({statements} > {max_statements})
    "PLR0916", # too-many-boolean-expressions	Too many Boolean expressions ({expressions} > {max_expressions})
    "PLR0917", # too-many-positional	Too many positional arguments ({c_pos}/{max_pos})
    'PLR1702', # too-many-nested-blocks	Too many nested blocks ({nested_blocks} > {max_nested_blocks})

    # These are dependent on projects themselves
    'AIR', # airflow
    'CPY', # flake8-copyright (CPY)#
    'D',   # pydocstyle (D)#

    'PD', # pandas-vet (PD)

    # Many projects either don't have type annotations or it would take much effort to satisfy this
    'ANN', # flake8-annotations (ANN).

    # Don't be too strict about TODOs as not everyone uses them the same way
    'FIX',     # flake8-fixme (FIX)#
    'TD001',   # invalid-todo-tag	Invalid TODO tag: {tag}
    'TD002',   # missing-todo-author	Missing author in TODO; try: # TODO(<author_name>): ... or # TODO @<author_name>: ...
    'TD003',   # missing-todo-link	Missing issue link on the line following this TODO
    'PTH',     # flake8-use-pathlib (PTH) # There are valid reasons to not use pathlib such as performance and import cost
    'FURB101', # read-whole-file	open and read should be replaced by Path({filename}).{suggestion}

    # Conflicts with type checking
    'RET501', # unnecessary-return-none	Do not explicitly return None in function if it is the only possible return value
    'RET502', # implicit-return-value	Do not implicitly return None in function able to return non-None value

    # Under review https://github.com/astral-sh/ruff/issues/8796
    'PT004', # pytest-missing-fixture-name-underscore	Fixture {function} does not return anything, add leading underscore
    'PT005', # pytest-incorrect-fixture-name-underscore	Fixture {function} returns a value, remove leading underscore

    # Buggy https://github.com/astral-sh/ruff/issues/4845
    'ERA001', # commented-out-code	Found commented-out code

    # Business logic relying on other programs has no choice but to use subprocess
    'S404', # suspicious-subprocess-import	subprocess module is possibly insecure

    # Too prone to false positives and might be removed https://github.com/astral-sh/ruff/issues/4045
    'S603', # subprocess-without-shell-equals-true	subprocess call: check for execution of untrusted input

    # Too prone to false positives https://github.com/astral-sh/ruff/issues/8761
    'SIM401', # if-else-block-instead-of-dict-get	Use {contents} instead of an if block

    # Allow for easy ignores
    'PGH003', # blanket-type-ignore	Use specific rule codes when ignoring type issues
    'PGH004', # blanket-noqa	Use specific rule codes when using noqa

    # This is required sometimes, and doesn't matter on Python 3.11+
    'PERF203', # try-except-in-loop	try-except within a loop incurs performance overhead

    # Potentially unnecessary on Python 3.12+
    'FURB140', # reimplemented-starmap	Use itertools.starmap instead of the generator

    # Conflicts with formatter, see:
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "E111",    # indentation-with-invalid-multiple	Indentation is not a multiple of {indent_size}
    "E114",    # indentation-with-invalid-multiple-comment	Indentation is not a multiple of {indent_size} (comment)
    "E117",    # over-indented	Over-indented (comment)
    "E301",    # blank-line-between-methods	Expected {BLANK_LINES_NESTED_LEVEL:?} blank line, found 0
    "E302",    # blank-lines-top-level	Expected {expected_blank_lines:?} blank lines, found {actual_blank_lines}
    "E303",    # too-many-blank-lines	Too many blank lines ({actual_blank_lines})
    "E304",    # blank-line-after-decorator	Blank lines found after function decorator ({lines})
    "E305",    # blank-lines-after-function-or-class	Expected 2 blank lines after class or function definition, found ({blank_lines})
    "E306",    # blank-lines-before-nested-definition	Expected 1 blank line before a nested definition, found 0
    "E501",    # line-too-long	Line too long ({width} > {limit})
    "W191",    # tab-indentation	Indentation contains tabs
    "D206",    # indent-with-spaces	Docstring should be indented with spaces, not tabs
    "D300",    # triple-single-quotes	Use triple double quotes """
    "COM812",  # missing-trailing-comma	Trailing comma missing
    "COM819",  # prohibited-trailing-comma	Trailing comma prohibited
    "ISC001",  # single-line-implicit-string-concatenation	Implicitly concatenated string literals on one line
    "ISC002",  # multi-line-implicit-string-concatenation	Implicitly concatenated string literals over multiple lines
    "Q000",    # bad-quotes-inline-string	Single quotes found but double quotes preferred
    "Q001",    # bad-quotes-multiline-string	Single quote multiline found but double quotes preferred
    "Q002",    # bad-quotes-docstring	Single quote docstring found but double quotes preferred
    "Q003",    # avoidable-escaped-quote	Change outer quotes to avoid escaping inner quotes
    "Q004",    # unnecessary-escaped-quote	Unnecessary escape on inner quote character
    "PLE1141", # dict-iter-missing-items	Unpacking a dictionary in iteration without calling .items()
    "PLE1142", # await-outside-async	await should be used within an async function
    "Q",
]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown, reStructuredText code/literal blocks and doctests are all supported
# This is currently disabled by default, but it is planned for this to be opt-out in the future.
docstring-code-format = true
# Set the line length limit used when formatting code snippets in docstrings. This only has an effect when the `docstring-code-format` setting is enabled.
docstring-code-line-length = "dynamic"

# ===========================[ RUFF pycodestyle ]========================
# https://docs.astral.sh/ruff/settings/#lint_pycodestyle_max-doc-length
[tool.ruff.lint.pycodestyle]
# E501 reports lines that exceed the length of 100
max-doc-length = 120
# E501 reports lines that exceed the length of 100.
max-line-length = 120
[tool.coverage.report]
skip_empty = true

exclude_lines = [
    '\(Protocol\):$',
    '\s*\.\.\.$',
    "@(abc.)?abstractmethod",
    "@overload",
    "@typing.overload",
    "assert_never",
    "def __repr__",
    "def __str__",
    "except ImportError:",
    "if __name__ == .__main__.:",
    "if not _PANDAS_AVAILABLE:",
    "if self.debug",
    "if settings.DEBUG",
    "if TYPE_CHECKING:",
    "if TYPE_CHECKING",
    "if typing.TYPE_CHECKING:",
    "pragma: $TEST_PLATFORM no cover",
    "pragma: no cover",
    "pragma: py$PYTHON_MAJOR_VERSION no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "return NotImplemented",
    "typing.assert_never",
]
omit = [
    "test/*",
    "tests/*",
    "src/agentic/studio/*",
    "cookbook/studio/*",
    "hello.py",
    # "marimo_*",
    # "mariomo_prompt_library.py",
    # "mariomo_multi_language_model_ranker.py",
    # "mariomo_prompt_library_test.py",
    # "mariomo_multi_llm_prompting.py"
]
# fail if coverage drops below the specified percentage:
fail_under = 10

# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ d .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # 1. Exclude an except clause of a specific form:
    "except ValueError:\\n\\s*assume\\(False\\)",
    # 2. Comments to turn coverage on and off:
    "no cover: start(?s:.)*?no cover: stop",
    # 3. A pragma comment that excludes an entire file:
    "\\A(?s:.*# pragma: exclude file.*)\\Z",
]

# (boolean, default False) Ignore source code that can't be found, emitting a warning instead of an exception.
ignore_errors = false
# (boolean, default False) When running a summary report, show missing lines. See Coverage summary: coverage report for more information.
show_missing = true
# (boolean, default False) Don't report files that are 100% covered. This helps you focus on files that need attention.
skip_covered = false


# =========================[ PYTEST-COV ]========================
[tool.coverage.paths]
# SOURCE: https://coverage.readthedocs.io/en/latest/config.html
# the first path is the path on the local filesystem
# the second path is the path as it appears within the Docker container
source = [
    "src/",
    "/src",
]

[tool.coverage.run]
parallel = true
branch = true
source = ["prompt_library"]

# NOTE: This might break some SHIT (5/8/2024)
# SOURCE: https://github.com/anthonycorletti/snok/blob/039ae9aaf403485ce9b7fedb0e1943c25a250eed/snok/templates/__shared/_pyproject_toml#L130
concurrency = ["thread", "greenlet", "multiprocessing"]
omit = [
    "**/src/tutorials/**",
]



[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "cov.xml"


# =========================[ PYTEST INI OPTIONS ]========================
[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    'ignore:configuration option "asyncio_default_fixture_loop_scope" is unset',
]
# retries = 5
# retry_delay = 0.5
# retry_delay = 30
pythonpath = "."
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    # Print runtimes of the slowest tests.
    '--durations=10',
    '--durations-min=1.0',
    '--junitxml=junit/test-results.xml',
    '--cov-report=annotate:cov_annotate',
]

# ###################################################################################
# # enable live logging when needed (very useful when debugging evals)
# ###################################################################################
log_cli = false
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Enable live logging to a file when needed (very useful when debugging evals)
log_file = "pytest-accuracy-debug.log"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_level = "DEBUG"

# markers=["basic", "filetree", "suites", "markers", "parametrization", "buildmeta"]
# allows you to conditionally call only a subset of pytest baased on the marker provided
markers = [
    "cogs: marks tests that run code that utilizes the cogs module (deselect with '-m \"not cogs\"')",
    "configonly: marks tests that run code that utilizes the config module (deselect with '-m \"not configonly\"')",
    "e2e: marks tests dealing with e2e testing (deselect with '-m \"not e2e\"')",
    "evals: marks tests as evals (run with '-m evals')",
    "fast: marks tests as fast (run with '-m fast')",
    "httpclientonly: marks tests that run code that utilizes the http_client module (deselect with '-m \"not httpclientonly\"')",
    "imgops: marks tests as imgops (run with '-m imgops')",
    "integration: marks tests dealing with integration testing (deselect with '-m \"not integration\"')",
    "onboardingonly: marks tests that run code that utilizes the new_dev_onboarding_tool module (deselect with '-m \"not onboardingonly\"')",
    "utilsonly: marks tests that run code that utilizes any utils module (deselect with '-m \"not utilsonly\"')",
    "retryonly: marks tests that run code that utilizes the retry module (deselect with '-m \"not retryonly\"')",
    "skip_in_parallel: marks tests that should be run in serial only (deselect with '-m \"not skip_in_parallel\"')",
    "slow: marks tests as slow (run with '-m slow')",
    "toolonly: marks tests that run code that utilizes a Custom Langchain tool module in the tools directory (deselect with '-m \"not toolonly\"')",
    "toolonly: marks tests that run code that utilizes llm tool classes  (deselect with '-m \"not toolonly\"')",
    "unittest: marks tests dealing with unittest (deselect with '-m \"not unittest\"')",
    "vectorstoronly: marks tests that run code that utilizes the flex_vector_store_tool module (deselect with '-m \"not vectorstoronly\"')",
    "visiontoolonly: marks tests that run code that utilizes vision_tool.py (deselect with '-m \"not visiontoolonly\"')",
    "webpagetoolonly: marks tests that run code that utilizes the fetch_webpage_tool module (deselect with '-m \"not webpagetoolonly\"')",
    "vcronly: marks tests that run code that utilizes the vcr module (deselect with '-m \"not vcronly\"')",
    "vcrcanary: marks tests that run code that utilizes the vcr test canary module (deselect with '-m \"not vcrcanary\"')",
    "pgvectoronly: marks tests that run code that utilizes the pgvector module (deselect with '-m \"not pgvectoronly\"')",
    "services: marks tests that run code that belongs to the services module  (deselect with '-m \"not services\"')",
    "slower: marks tests that run code that belongs to the slower calls at end of pytest run module  (deselect with '-m \"not slower\"')",
    "discordonly: marks tests that run code that belongs to the discordonly calls at end of pytest run module  (deselect with '-m \"not discordonly\"')",
    "cursorgenerated: marks tests that are cursor generated (deselect with '-m \"not cursorgenerated\"')",
    "aidergenerated: marks tests that are aider generated (deselect with '-m \"not aidergenerated\"')",
    "asynciotyper: marks tests that are asyncio typer generated (deselect with '-m \"not asynciotyper\"')",
    "cli: marks tests that are cli generated (deselect with '-m \"not cli\"')",
]



# =========================[ BLACK ]========================
[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312"]


[tool.pylint.MAIN]
extension-pkg-allow-list = [
    "torch",
    "numpy",
    "orjson",
    "cv2",
]
extension-pkg-whitelist = ["pydantic", "torch", "numpy", "orjson", "cv2"]
py-version = "3.12"
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
jobs = 0
fail-on = ["I"]
# PosixPath('/Users/malcolm/dev/bossjones/prompt-library/pylint/plugins')
init-hook = """\
    from pathlib import Path; \
    import sys; \

    from pylint.config import find_default_config_files; \

    sys.path.append( \
        str(Path(next(find_default_config_files())).parent.joinpath('pylint/plugins')) + "/."
    ) \
    """
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
    # "pylint_pydantic",
    # "marimo_cell_validator",
    # "marimo_imports_validator",
    # "marimo_function_validator",
    "marimo_cell_params_validator"
]
persistent = false
# ignore = "lib"
ignore-paths = [
    ".venv",                               # Virtual Environment
    "^.*.pyi$",                            # Type Hinting
    "^.*_prv_.*$",                         # Private Files/Folders (e.g. _prv_*.py | _prv_* folder)
    "lib",                                 # External Libraries
    "src/utils/run_service.py",
    "src/utils/imgops.py",
    "src/utils/files_import.py",
    "src/agentic/studio/*",
]

# SOURCE: https://github.com/ocellicode/gpyt-commandbus/blob/80172644b35af7b4679ace734bea1c5ea2212a52/pyproject.toml#L21
[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]


[tool.pylint.BASIC]
class-const-naming-style = "any"

[tool.pylint."MESSAGES CONTROL"]
# https://github.com/pydantic/pydantic/issues/1961
extension-pkg-whitelist = "pydantic"

# Reasons disabled:
# format - handled by ruff
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Pylint CodeStyle plugin
# consider-using-namedtuple-or-dataclass - too opinionated
# consider-using-assignment-expr - decision to use := better left to devs
disable = [
    "possibly-used-before-assignment",                  # Warns about variables potentially used before assignment
    "raw-checker-failed",                               # Internal pylint error
    "bad-inline-option",                                # Invalid inline pylint option
    "file-ignored",                                     # Entire file was ignored due to configuration
    "suppressed-message",                               # Message was suppressed via inline comment
    "deprecated-pragma",                                # Use of deprecated pragma
    "use-implicit-booleaness-not-comparison-to-string", # Suggests using implicit boolean check instead of comparing to empty string
    "use-implicit-booleaness-not-comparison-to-zero",   # Suggests using implicit boolean check instead of comparing to zero
    "fixme",                                            # Warns about FIXME, TODO and XXX comments
    "line-too-long",                                    # Line exceeds maximum allowed length
    "missing-class-docstring",                          # Class has no docstring
    "missing-function-docstring",                       # Function or method has no docstring
    "missing-module-docstring",                         # Module has no docstring
    "too-few-public-methods",                           # Class has too few public methods
    "raise-missing-from",                               # Exception raised without 'from' clause
    "abstract-method",                                  # Abstract method is not overridden
    "consider-using-assignment-expr",                   # Suggests using assignment expression (:=)
    "consider-using-f-string",                          # Suggests using f-strings for string formatting
    "consider-using-namedtuple-or-dataclass",           # Suggests using namedtuple or dataclass
    "cyclic-import",                                    # Detects cyclic imports between modules
    "duplicate-code",                                   # Detects duplicated code
    "format",                                           # Related to code formatting issues
    "inconsistent-return-statements",                   # Function has inconsistent return statements
    "locally-disabled",                                 # Warns about locally disabled pylint messages
    "not-context-manager",                              # Suggests using 'with' statement for context managers
    "too-few-public-methods",                           # Class has too few public methods (duplicate)
    "too-many-ancestors",                               # Class has too many parent classes
    "too-many-arguments",                               # Function or method has too many arguments
    "too-many-boolean-expressions",                     # Boolean expression is too complex
    "too-many-instance-attributes",                     # Class has too many instance attributes
    "too-many-lines",                                   # Module has too many lines
    "too-many-locals",                                  # Function or method has too many local variables
    "too-many-public-methods",                          # Class has too many public methods
    "wrong-import-order",                               # Imports are in the wrong order
    # Handled by ruff
    # Ref: <https://github.com/astral-sh/ruff/issues/970>
    "await-outside-async",    # PLE1142  # Warns about 'await' used outside an async function
    "bad-str-strip-call",     # PLE1310  # Detects suspicious arguments in str.strip() calls
    "bad-string-format-type", # PLE1307  # Warns about invalid format string types
    "bidirectional-unicode",  # PLE2502  # Detects potentially dangerous bidirectional Unicode characters
    "continue-in-finally",    # PLE0116  # Warns about 'continue' in 'finally' block which may swallow exceptions
    "duplicate-bases",        # PLE0241  # Detects duplicate base classes in class definitions
    "format-needs-mapping",   # F502     # Warns when a format string needs a mapping (dict) but receives something else
    "function-redefined",     # F811     # Detects when a function is redefined
    # Needed because ruff does not understand type of __all__ generated by a function
    # "invalid-all-format", # PLE0605
    "anomalous-backslash-in-string",      # W605     # Detects anomalous backslash in string
    "assert-on-string-literal",           # PLW0129  # Warns about assert statements on string literals
    "assert-on-tuple",                    # F631     # Warns about assert statements on tuples
    "bad-format-string",                  # W1302, F # Detects invalid format strings
    "bad-format-string-key",              # W1300, F # Warns about invalid keys in format strings
    "bare-except",                        # E722     # Warns about bare except clauses
    "binary-op-exception",                # PLW0711  # Warns about binary operators used with exceptions
    "cell-var-from-loop",                 # B023     # Detects cell variables from loop variables
    "invalid-all-object",                 # PLE0604  # Warns about invalid objects in __all__
    "invalid-character-backspace",        # PLE2510  # Detects invalid backspace characters
    "invalid-character-esc",              # PLE2513  # Detects invalid escape characters
    "invalid-character-nul",              # PLE2514  # Detects invalid null characters
    "invalid-character-sub",              # PLE2512  # Detects invalid substitute characters
    "invalid-character-zero-width-space", # PLE2515  # Detects invalid zero-width space characters
    "logging-too-few-args",               # PLE1206  # Warns about too few arguments in logging calls
    "logging-too-many-args",              # PLE1205  # Warns about too many arguments in logging calls
    "missing-format-string-key",          # F524     # Detects missing keys in format strings
    "mixed-format-string",                # F506     # Warns about mixed old and new style format strings
    "no-method-argument",                 # N805     # Warns when a method has no 'self' parameter
    "no-self-argument",                   # N805     # Warns when a method has no 'self' parameter (duplicate)
    "nonexistent-operator",               # B002     # Warns about nonexistent operators
    "nonlocal-without-binding",           # PLE0117  # Warns about nonlocal variables without binding
    "not-in-loop",                        # F701, F702 # Warns about break/continue statements outside loops
    "notimplemented-raised",              # F901     # Warns when NotImplemented is raised instead of NotImplementedError
    "return-in-init",                     # PLE0101  # Warns about return statements in __init__ methods
    "return-outside-function",            # F706     # Warns about return statements outside functions
    "syntax-error",                       # E999     # Detects syntax errors
    "too-few-format-args",                # F524     # Warns about too few arguments for format string
    "too-many-format-args",               # F522     # Warns about too many arguments for format string
    "too-many-star-expressions",          # F622     # Warns about too many starred expressions in assignment
    "truncated-format-string",            # F501     # Detects truncated format strings
    "undefined-all-variable",             # F822     # Warns about undefined variables in __all__
    "undefined-variable",                 # F821     # Warns about undefined variables
    "used-prior-global-declaration",      # PLE0118  # Warns when a variable is used before its global declaration
    "yield-inside-async-function",        # PLE1700  # Warns about yield statements inside async functions
    "yield-outside-function",             # F704     # Warns about yield statements outside functions
    # "dangerous-default-value", # B006, ruff catches new occurrences, needs more work
    "duplicate-except",                     # B014     # Warns about duplicate except clauses
    "duplicate-key",                        # F601     # Warns about duplicate keys in dictionaries
    "duplicate-string-formatting-argument", # F        # Warns about duplicate keys in format strings
    "duplicate-value",                      # F        # Warns about duplicate values in sets
    "eval-used",                            # S307     # Warns about the use of eval()
    "exec-used",                            # S102     # Warns about the use of exec()
    "expression-not-assigned",              # B018     # Warns about expressions that are not assigned
    "f-string-without-interpolation",       # F541     # Warns about f-strings without any interpolation
    "forgotten-debug-statement",            # T100     # Warns about forgotten debug statements
    "format-string-without-interpolation",  # F        # Warns about format strings without any interpolation
    # "global-statement", # PLW0603, ruff catches new occurrences, needs more work
    "global-variable-not-assigned",  # PLW0602  # Warns about global variables that are not assigned
    "implicit-str-concat",           # ISC001   # Warns about implicit string concatenation
    "import-self",                   # PLW0406  # Warns when a module imports itself
    "inconsistent-quotes",           # Q000     # Warns about inconsistent use of quotes
    "invalid-envvar-default",        # PLW1508  # Warns about invalid default values for environment variables
    "keyword-arg-before-vararg",     # B026     # Warns about keyword arguments appearing before variable arguments
    "logging-format-interpolation",  # G        # Warns about using % formatting in logging functions
    "logging-fstring-interpolation", # G        # Warns about using f-strings in logging functions
    "logging-not-lazy",              # G        # Warns about non-lazy logging calls
    "misplaced-future",              # F404     # Warns about misplaced __future__ imports
    "named-expr-without-context",    # PLW0131  # Warns about named expressions (walrus operator) without proper context
    "nested-min-max",                # PLW3301  # Warns about nested min/max calls that can be flattened
    "pointless-statement",           # B018     # Warns about pointless statements
    "raise-missing-from",            # B904     # Warns about raise statements missing 'from' clause
    # "redefined-builtin", # A001, ruff is way more stricter, needs work
    "bad-classmethod-argument",          # N804     # Warns about incorrect first argument name in classmethods
    "comparison-of-constants",           # PLR0133  # Warns about comparisons between constants
    "comparison-with-itself",            # PLR0124  # Warns about comparisons of a value with itself
    "consider-alternative-union-syntax", # UP007    # Suggests using alternative union syntax (Python 3.10+)
    "consider-iterating-dictionary",     # SIM118   # Suggests iterating over dictionary items directly
    "consider-merging-isinstance",       # PLR1701  # Suggests merging multiple isinstance checks
    "consider-using-alias",              # UP006    # Suggests using type aliases (Python 3.7+)
    "consider-using-dict-comprehension", # C402     # Suggests using dict comprehension instead of dict()
    "consider-using-generator",          # C417     # Suggests using a generator expression instead of a list comprehension
    "consider-using-get",                # SIM401   # Suggests using dict.get() instead of checking for key existence
    "consider-using-set-comprehension",  # C401     # Suggests using set comprehension instead of set()
    "consider-using-sys-exit",           # PLR1722  # Suggests using sys.exit() instead of exit()
    "consider-using-ternary",            # SIM108   # Suggests using ternary operator instead of if-else
    "empty-docstring",                   # D419     # Warns about empty docstrings
    "invalid-name",                      # N815     # Warns about invalid names (variables, functions, classes, etc.)
    "line-too-long",                     # E501     # Warns about lines that are too long (disabled globally)
    "literal-comparison",                # F632     # Warns about comparisons to literals using is/is not
    "missing-class-docstring",           # D101     # Warns about missing docstrings in classes
    "missing-final-newline",             # W292     # Warns about missing final newline in files
    "missing-function-docstring",        # D103     # Warns about missing docstrings in functions
    "missing-module-docstring",          # D100     # Warns about missing docstrings in modules
    "multiple-imports",                  # E401     # Warns about multiple imports on one line
    "no-else-break",                     # RET508   # Suggests removing unnecessary else after break
    "no-else-continue",                  # RET507   # Suggests removing unnecessary else after continue
    "no-else-raise",                     # RET506   # Suggests removing unnecessary else after raise
    "no-else-return",                    # RET505   # Suggests removing unnecessary else after return
    "property-with-parameters",          # PLR0206  # Warns about properties with parameters
    "singleton-comparison",              # E711, E712 # Warns about comparison to True, False, or None
    "subprocess-run-check",              # PLW1510  # Suggests using check=True with subprocess.run()
    "super-with-arguments",              # UP008    # Suggests using super() without arguments (Python 3+)
    "superfluous-parens",                # UP034    # Warns about unnecessary parentheses
    "too-many-branches",                 # PLR0912  # Warns about too many branches in a function
    "too-many-return-statements",        # PLR0911  # Warns about too many return statements in a function
    "too-many-statements",               # PLR0915  # Warns about too many statements in a function
    "trailing-comma-tuple",              # COM818   # Warns about trailing commas in single-item tuples
    "try-except-raise",                  # TRY302   # Suggests simplifying try-except-raise blocks
    "ungrouped-imports",                 # I001     # Warns about ungrouped imports
    "unidiomatic-typecheck",             # E721     # Warns about unidiomatic type checking
    "unnecessary-comprehension",         # C416     # Warns about unnecessary list comprehensions
    "unnecessary-direct-lambda-call",    # PLC3002  # Warns about unnecessary direct lambda calls
    "unnecessary-lambda-assignment",     # PLC3001  # Warns about unnecessary lambda assignments
    "unnecessary-pass",                  # PIE790   # Warns about unnecessary pass statements
    "unneeded-not",                      # SIM208   # Suggests simplifying unnecessary not operators
    "unused-argument",                   # ARG001   # Warns about unused function arguments
    "unused-format-string-argument",     # F507     # Warns about unused format string arguments
    "unused-format-string-key",          # F504     # Warns about unused format string keys
    "unused-import",                     # F401     # Warns about unused imports
    "unused-variable",                   # F841     # Warns about unused variables
    "use-a-generator",                   # C417     # Suggests using a generator instead of a list comprehension
    "use-dict-literal",                  # C406     # Suggests using dict literal instead of dict()
    "use-list-literal",                  # C405     # Suggests using list literal instead of list()
    "useless-else-on-loop",              # PLW0120  # Warns about useless else clauses on loops
    "useless-import-alias",              # PLC0414  # Warns about useless import aliases
    "useless-object-inheritance",        # UP004    # Warns about useless object inheritance in Python 3
    "useless-return",                    # PLR1711  # Warns about useless return statements
    "wildcard-import",                   # F403     # Warns about wildcard imports
    "wrong-import-order",                # I001     # Warns about incorrect import order
    "wrong-import-position",             # E402     # Warns about imports not at the top of the file
    # "no-self-use", # PLR6301  # Optional plugin, not enabled
    # Handled by mypy
    # Ref: <https://github.com/antonagestam/pylint-mypy-overlap>
    "abstract-class-instantiated",               # Warns about instantiation of abstract classes
    "arguments-differ",                          # Warns when overridden method arguments differ from superclass
    "assigning-non-slot",                        # Warns about assigning to attributes not defined in __slots__
    "assignment-from-no-return",                 # Warns about assigning result of a function that doesn't return
    "assignment-from-none",                      # Warns about assigning None to variables
    "bad-exception-cause",                       # Warns about incorrect exception causes
    "bad-format-character",                      # Warns about bad characters in format strings
    "bad-reversed-sequence",                     # Warns about reversing non-sequence objects
    "bad-super-call",                            # Warns about incorrect super() calls
    "bad-thread-instantiation",                  # Warns about incorrect threading.Thread subclass instantiation
    "catching-non-exception",                    # Warns about catching non-exception objects
    "comparison-with-callable",                  # Warns about comparisons between callable and non-callable
    "deprecated-class",                          # Warns about usage of deprecated classes
    "dict-iter-missing-items",                   # Warns about dict.iter*() methods missing .items()
    "format-combined-specification",             # Warns about combined format string specifications
    "global-variable-undefined",                 # Warns about undefined global variables
    "import-error",                              # Warns about imports that cannot be resolved
    "inconsistent-mro",                          # Warns about inconsistent method resolution order
    "inherit-non-class",                         # Warns about inheriting from non-class objects
    "init-is-generator",                         # Warns about __init__ methods declared as generators
    "invalid-class-object",                      # Warns about invalid objects in class statements
    "invalid-enum-extension",                    # Warns about invalid enum extensions
    "invalid-envvar-value",                      # Warns about invalid environment variable values
    "invalid-format-returned",                   # Warns about invalid values returned by __format__
    "invalid-hash-returned",                     # Warns about invalid values returned by __hash__
    "invalid-metaclass",                         # Warns about invalid metaclasses
    "invalid-overridden-method",                 # Warns about invalid method overrides
    "invalid-repr-returned",                     # Warns about invalid values returned by __repr__
    "invalid-sequence-index",                    # Warns about invalid sequence indices
    "invalid-slice-index",                       # Warns about invalid slice indices
    "invalid-slots",                             # Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.
    "invalid-slots-object",                      # Warns about invalid __slots__ objects
    "invalid-star-assignment-target",            # Warns about invalid targets in star assignments
    "invalid-str-returned",                      # Warns when __str__ doesn't return a string
    "invalid-unary-operand-type",                # Warns about invalid types for unary operators
    "invalid-unicode-codec",                     # Warns about invalid Unicode codec operations
    "isinstance-second-argument-not-valid-type", # Warns when isinstance() second argument is not a type
    "method-hidden",                             # Warns about methods hidden by instance attributes
    "misplaced-format-function",                 # Warns about misplaced string format method calls
    "missing-format-argument-key",               # Warns about missing keys in format string arguments
    "missing-format-attribute",                  # Warns about missing attributes in format strings
    "missing-kwoa",                              # Warns about missing keyword-only arguments
    # "no-member",
    "no-value-for-parameter",                       # Warns when a function call is missing a required parameter
    "non-iterator-returned",                        # Warns when a __iter__ method doesn't return an iterator
    "non-str-assignment-to-dunder-name",            # Warns when assigning non-string to __name__
    "nonlocal-and-global",                          # Warns when a variable is declared both nonlocal and global
    "not-a-mapping",                                # Warns when a non-mapping is used where a mapping is expected
    "not-an-iterable",                              # Warns when a non-iterable is used where an iterable is expected
    "not-async-context-manager",                    # Warns when an async context manager is expected but not used
    "not-callable",                                 # Warns when trying to call a non-callable object
    "not-context-manager",                          # Warns when a context manager is expected but not used
    "overridden-final-method",                      # Warns when a final method is overridden
    "raising-bad-type",                             # Warns when raising a non-exception type
    "raising-non-exception",                        # Warns when raising a non-exception object
    "redundant-keyword-arg",                        # Warns about redundant keyword arguments
    "relative-beyond-top-level",                    # Warns about relative imports beyond top-level package
    "self-cls-assignment",                          # Warns about assigning to self or cls in methods
    "signature-differs",                            # Warns when an overriding method's signature differs
    "star-needs-assignment-target",                 # Warns when * is used without an assignment target
    "subclassed-final-class",                       # Warns when a final class is subclassed
    "super-without-brackets",                       # Warns about using super without parentheses (Python 2 style)
    "too-many-function-args",                       # Warns when a function is called with too many arguments
    "typevar-double-variance",                      # Warns about TypeVar with conflicting variance
    "typevar-name-mismatch",                        # Warns when a TypeVar name doesn't match its parameter
    "unbalanced-dict-unpacking",                    # Warns about unbalanced dict unpacking in assignments
    "unbalanced-tuple-unpacking",                   # Warns about unbalanced tuple unpacking in assignments
    "unexpected-keyword-arg",                       # Warns about unexpected keyword arguments in function calls
    "unhashable-member",                            # Warns when trying to hash an unhashable object
    "unpacking-non-sequence",                       # Warns when trying to unpack a non-sequence
    "unsubscriptable-object",                       # Warns when trying to subscript a non-subscriptable object
    "unsupported-assignment-operation",             # Warns about unsupported assignment operations
    "unsupported-binary-operation",                 # Warns about unsupported binary operations
    "unsupported-delete-operation",                 # Warns about unsupported delete operations
    "unsupported-membership-test",                  # Warns about unsupported membership test operations
    "used-before-assignment",                       # Warns when a variable is used before it's assigned
    "using-final-decorator-in-unsupported-version", # Warns about using @final decorator in unsupported Python versions
    "wrong-exception-operation",                    # Warns about wrong operations on exception objects
]
enable = [
    "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

# SOURCE: https://github.com/atlassian-api/atlassian-python-api/blob/master/pyproject.toml
[tool.pylint.TYPECHECK]
# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members = 'numpy.*, torch.*, cv2.*, discord.*,logging.root.*'
ignored-classes = [
    "_CountingAttr", # for attrs
]
mixin-class-rgx = ".*[Mm]ix[Ii]n"

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"


[tool.pylint.TYPING]
runtime-typing = false

[tool.pylint.CODE_STYLE]
# Max line length for which to sill emit suggestions.
# Used to prevent optional suggestions which would get split by a code formatter
# (e.g., black). Will default to the setting for ``max-line-length``.
max-line-length-suggestions = 72

[tool.pylint.logging]
# Possible choices: ['old', 'new']
logging-format-style = "new"

logging-modules = ["logging", "loguru"]

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = false
min-similarity-lines = 5

# NOTE: see https://github.com/Ruzzy77/python-template/blob/57c8964f1efb2635d0bdca5684613a8d8736aed0/pyrightconfig.json
[tool.pyright]
include = [
    "src",
    "tests",
]
exclude = [
    "**/__pycache__",
    "build",
    "dist",
    "docs",
    "**/.venv",
    "**/node_modules",
    "**/__pycache__",
    ".git",
    "**/build",
    "tasks",
    "typings",
]
extraPaths = [
    ".venv",
]
############################################################################
# FIXME: THIS MIGHT BREAK SHIT
# SOURCE: https://github.com/charbonnierg/pytest-broadcaster/blob/e98456b2f6db7f99a034795f162ac0013a8001d7/pyproject.toml#L157C1-L158C15
venv = ".venv"
venvPath = "."
# FIXME: THIS MIGHT BREAK SHIT
############################################################################
defineConstant = {DEBUG = true}
stubPath = "./typings"
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#reportGeneralTypeIssues
reportUnnecessaryTypeIgnoreComment = "none"
pythonVersion = "3.12"
verboseOutput = true
reportUnusedImport = "none"
reportMissingImports = "error"
reportImportCycles = "error"
reportUnusedVariable = "none"
reportMissingTypeStubs = "warning"

reportUnusedFunction = "warning" # this is what we use in ad
reportUnusedClass = "warning"    # this is what we use in ad

reportUnknownVariableType = false
reportUnknownMemberType = false
reportUnknownArgumentType = false

# very strict errors
reportUnusedCallResult = false
reportImplicitStringConcatenation = false
reportCallInDefaultInitializer = true
reportAttributeAccessIssue = "error"

[tool.pydocstringformatter]
write = false
style = ["pep257"]
strip-whitespaces = true
# Activate or deactivate split-summary-body: Split the
# summary and body of a docstring based on a period and
# max length. The maximum length of a summary can be set
# with the --max-summary-lines option. Styles: pep257.
# (default: True)
split-summary-body = false
numpydoc-section-hyphen-length = false


[tool.pydocstyle]
convention = "pep257"



[tool.nbqa.md]
blacken-docs = true

[tool.nbqa.shell]
flake8heavened = true

</document_content>
</document>
<document index="2">
<source>/Users/malcolm/dev/bossjones/prompt-library/Justfile</source>
<document_content>
set shell := ["zsh", "-cu"]

# just manual: https://github.com/casey/just/#readme

# Ignore the .env file that is only used by the web service
set dotenv-load := false

CURRENT_DIR := "$(pwd)"

base64_cmd := if "{{os()}}" == "macos" { "base64 -w 0 -i cert.pem -o ca.pem" } else { "base64 -w 0 -i cert.pem > ca.pem" }
grep_cmd := if "{{os()}}" =~ "macos" { "ggrep" } else { "grep" }

# Variables
PYTHON := "uv run python"
UV_RUN := "uv run"

# Recipes
# Install the virtual environment and install the pre-commit hooks
install:
	@echo "🚀 Creating virtual environment using uv"
	uv sync
	uv tool upgrade pyright
	uv run pre-commit install

# Run code quality tools.
check:
	@echo "🚀 Checking lock file consistency with 'pyproject.toml'"
	uv lock --locked
	@echo "🚀 Linting code: Running pre-commit"
	uv run pre-commit run -a
	@echo "🚀 Static type checking: Running mypy"
	uv run mypy
	@echo "🚀 Checking for obsolete dependencies: Running deptry"
	uv run deptry .

# Test the code with pytest
test:
	@echo "🚀 Testing code: Running pytest"
	{{UV_RUN}} pytest --diff-width=60 --diff-symbols --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

test-marimo:
	@echo "🚀 Testing code: Running pytest"
	{{UV_RUN}} pytest --diff-width=60 --diff-symbols --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=. tests/pylint/test_marimo_cell_params_validator.py


# Build wheel file
build: clean-build
	@echo "🚀 Creating wheel file"
	uvx --from build pyproject-build --installer uv

# Clean build artifacts
clean-build:
	@echo "🚀 Removing build artifacts"
	{{PYTHON}} -c "import shutil; import os; shutil.rmtree('dist') if os.path.exists('dist') else None"

# Publish a release to PyPI.
publish:
	@echo "🚀 Publishing."
	uvx twine upload --repository-url https://upload.pypi.org/legacy/ dist/*

# Build and publish.
build-and-publish: build publish

# Test if documentation can be built without warnings or errors
docs-test:
	uv run mkdocs build -s

# Build and serve the documentation
docs:
	uv run mkdocs serve

help:
	@just --list

default: help


# Print the current operating system
info:
		print "OS: {{os()}}"

# Display system information
system-info:
	@echo "CPU architecture: {{ arch() }}"
	@echo "Operating system type: {{ os_family() }}"
	@echo "Operating system: {{ os() }}"

# verify python is running under pyenv
which-python:
		python -c "import sys;print(sys.executable)"

# when developing, you can use this to watch for changes and restart the server
autoreload-code:
	uv run watchmedo auto-restart --pattern "*.py" --recursive --signal SIGTERM uv run goobctl go

# Open the HTML coverage report in the default
local-open-coverage:
	./scripts/open-browser.py file://${PWD}/htmlcov/index.html

# Open the HTML coverage report in the default
open-coverage: local-open-coverage

# Run unit tests and open the coverage report
local-unittest:
	bash scripts/unittest-local
	./scripts/open-browser.py file://${PWD}/htmlcov/index.html

# Run all pre-commit hooks on all files
pre-commit-run-all:
	uv run pre-commit run --all-files

# Install pre-commit hooks
pre-commit-install:
	uv run pre-commit install

# Display the dependency tree of the project
pipdep-tree:
	pipdeptree --python .venv/bin/python3

# install uv tools globally
uv-tool-install:
	uv install invoke
	uv install pipdeptree
	uv install click

# Lint GitHub Actions workflow files
lint-github-actions:
	actionlint

# check that taplo is installed to lint/format TOML
check-taplo-installed:
	@command -v taplo >/dev/null 2>&1 || { echo >&2 "taplo is required but it's not installed. run 'brew install taplo'"; exit 1; }

# Format Python files using pre-commit
fmt-python:
	git ls-files '*.py' '*.ipynb' | xargs uv run pre-commit run --files

# Format Markdown files using pre-commit
fmt-markdown-pre-commit:
	git ls-files '*.md' | xargs uv run pre-commit run --files

# format pyproject.toml using taplo
fmt-toml:
	uv run pre-commit run taplo-format --all-files

# SOURCE: https://github.com/PovertyAction/ipa-data-tech-handbook/blob/ed81492f3917ee8c87f5d8a60a92599a324f2ded/Justfile

# Format all markdown and config files
fmt-markdown:
	git ls-files '*.md' | xargs uv run mdformat

# Format a single markdown file, "f"
fmt-md f:
	uv run mdformat {{ f }}

# format all code using pre-commit config
fmt: fmt-python fmt-toml fmt-markdown fmt-markdown fmt-markdown-pre-commit

# lint python files using ruff
lint-python:
	pre-commit run ruff --all-files

# lint TOML files using taplo
lint-toml: check-taplo-installed
	echo "noop"
# pre-commit run taplo-lint --all-files

# lint yaml files using yamlfix
lint-yaml:
	pre-commit run yamlfix --all-files

# lint pyproject.toml and detect log_cli = true
lint-check-log-cli:
	pre-commit run detect-pytest-live-log --all-files

# Check format of all markdown files
lint-check-markdown:
	uv run mdformat --check .

# Lint all files in the current directory (and any subdirectories).
lint: lint-python lint-check-log-cli

# generate type stubs for the project
createstubs:
	./scripts/createstubs.sh

# sweep init
sweep-init:
	uv run sweep init

# TODO: We should try out trunk
# By default, we use the following config that runs Trunk, an opinionated super-linter that installs all the common formatters and linters for your codebase. You can set up and configure Trunk for yourself by following https://docs.trunk.io/get-started.
# sandbox:
#   install:
#     - trunk init
#   check:
#     - trunk fmt {file_path}
#     - trunk check {file_path}

# Download AI models from Dropbox
download-models:
	curl -L 'https://www.dropbox.com/s/im6ytahqgbpyjvw/ScreenNetV1.pth?dl=1' > data/ScreenNetV1.pth

# Perform a dry run of dependency upgrades
upgrade-dry-run:
	uv lock --update-all --all-features

# Upgrade all dependencies and sync the environment
sync-upgrade-all:
	uv sync --update-all --all-features

# Start a background HTTP server for test fixtures
http-server-background:
	#!/bin/bash
	# _PID=$(pgrep -f " -m http.server --bind localhost 19000 -d ./tests/fixtures")
	pkill -f " -m http.server --bind localhost 19000 -d ./tests/fixtures"
	python3 -m http.server --bind localhost 19000 -d ./tests/fixtures &
	echo $! > PATH.PID

# Start an HTTP server for test fixtures
http-server:
	#!/bin/bash
	# _PID=$(pgrep -f " -m http.server --bind localhost 19000 -d ./tests/fixtures")
	pkill -f " -m http.server --bind localhost 19000 -d ./tests/fixtures"
	python3 -m http.server --bind localhost 19000 -d ./tests/fixtures
	echo $! > PATH.PID

# Bump the version by major
major-version-bump:
	uv version
	uv version --bump major

# Bump the version by minor
minor-version-bump:
	uv version
	uv version --bump minor

# Bump the version by patch
patch-version-bump:
	uv version
	uv version --bump patch

# Bump the version by major
version-bump-major: major-version-bump

# Bump the version by minor
version-bump-minor: minor-version-bump

# Bump the version by patch
version-bump-patch: patch-version-bump

# Serve the documentation locally for preview
docs_preview:
	uv run mkdocs serve

# Build the documentation
docs_build:
	uv run mkdocs build

# Deploy the documentation to GitHub Pages
docs_deploy:
	uv run mkdocs gh-deploy --clean

# Generate a draft changelog
changelog:
	uv run towncrier build --version main --draft

# Checkout main branch and pull latest changes
gco:
	gco main
	git pull --rebase

# Show diff for LangChain migration
langchain-migrate-diff:
	langchain-cli migrate --include-ipynb --diff prompt_library

# Perform LangChain migration
langchain-migrate:
	langchain-cli migrate --include-ipynb prompt_library

# Get the ruff config
get-ruff-config:
	uv run ruff check --show-settings --config pyproject.toml -v -o ruff_config.toml >> ruff.log 2>&1

# Run lint and test
ci:
	uv run lint
	uv run test

# Open a manhole shell
manhole-shell:
	./scripts/manhole-shell

# Find the cassettes directories
find-cassettes-dirs:
	fd -td cassettes

# Delete the cassettes directories
delete-cassettes:
	fd -td cassettes -X rm -ri

# Install brew dependencies
brew-deps:
	brew install libmagic poppler tesseract pandoc qpdf tesseract-lang
	brew install --cask libreoffice

# install aicommits and configure it
init-aicommits:
	npm install -g aicommits
	aicommits config set OPENAI_KEY=$OCO_OPENAI_API_KEY type=conventional model=gpt-4o max-length=100
	aicommits hook install

# Run aider
aider:
	uv run aider -c .aider.conf.yml --aiderignore .aiderignore

aider-o1-preview:
	uv run aider -c .aider.conf.yml --aiderignore .aiderignore --o1-preview --architect --edit-format whole --model o1-mini --no-stream

aider-sonnet:
	uv run aider -c .aider.conf.yml --aiderignore .aiderignore --sonnet --architect --map-tokens 2048 --cache-prompts --edit-format diff

# Run aider with Claude
aider-claude:
	uv run aider -c .aider.conf.yml --aiderignore .aiderignore --model 'anthropic/claude-3-5-sonnet-20241022'


# SOURCE: https://github.com/RobertCraigie/prisma-client-py/blob/da53c4280756f1a9bddc3407aa3b5f296aa8cc10/Makefile#L77
# Remove all generated files and caches
clean:
	#!/bin/bash
	rm -rf .cache
	rm -rf `find . -name __pycache__`
	rm -rf .tests_cache
	rm -rf .mypy_cache
	rm -rf htmlcov
	rm -rf *.egg-info
	rm -f .coverage
	rm -f .coverage.*
	rm -rf build
	rm -rf dist
	rm -f coverage.xml

# Create a token for authentication
uv_create_token:
	{{PYTHON}} -c "from prompt_library.cli import create_token; create_token()"

# Show current database state
uv_db_current:
	{{PYTHON}} -c "from prompt_library.cli import db_current; db_current()"

# Upgrade database to latest version
uv_db_upgrade:
	{{PYTHON}} -c "from prompt_library.cli import db_upgrade; db_upgrade()"

# Downgrade database to previous version
uv_db_downgrade:
	{{PYTHON}} -c "from prompt_library.cli import db_downgrade; db_downgrade()"

# Export a collection of data
uv_export_collection:
	{{PYTHON}} -c "from prompt_library.cli import export_collection; export_collection()"

# Import a collection of data
uv_import_collection:
	{{PYTHON}} -c "from prompt_library.cli import import_collection; import_collection()"

# Import a single file
uv_import_file:
	{{PYTHON}} -c "from prompt_library.cli import import_file; import_file()"

# Lint markdown files
uv_lint_markdown:
	{{UV_RUN}} pymarkdownlnt --disable-rules=MD013,MD034 scan README.md

# Serve documentation locally
uv_serve_docs:
	{{UV_RUN}} mkdocs serve

# Convert pylint configuration to ruff
uv_pylint_to_ruff:
	{{UV_RUN}} pylint-to-ruff

# Start a simple HTTP server
uv_http:
	{{UV_RUN}} -m http.server 8008

# Display current user
uv_whoami:
	whoami

# Install missing mypy type stubs
uv_mypy_missing:
	{{UV_RUN}} mypy --install-types

# Run pre-commit hooks on all files
uv_fmt:
	{{UV_RUN}} pre-commit run --all-files

# Run pylint checks
uv_pylint:
	{{PYTHON}} -m invoke ci.pylint --everything

# Run pylint with error-only configuration
uv_pylint_error_only:
	{{UV_RUN}} pylint --output-format=colorized --disable=all --max-line-length=120 --enable=F,E --rcfile pyproject.toml src/prompt_library tests

# Run pylint on all files
uv_lint_all:
	{{PYTHON}} -m pylint -j4 --output-format=colorized --rcfile pyproject.toml tests prompt_library

# Run ruff linter
uv_lint:
	{{PYTHON}} -m ruff check --fix . --config=pyproject.toml

# Run all typecheck tasks
uv_typecheck:
	just uv_typecheck_pyright
	just uv_typecheck_mypy

# Run Pyright type checker
uv_typecheck_pyright:
	{{UV_RUN}} pyright -p pyproject.toml .

# Verify types using Pyright, ignoring external packages
uv_typecheck_verify_types:
	{{UV_RUN}} pyright --verifytypes prompt_library --ignoreexternal --verbose

# Run MyPy type checker and open coverage report
uv_typecheck_mypy:
	just uv_ci_mypy
	just uv_open_mypy_coverage

# Generate changelog draft
uv_docs_changelog:
	{{UV_RUN}} towncrier build --version main --draft

# Run MyPy with various report formats
uv_ci_mypy:
	{{UV_RUN}} mypy --config-file=pyproject.toml --html-report typingcov --cobertura-xml-report typingcov_cobertura --xml-report typingcov_xml --txt-report typingcov_txt .

# Open MyPy coverage report
uv_open_mypy_coverage:
	open typingcov/index.html

# Open Zipkin UI
uv_open_zipkin:
	open http://127.0.0.1:9411

# Open OpenTelemetry endpoint
uv_open_otel:
	open http://127.0.0.1:4317

# Open test coverage report
uv_open_coverage:
	just local-open-coverage

# Open pgAdmin
uv_open_pgadmin:
	open http://127.0.0.1:4000

# Open Prometheus UI
uv_open_prometheus:
	open http://127.0.0.1:9999

# Open Grafana UI
uv_open_grafana:
	open http://127.0.0.1:3333

# Open Chroma UI
uv_open_chroma:
	open http://127.0.0.1:9010

# Open ChromaDB Admin UI
uv_open_chromadb_admin:
	open http://127.0.0.1:4001

# Open all UIs and reports
uv_open_all:
	just uv_open_mypy_coverage
	just uv_open_chroma
	just uv_open_zipkin
	just uv_open_otel
	just uv_open_pgadmin
	just uv_open_prometheus
	just uv_open_grafana
	just uv_open_chromadb_admin
	just uv_open_coverage


# Run simple unit tests with coverage
uv_unittests_simple:
	{{UV_RUN}} pytest --diff-width=60 --diff-symbols --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run unit tests in debug mode with extended output
uv_unittests_debug:
	{{UV_RUN}} pytest -s -vv --diff-width=60 --diff-symbols --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run service-related unit tests in debug mode
uv_unittests_debug_services:
	{{UV_RUN}} pytest -m services -s -vv --diff-width=60 --diff-symbols --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run asynciotyper-related unit tests in debug mode
uv_unittests_debug_asynciotyper:
	{{UV_RUN}} pytest -s -vv --diff-width=60 --diff-symbols --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=. -m asynciotyper

# Run pgvector-related unit tests in debug mode
uv_unittests_debug_pgvector:
	{{UV_RUN}} pytest -m pgvectoronly -s -vv --diff-width=60 --diff-symbols --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Profile unit tests in debug mode using pyinstrument
uv_profile_unittests_debug:
	{{UV_RUN}} pyinstrument -m pytest -s -vv --diff-width=60 --diff-symbols --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Profile unit tests in debug mode using py-spy
uv_spy_unittests_debug:
	{{UV_RUN}} py-spy top -- python -m pytest -s -vv --diff-width=60 --diff-symbols --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run standard unit tests with coverage
uv_unittests:
	{{UV_RUN}} pytest --verbose --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run unit tests with VCR in record mode
uv_unittests_vcr_record:
	{{UV_RUN}} pytest --record-mode=all --verbose --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run unit tests with VCR in rewrite mode
uv_unittests_vcr_record_rewrite:
	{{UV_RUN}} pytest --record-mode=rewrite --verbose --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run unit tests with VCR in once mode
uv_unittests_vcr_record_once:
	{{UV_RUN}} pytest --record-mode=once --verbose --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run all VCR recording tests
uv_unittests_vcr_record_all: uv_unittests_vcr_record

# Run final VCR recording tests (NOTE: this is the only one that works)
uv_unittests_vcr_record_final: uv_unittests_vcr_record

# Run simple tests without warnings
uv_test_simple:
	{{UV_RUN}} pytest -p no:warnings

# Alias for simple tests without warnings
uv_simple_test:
	{{UV_RUN}} pytest -p no:warnings

# Run unit tests in debug mode with extended output
uv_new_unittests_debug:
	# {{UV_RUN}} pytest -s --verbose --pdb --pdbcls bpdb:BPdb --showlocals --tb=short
	{{UV_RUN}} pytest -s -vv --diff-width=60 --diff-symbols --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --cov-append --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml:cov.xml --cov-report=html:htmlcov --cov-report=annotate:cov_annotate --cov=.

# Run linting and unit tests
uv_test:
	just uv_lint
	just uv_unittests

# Combine coverage data
uv_coverage_combine:
	{{UV_RUN}} python -m coverage combine

# Generate HTML coverage report
uv_coverage_html:
	{{UV_RUN}} python -m coverage html --skip-covered --skip-empty

# Run pytest with coverage
uv_coverage_pytest:
	{{UV_RUN}} coverage run --rcfile=pyproject.toml -m pytest tests

# Run pytest with coverage in debug mode
uv_coverage_pytest_debug:
	{{UV_RUN}} coverage run --rcfile=pyproject.toml -m pytest --verbose -vvv --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --capture=no tests

# Run pytest with coverage for evals in debug mode
uv_coverage_pytest_evals_debug:
	{{UV_RUN}} coverage run --rcfile=pyproject.toml -m pytest --verbose -vv --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --capture=no -m evals --slow tests

# Run pytest with coverage and memray in debug mode
uv_memray_coverage_pytest_debug:
	{{UV_RUN}} coverage run --rcfile=pyproject.toml -m pytest --verbose -vvv --memray --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --capture=no tests

# Run pytest with coverage and memray for evals in debug mode
uv_memray_coverage_pytest_evals_debug:
	{{UV_RUN}} coverage run --rcfile=pyproject.toml -m pytest --verbose --memray -vv --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --capture=no -m evals --slow tests

# Generate and view coverage report
uv_coverage_report:
	just uv_coverage_pytest
	just uv_coverage_combine
	just uv_coverage_show
	just uv_coverage_html
	just uv_coverage_open

# Generate and view coverage report in debug mode
uv_coverage_report_debug:
	just uv_coverage_pytest_debug
	just uv_coverage_combine
	just uv_coverage_show
	just uv_coverage_html
	just uv_coverage_open

# Generate and view coverage report for evals in debug mode
uv_coverage_report_debug_evals:
	just uv_coverage_pytest_debug
	just uv_coverage_pytest_evals_debug
	just uv_coverage_combine
	just uv_coverage_show
	just uv_coverage_html
	just uv_coverage_open

# Run end-to-end tests with coverage in debug mode
uv_e2e_coverage_pytest_debug:
	{{UV_RUN}} coverage run --rcfile=pyproject.toml -m pytest --verbose --pdb --pdbcls bpdb:BPdb --showlocals --tb=short --capture=no tests -m e2e

# Generate and view end-to-end coverage report in debug mode
uv_e2e_coverage_report_debug:
	just uv_e2e_coverage_pytest_debug
	just uv_coverage_combine
	just uv_coverage_show
	just uv_coverage_html
	just uv_coverage_open

# Show coverage report
uv_coverage_show:
	{{UV_RUN}} python -m coverage report --fail-under=5

# Open coverage report
uv_coverage_open:
	just local-open-coverage

# Run linting and tests (CI)
uv_ci:
	just uv_lint
	just uv_test

# Run debug unit tests and open coverage report (CI debug)
uv_ci_debug:
	just uv_unittests_debug
	just uv_coverage_open

# Run simple unit tests and open coverage report (CI simple)
uv_ci_simple:
	just uv_unittests_simple
	just uv_coverage_open

# Run CI with evals
uv_ci_with_evals:
	just uv_coverage_pytest_debug
	just uv_coverage_pytest_evals_debug
	just uv_coverage_combine
	just uv_coverage_show
	just uv_coverage_html
	just uv_coverage_open

# Run CI with evals and memray
uv_ci_with_evals_memray:
	just uv_memray_coverage_pytest_debug
	just uv_memray_coverage_pytest_evals_debug
	just uv_coverage_combine
	just uv_coverage_show
	just uv_coverage_html
	just uv_coverage_open

# Deploy documentation to GitHub Pages
uv_gh_deploy:
	{{UV_RUN}} mkdocs gh-deploy --force --message '[skip ci] Docs updates'

# Create site directory
uv_mkdir_site:
	mkdir site

# Deploy documentation
uv_deploy_docs:
	just uv_mkdir_site
	just uv_gh_deploy

# Add bespoke adobe concepts to cursor context
add-cursor-context:
	mkdir -p vendored || true
	gh repo clone universityofprofessorex/cerebro-bot vendored/cerebro-bot || true && cd vendored/cerebro-bot && git checkout feature-discord-utils && cd ../../..
	gh repo clone langchain-ai/retrieval-agent-template vendored/retrieval-agent-template || true
	gh repo clone langchain-ai/rag-research-agent-template vendored/rag-research-agent-template || true
	gh repo clone langchain-ai/memory-template vendored/memory-template || true
	gh repo clone langchain-ai/react-agent vendored/react-agent || true
	gh repo clone langchain-ai/chat-langchain vendored/chat-langchain || true
	gh repo clone bossjones/goob_ai vendored/goob_ai || true
	gh repo clone langchain-ai/langchain vendored/langchain || true
	gh repo clone langchain-ai/langgraph vendored/langgraph || true
	gh repo clone CraftSpider/dpytest vendored/dpytest || true
	gh repo clone marimo-team/marimo vendored/marimo || true

	rm -rf vendored/cerebro-bot/.git
	rm -rf vendored/retrieval-agent-template/.git
	rm -rf vendored/rag-research-agent-template/.git
	rm -rf vendored/memory-template/.git
	rm -rf vendored/react-agent/.git
	rm -rf vendored/chat-langchain/.git
	rm -rf vendored/goob_ai/.git
	rm -rf vendored/langchain/.git
	rm -rf vendored/langgraph/.git
	rm -rf vendored/langchain-academy/.git
	rm -rf vendored/dpytest/.git
	rm -rf vendored/marimo/.git

# List outdated packages
outdated:
	{{UV_RUN}} pip list --outdated

install-llm-cli-plugins:
	uv add llm
	uv add llm-cmd llm-clip llm-sentence-transformers llm-replicate llm-perplexity llm-claude-3 llm-python llm-gemini llm-jq
# {{UV_RUN}} llm install llm-cmd
# {{UV_RUN}} llm install llm-clip
# {{UV_RUN}} llm install llm-sentence-transformers
# {{UV_RUN}} llm install llm-replicate
# {{UV_RUN}} llm install llm-perplexity
# {{UV_RUN}} llm install llm-claude-3
# {{UV_RUN}} llm install llm-python
# {{UV_RUN}} llm install llm-json
# {{UV_RUN}} llm install llm-markdown
# {{UV_RUN}} llm install llm-sql

smoke-test:
	cd prompt_library/agentic/studio/react && {{UV_RUN}} python -m memory_agent

# Commitizen commands
# commit using commitizen
commit:
	{{UV_RUN}} cz commit

commit-help:
	{{UV_RUN}} cz commit -h

# bump version using commitizen
bump:
	{{UV_RUN}} cz bump

# tag using commitizen
tag:
	{{UV_RUN}} cz tag

# release using commitizen
release:
	{{UV_RUN}} cz release

# bump patch version using commitizen
bump-patch:
	{{UV_RUN}} cz bump --patch

# bump minor version using commitizen
bump-minor:
	{{UV_RUN}} cz bump --minor

# bump major version using commitizen
bump-major:
	{{UV_RUN}} cz bump --major

# bump prerelease version using commitizen
bump-prerelease:
	{{UV_RUN}} cz bump --prerelease

# bump postrelease version using commitizen
bump-postrelease:
	{{UV_RUN}} cz bump --postrelease

# Generate AI commit messages
ai-commit:
	aicommits --generate 3 --type conventional

# Run the bot
run:
	{{UV_RUN}} democracyctl run-bot

# https://github.com/langchain-ai/langchain/blob/fbf0704e48273d40a9068ee2078ffe4374185338/docs/docs/integrations/document_loaders/readthedocs_documentation.ipynb#L36

# Download the read the docs
download-read-the-docs:
	wget -r -A.html -P rtdocs https://python.langchain.com/en/latest/

# Marimo Notebook Commands

# Edit the marimo demo notebook
marimo-demo-edit:
	{{UV_RUN}} marimo edit marimo_is_awesome_demo.py

# Run the marimo demo notebook
marimo-demo-run:
	{{UV_RUN}} marimo run marimo_is_awesome_demo.py

# Edit the ad-hoc prompting notebook
marimo-adhoc-edit:
	{{UV_RUN}} marimo edit marimo_adhoc_prompting.py

# Run the ad-hoc prompting notebook
marimo-adhoc-run:
	{{UV_RUN}} marimo run marimo_adhoc_prompting.py

# Edit the prompt library notebook
marimo-library-edit:
	{{UV_RUN}} marimo edit marimo_prompt_library.py

# Run the prompt library notebook
marimo-library-run:
	{{UV_RUN}} marimo run marimo_prompt_library.py

# Edit the multi-LLM prompting notebook
marimo-multi-llm-edit:
	{{UV_RUN}} marimo edit marimo_multi_llm_prompting.py

# Run the multi-LLM prompting notebook
marimo-multi-llm-run:
	{{UV_RUN}} marimo run marimo_multi_llm_prompting.py

# Edit the multi language model ranker notebook
marimo-ranker-edit:
	{{UV_RUN}} marimo edit marimo_multi_language_model_ranker.py

# Run the multi language model ranker notebook
marimo-ranker-run:
	{{UV_RUN}} marimo run marimo_multi_language_model_ranker.py

# Edit the prompt analysis notebook
marimo-analysis-edit:
	{{UV_RUN}} marimo edit marimo_prompt_analysis.py

# Run the prompt analysis notebook
marimo-analysis-run:
	{{UV_RUN}} marimo run marimo_prompt_analysis.py

# Run all marimo notebooks
marimo-run-all:
	{{UV_RUN}} marimo run marimo_is_awesome_demo.py marimo_adhoc_prompting.py marimo_prompt_library.py marimo_multi_llm_prompting.py marimo_multi_language_model_ranker.py marimo_prompt_analysis.py



# Tree the project while respecting .gitignore
tree:
	tree -C -I '__pycache__|*.py[cod]|*$$py.class|*.so|build|develop-eggs|dist|downloads|eggs|.eggs|lib|lib64|parts|sdist|var|wheels|share/python-wheels|*.egg-info|.installed.cfg|*.egg|MANIFEST|*.manifest|*.spec|pip-log.txt|pip-delete-this-directory.txt|htmlcov|.tox|.nox|.coverage|.coverage.*|.cache|nosetests.xml|coverage.xml|*.cover|*.py,cover|.hypothesis|.pytest_cache|cover|*.mo|*.pot|*.log|local_settings.py|db.sqlite3|db.sqlite3-journal|instance|.webassets-cache|.scrapy|docs/_build|.pybuilder|target|.ipynb_checkpoints|profile_default|ipython_config.py|__pypackages__|celerybeat-schedule|celerybeat.pid|*.sage.py|.env|.venv|env|venv|ENV|env.bak|venv.bak|.spyderproject|.spyproject|.ropeproject|site|.mypy_cache|.dmypy.json|dmypy.json|.pyre|.pytype|cython_debug|.idea|.vscode|*.swp|.DS_Store|.sass-cache|*.css.map|*.pyc|database.db|messages.db|*.avi|*.hdf5|*.h5|*.pth|*.zip|.virtual_documents|chroma|file.out|*.sqlite|.env.langraph|datasets|.envrc'


# Getting corefiles
corefiles:
	{{UV_RUN}} files-to-prompt -e rs -e py -e toml --ignore "node_modules|__pycache__|scripts|debug|.o|deps|release|target|inputs" . | pbcopy

install-youtube-transcript:
	cargo install youtube-transcript

pylint-to-ruff:
	{{UV_RUN}} pylint-to-ruff

test-debug: uv_new_unittests_debug open-coverage

pyright-verify-types:
	#!/bin/bash
	# Get the list of installed packages
	packages=$(uv run pip freeze | cut -d '=' -f 1)

	rm -f pyright-verify-types.log
	touch pyright-verify-types.log

	# Iterate through each package
	for package in $packages; do
			echo "Checking package: $package"
			echo "----------------------------------------"

			# Run pyright and print the output
			# uv run pyright --verifytypes "$package" --verbose
			uv run pyright --verifytypes "$package" | tee -a pyright-verify-types.log

			echo "----------------------------------------"
	done

	echo "Verification complete."

pyright-createstubs-missing:
	#!/bin/bash
	# Run pyright and capture output
	uv run pyright . | grep -E "warning: Stub file not found for \"[^\"]+\"" | sed -E 's/.*"([^"]+)".*/\1/' | sort -u | while read package; do
		echo "Creating stub for package: $package"
		uv run pyright --createstub "$package"
	done

copy-rules:
	@echo "🚀 Starting the copy process..."
	cp -av cursorrules.xml .cursorrules
	cp -av cursorrules.xml aider_configs/aider_rules
	@echo "✅ Copy completed successfully!"

# PYTHONPATH=. uv run pylint --load-plugins=marimo_cell_params_validator --disable=all --enable=marimo_cell_params_validator ../../mariomo_prompt_library.py

pylint-plugin-debug:
	PYTHONPATH=pylint/plugins/. {{UV_RUN}} pylint --load-plugins=marimo_cell_params_validator --disable=all --enable=marimo_cell_params_validator mariomo_prompt_library.py


# run pylint with the marimo cell params validator plugin
pylint-plugin-debug-bad:
	PYTHONPATH=pylint/plugins/. {{UV_RUN}} pylint --verbose --load-plugins=marimo_cell_params_validator --disable=all --enable=marimo_cell_params_validator marimo_bad.py

# run pylint with the marimo cell params validator plugin
pylint-plugin-debug-good:
	PYTHONPATH=pylint/plugins/. {{UV_RUN}} pylint --load-plugins=marimo_cell_params_validator --disable=all --enable=marimo_cell_params_validator marimo_prompt_library.py

test-pylint-plugin: test pylint-plugin-debug-bad

hass-files-to-prompt:
	@echo "🚀 Running files-to-promt for hass pylint plugin example"
	uv run files-to-prompt \
	/Users/malcolm/dev/home-assistant/core/pyproject.toml \
	/Users/malcolm/dev/home-assistant/core/pylint/plugins/hass_decorator.py \
	/Users/malcolm/dev/home-assistant/core/pylint/ruff.toml \
	/Users/malcolm/dev/home-assistant/core/tests/pylint/__init__.py \
	/Users/malcolm/dev/home-assistant/core/tests/pylint/conftest.py \
	/Users/malcolm/dev/home-assistant/core/tests/pylint/test_decorator.py \
	--cxml \
	-o \
	/Users/malcolm/dev/bossjones/prompt-library/ai_docs/hass_example_pylint_plugin/hass_pylint_plugin_output.xml
	bat --theme=Nord /Users/malcolm/dev/bossjones/prompt-library/ai_docs/hass_example_pylint_plugin/hass_pylint_plugin_output.xml
	@echo "🚀 Running files-to-promt for prompt-library pylint plugin example"
	uv run files-to-prompt \
	/Users/malcolm/dev/bossjones/prompt-library/pyproject.toml \
	/Users/malcolm/dev/bossjones/prompt-library/Justfile \
	/Users/malcolm/dev/bossjones/prompt-library/pylint/plugins/marimo_cell_params_validator.py \
	/Users/malcolm/dev/bossjones/prompt-library/pylint/ruff.toml \
	/Users/malcolm/dev/bossjones/prompt-library/tests/pylint/__init__.py \
	/Users/malcolm/dev/bossjones/prompt-library/tests/pylint/conftest.py \
	/Users/malcolm/dev/bossjones/prompt-library/tests/pylint/test_marimo_cell_params_validator.py \
	--cxml \
	-o \
	/Users/malcolm/dev/bossjones/prompt-library/ai_docs/hass_example_pylint_plugin/prompt_library_pylint_plugin_output.xml
	bat --theme=Nord /Users/malcolm/dev/bossjones/prompt-library/ai_docs/hass_example_pylint_plugin/prompt_library_pylint_plugin_output.xml

</document_content>
</document>
<document index="3">
<source>/Users/malcolm/dev/bossjones/prompt-library/pylint/plugins/marimo_cell_params_validator.py</source>
<document_content>
"""Pylint plugin for checking Marimo cell parameter usage.

This module provides a custom pylint checker for enforcing Marimo cell parameter standards.
It ensures that cell parameters are actually used within the cell.
"""

# pyright: reportAttributeAccessIssue=false
from __future__ import annotations

import copy
import fnmatch
import linecache
import re
import tokenize


# import pdb
# pdb.set_trace()
from typing import Any, Dict, Final, Generator, List, Optional, Pattern, Set, Tuple, TypedDict, cast

import astroid
import pysnooper

from astroid import nodes
from astroid.nodes import AssignName, Attribute, Name, NodeNG
from loguru import logger

from pylint import lint
from pylint import utils as pylint_utils
from pylint.checkers import BaseChecker
from pylint.lint import PyLinter


# NOTE: borrowing from https://github.com/oppia/oppia/blob/develop/scripts/linters/pylint_extensions.py
# List of punctuation symbols that can be used at the end of
# comments and docstrings.
ALLOWED_TERMINATING_PUNCTUATIONS: Final = ['.', '?', '}', ']', ')']

# If any of these phrases are found inside a docstring or comment,
# the punctuation and capital letter checks will be skipped for that
# comment or docstring.
EXCLUDED_PHRASES: Final = [
    'coding:', 'pylint:', 'http://', 'https://', 'scripts/', 'extract_node'
]

ALLOWED_PRAGMAS_FOR_INLINE_COMMENTS: Final = [
    'pylint:', 'isort:', 'type: ignore', 'pragma:', 'https:', 'docker:'
]

ALLOWED_LINES_OF_GAP_IN_COMMENT: Final = 15

from pylint import checkers  # isort:skip  pylint: disable=wrong-import-order, wrong-import-position
from pylint import interfaces  # isort:skip  pylint: disable=wrong-import-order, wrong-import-position
from pylint.checkers import utils as checker_utils  # isort:skip  pylint: disable=wrong-import-order, wrong-import-position
from pylint.extensions import _check_docs_utils # isort:skip  pylint: disable=wrong-import-order, wrong-import-position


def read_from_node(node: astroid.scoped_nodes.Module) -> list[str]:
    """Returns the data read from the ast node in unicode form.

    Args:
        node: astroid.scoped_nodes.Module. Node to access module content.

    Returns:
        list(str). The data read from the ast node.
    """
    # Readlines returns bytes, thus we need to decode them to string.
    return [line.decode('utf-8') for line in node.stream().readlines()]


# @pysnooper.snoop(thread_info=True, max_variable_length=None, depth=10)
class MarimoCellParamsChecker(BaseChecker):  # type: ignore[misc]
    """Checker for enforcing Marimo cell parameter usage standards.

    This checker ensures that:
    1. All cell parameters are actually used within the cell
    2. No unused parameters in cell function definitions
    3. Only necessary dependencies are declared

    Attributes:
        name: The name of the checker
        priority: The priority level of the checker
        msgs: Dictionary of warning messages and their descriptions
        linter: The pylint linter instance
    """


    name = "marimo_cell_params_validator"
    priority = -1
    msgs = {
        # Each message has a code, a message that the user will see,
        # a unique symbol that identifies the message,
        # and a detailed help message
        # that will be included in the documentation.

        "W9301": (
            "Unused cell parameter '%s'",
            "unused-cell-parameter",
            "Cell parameters should only include variables that are actually used in the cell. "
            "Remove unused parameters.",
        ),
    }

    # This class variable declares the options
    # that are configurable by the user.

    options = (
        # Each option definition has a name which is used on the command line
        # and in config files, and a dictionary of arguments
        # (similar to argparse.ArgumentParser.add_argument).
        (
            "ignore-marimo-unused-params",
            {
                "default": False,
                "type": "yn",
                "metavar": "<y or n>",
                "help": "Force checking of unused parameters even in non-marimo files",
            },
        ),
    )

    def __init__(self, linter: Optional[PyLinter] = None) -> None:
        """Initialize the checker.

        Args:
            linter: The pylint linter instance
        """
        super().__init__(linter if linter is not None else PyLinter())
        self._used_names: set[str] = set()
        self._current_cell_params: set[str] = set()

    def _is_marimo_notebook(self) -> bool:
        """Check if the current file is a marimo notebook.

        Returns:
            bool: True if the file is a marimo notebook (starts with 'marimo_'),
                 False otherwise.
        """
        try:
            current_file = cast(Any, self.linter.current_file)
            filename = getattr(current_file, 'name', '')
            return (
                filename.startswith("marimo_") or
                "marimo" in filename or
                filename.endswith("_notebook.py") or
                filename.endswith("_test.py")
            )
        except AttributeError:
            return False

    def _has_app_cell_decorator(self, node: nodes.FunctionDef | nodes.AsyncFunctionDef) -> bool:
        """Check if a function has the @app.cell decorator.

        Args:
            node: The function definition node to check.

        Returns:
            bool: True if the function has the @app.cell decorator, False otherwise.
        """
        try:
            if not hasattr(node, "decorators") or not node.decorators:
                return False

            for decorator in node.decorators.nodes:
                if isinstance(decorator, (Name, Attribute)) and decorator.as_string() == "app.cell":
                    return True
            return False
        except AttributeError:
            return False

    # @pysnooper.snoop(output='/Users/malcolm/dev/bossjones/prompt-library/pylint-debug.log', thread_info=True, max_variable_length=None, depth=10)
    def visit_functiondef(self, node: nodes.FunctionDef | nodes.AsyncFunctionDef) -> None:
        """Visit and check a function definition node.

        Args:
            node: The function definition node to visit.
        """

        if not self._is_marimo_notebook():
            return

        if not self._has_app_cell_decorator(node):
            return

        # import bpdb
        # bpdb.set_trace()

        # Reset state for new cell
        self._used_names = set()
        self._current_cell_params = set()

        # Collect parameter names
        for arg in node.args.args:
            self._current_cell_params.add(arg.name)

        # Walk the function body to collect used names
        for child in node.body:
            child.accept(self)

        # Check for unused parameters immediately
        for param in self._current_cell_params:
            if param not in self._used_names:
                self.add_message(
                    "unused-cell-parameter",
                    node=node,
                    args=(param,),
                )

    def leave_functiondef(self, node: nodes.FunctionDef) -> None:
        """Leave a function definition node and check for unused parameters.

        Args:
            node: The function definition node to leave.
        """
        if not self._is_marimo_notebook():
            return

        if not self._has_app_cell_decorator(node):
            return

        # Check for unused parameters
        for param in self._current_cell_params:
            if param not in self._used_names:
                self.add_message(
                    "unused-cell-parameter",
                    node=node,
                    args=(param,),
                )

    def visit_name(self, node: nodes.Name) -> None:
        """Visit and check a name node.

        Args:
            node: The name node to visit.
        """
        if not self._is_marimo_notebook():
            return

        # Track name usage in load context (when variable is used)
        if isinstance(node, nodes.Name):
            ctx_name = getattr(node.ctx, "name", "")
            if ctx_name == "Load":
                self._used_names.add(node.name)


def register(linter: PyLinter) -> None:
    """Register the MarimoCellParamsChecker with pylint.

    Args:
        linter: The pylint linter instance to register the checker with.
    """
    linter.register_checker(MarimoCellParamsChecker(linter))

</document_content>
</document>
<document index="4">
<source>/Users/malcolm/dev/bossjones/prompt-library/pylint/ruff.toml</source>
<document_content>
# This extend our general Ruff rules specifically for tests
extend = "../pyproject.toml"

[lint]
extend-ignore = [
    "INP001", # File is part of an implicit namespace package. Add an `__init__.py`.
]

[lint.isort]
known-third-party = [
    "pylint",
]

</document_content>
</document>
<document index="5">
<source>/Users/malcolm/dev/bossjones/prompt-library/tests/pylint/__init__.py</source>
<document_content>
"""Tests for pylint."""

from __future__ import annotations

import contextlib

import pysnooper

from loguru import logger

from pylint.testutils.unittest_linter import UnittestLinter


# @pysnooper.snoop(thread_info=True, max_variable_length=None, depth=10)
@contextlib.contextmanager
def assert_no_messages(linter: UnittestLinter):
    """Assert that no messages are added by the given method."""
    with assert_adds_messages(linter):
        yield


@contextlib.contextmanager
def assert_adds_messages(linter: UnittestLinter, *messages):
    """Assert that exactly the given method adds the given messages.

    The list of messages must exactly match *all* the messages added by the
    method. Additionally, we check to see whether the args in each message can
    actually be substituted into the message string.
    """
    yield
    # import bpdb

    # bpdb.set_trace()
    got = linter.release_messages()
    no_msg = "No message."
    expected = "\n".join(repr(m) for m in messages) or no_msg
    got_str = "\n".join(repr(m) for m in got) or no_msg
    msg = f"Expected messages did not match actual.\n\nExpected:\n{expected}\n\nGot:\n{got_str}\n"
    assert got == list(messages), msg

</document_content>
</document>
<document index="6">
<source>/Users/malcolm/dev/bossjones/prompt-library/tests/pylint/conftest.py</source>
<document_content>
"""Configuration for pylint tests."""

from __future__ import annotations

import sys

from importlib.util import module_from_spec, spec_from_file_location
from pathlib import Path
from types import ModuleType
from typing import TYPE_CHECKING

import pytest

from pylint.checkers import BaseChecker
from pylint.testutils.unittest_linter import UnittestLinter


if TYPE_CHECKING:
    from _pytest.capture import CaptureFixture
    from _pytest.fixtures import FixtureRequest
    from _pytest.logging import LogCaptureFixture
    from _pytest.monkeypatch import MonkeyPatch

    from pytest_mock.plugin import MockerFixture

BASE_PATH = Path(__file__).resolve().parents[2]
if not (BASE_PATH / "pylint" / "plugins").is_dir():
    raise RuntimeError(f"Could not find pylint plugins directory in {BASE_PATH}")


def _load_plugin_from_file(module_name: str, file: str) -> ModuleType:
    """Load plugin from file path.

    Args:
        module_name: Name of the module to load
        file: Path to the file relative to BASE_PATH

    Returns:
        ModuleType: The loaded module

    Raises:
        AssertionError: If the module spec or loader is not found
    """
    full_path = BASE_PATH.joinpath(file)
    if not full_path.exists():
        raise FileNotFoundError(f"Plugin file not found: {full_path}")

    spec = spec_from_file_location(
        module_name,
        str(full_path),
    )
    if not spec or not spec.loader:
        raise ImportError(f"Could not load module {module_name} from {file}")

    module = module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)
    return module


@pytest.fixture(name="marimo_cell_validator", scope="package")
def marimo_cell_validator_fixture() -> ModuleType:
    """Fixture to provide the Marimo cell validator module.

    Returns:
        ModuleType: The loaded Marimo cell validator module
    """
    return _load_plugin_from_file(
        "marimo_cell_validator",
        "pylint/plugins/marimo_cell_validator.py",
    )


# @pytest.fixture(name="marimo_imports_validator", scope="package")
# def marimo_imports_validator_fixture() -> ModuleType:
#     """Fixture to provide the Marimo imports validator module.

#     Returns:
#         ModuleType: The loaded Marimo imports validator module
#     """
#     return _load_plugin_from_file(
#         "marimo_imports_validator",
#         "pylint/plugins/marimo_imports_validator.py",
#     )


# @pytest.fixture(name="marimo_function_validator", scope="package")
# def marimo_function_validator_fixture() -> ModuleType:
#     """Fixture to provide the Marimo function validator module.

#     Returns:
#         ModuleType: The loaded Marimo function validator module
#     """
#     return _load_plugin_from_file(
#         "marimo_function_validator",
#         "pylint/plugins/marimo_function_validator.py",
#     )


# @pytest.fixture(name="marimo_cell_params_validator", scope="package")
# def marimo_cell_params_validator_fixture() -> ModuleType:
#     """Fixture to provide the Marimo cell parameters validator module.

#     Returns:
#         ModuleType: The loaded Marimo cell parameters validator module
#     """
#     return _load_plugin_from_file(
#         "marimo_cell_params_validator",
#         "pylint/plugins/marimo_cell_params_validator.py",
#     )


# @pytest.fixture(name="marimo_checker")
# def marimo_checker_fixture() -> ModuleType:
#     """Fixture to provide the Marimo cell validator module.

#     Returns:
#         ModuleType: The loaded Marimo cell validator module
#     """
#     return _load_plugin_from_file(
#         "marimo_cell_validator",
#         "pylint/plugins/marimo_cell_validator.py",
#     )


# @pytest.fixture(name="marimo_imports_checker")
# def marimo_imports_checker_fixture() -> ModuleType:
#     """Fixture to provide the Marimo imports validator module.

#     Returns:
#         ModuleType: The loaded Marimo imports validator module
#     """
#     return _load_plugin_from_file(
#         "marimo_imports_validator",
#         "pylint/plugins/marimo_imports_validator.py",
#     )


# @pytest.fixture(name="marimo_function_checker")
# def marimo_function_checker_fixture() -> ModuleType:
#     """Fixture to provide the Marimo function validator module.

#     Returns:
#         ModuleType: The loaded Marimo function validator module
#     """
#     return _load_plugin_from_file(
#         "marimo_function_validator",
#         "pylint/plugins/marimo_function_validator.py",
#     )


@pytest.fixture(name="marimo_cell_params_checker")
def marimo_cell_params_checker_fixture() -> ModuleType:
    """Fixture to provide the Marimo cell parameters validator module.

    Returns:
        ModuleType: The loaded Marimo cell parameters validator module
    """
    return _load_plugin_from_file(
        "marimo_cell_params_validator",
        "pylint/plugins/marimo_cell_params_validator.py",
    )


@pytest.fixture(name="linter")
def linter_fixture() -> UnittestLinter:
    """Fixture to provide a pylint linter instance.

    Returns:
        UnittestLinter: A configured pylint linter instance
    """
    return UnittestLinter()


# @pytest.fixture(name="hass_enforce_type_hints", scope="package")
# def hass_enforce_type_hints_fixture() -> ModuleType:
#     """Fixture to provide the Home Assistant type hints checker module.

#     Returns:
#         ModuleType: The loaded type hints checker module
#     """
#     return _load_plugin_from_file(
#         "hass_enforce_type_hints",
#         "pylint/plugins/hass_enforce_type_hints.py",
#     )


# @pytest.fixture(name="type_hint_checker")
# def type_hint_checker_fixture(hass_enforce_type_hints: ModuleType, linter: UnittestLinter) -> BaseChecker:
#     """Fixture to provide a type hint checker instance.

#     Args:
#         hass_enforce_type_hints: The type hint checker module
#         linter: The pylint linter instance

#     Returns:
#         BaseChecker: An instance of the type hint checker
#     """
#     checker = hass_enforce_type_hints.HassTypeHintChecker(linter)
#     checker.module = "homeassistant.components.pylint_test"
#     return checker

</document_content>
</document>
<document index="7">
<source>/Users/malcolm/dev/bossjones/prompt-library/tests/pylint/test_marimo_cell_params_validator.py</source>
<document_content>
"""Tests for the Marimo cell parameters validator."""

from __future__ import annotations

from types import ModuleType

import astroid
import pysnooper

from _pytest.logging import LogCaptureFixture
from astroid.builder import parse as astroid_parse
from astroid.nodes import Module
from loguru import logger

import pytest

from pylint.checkers import BaseChecker
from pylint.interfaces import UNDEFINED
from pylint.testutils import MessageTest
from pylint.testutils.unittest_linter import UnittestLinter
from pylint.utils.ast_walker import ASTWalker

from . import assert_adds_messages, assert_no_messages


def test_good_cell_params(linter: UnittestLinter, marimo_cell_params_checker: ModuleType) -> None:
    """Test that properly used cell parameters are not flagged.

    Args:
        linter: The pylint linter instance
        marimo_cell_params_checker: The cell parameter checker
    """
    code = """
    @app.cell
    def __():
        import os, sys
        return (os, sys)

    @app.cell
    def __(os, sys):
        result = os.path.join(sys.path[0])
        return (result,)
    """
    root_node = astroid_parse(code, "marimo_test.py")
    walker = ASTWalker(linter)
    walker.add_checker(marimo_cell_params_checker)

    with assert_no_messages(linter):
        walker.walk(root_node)


# @pysnooper.snoop(thread_info=True, max_variable_length=None, depth=10)
@pytest.mark.parametrize(
    ("code", "param_name", "line_num", "path"),
    [
        (
            """
            @app.cell
            def __():
                import os
                return (os,)

            @app.cell
            def __(os, unused_param):
                result = os.path.join("/tmp")
                return (result,)
            """,
            "unused_param",
            8,
            "marimo_test.py",
        ),
        (
            """
            @app.cell
            def __():
                import os, sys
                return (os, sys)

            @app.cell
            def __(os, unused1, sys, unused2):
                result = os.path.join(sys.path[0])
                return (result,)
            """,
            "unused1",
            8,
            "marimo_test.py",
        ),
        (
            """
            @app.cell
            def __():
                import pandas as pd
                return (pd,)

            @app.cell
            def __(pd, extra):
                df = pd.DataFrame()
                return (df,)
            """,
            "extra",
            8,
            "marimo_test.py",
        ),
        (
            """
            @app.cell
            def __():
                import numpy as np
                return (np,)

            @app.cell
            def __(np, unused_config):
                arr = np.array([1, 2, 3])
                return (arr,)
            """,
            "unused_config",
            8,
            "marimo_notebook.py",
        ),
    ],
)
def test_bad_cell_params(
    linter: UnittestLinter,
    marimo_cell_params_checker: ModuleType,
    code: str,
    param_name: str,
    line_num: int,
    path: str,
    caplog: LogCaptureFixture,
) -> None:
    """Test that unused cell parameters are properly detected and reported.

    Args:
        linter: The pylint linter instance
        marimo_cell_params_checker: The cell parameter checker
        code: The test code to analyze
        param_name: The name of the parameter expected to be flagged
        line_num: The line number where the error should be reported
        path: The file path to use for the test
    """
    logger.info(f"Running test_bad_cell_params with code: {code}")
    logger.info(f"Path: {path}")
    logger.info(f"Line num: {line_num}")
    logger.info(f"Param name: {param_name}")

    # import bpdb
    # bpdb.set_trace()

    root_node: Module = astroid_parse(code, path)
    walker = ASTWalker(linter)
    walker.add_checker(marimo_cell_params_checker)

    with assert_adds_messages(
        linter,
        MessageTest(
            msg_id="unused-cell-parameter",
            line=line_num,
            node=next(
                node
                for node in root_node.body
                if isinstance(node, astroid.nodes.FunctionDef)
                and node.name == "__"
                and any(
                    isinstance(dec, (astroid.nodes.Name, astroid.nodes.Attribute)) and dec.as_string() == "app.cell"
                    for dec in node.decorators.nodes
                )
            ),
            args=(param_name,),
            confidence=UNDEFINED,
            col_offset=0,
            end_line=line_num,
            end_col_offset=13,
        ),
    ):
        walker.walk(root_node)


@pytest.mark.parametrize(
    ("code", "path"),
    [
        (
            """
            def regular_function(unused_param):
                return 42
            """,
            "marimo_test.py",
        ),
        (
            """
            class TestClass:
                def method(self, unused_param):
                    pass
            """,
            "marimo_test.py",
        ),
        (
            """
            @some_other_decorator
            def decorated_func(unused_param):
                return True
            """,
            "marimo_test.py",
        ),
        (
            """
            def __init__(self, unused_param):
                pass
            """,
            "marimo_test.py",
        ),
    ],
)
def test_non_cell_functions(
    linter: UnittestLinter,
    marimo_cell_params_checker: ModuleType,
    code: str,
    path: str,
) -> None:
    """Test that non-cell functions are properly ignored.

    Args:
        linter: The pylint linter instance
        marimo_cell_params_checker: The cell parameter checker
        code: The test code to analyze
        path: The file path to use for the test
    """
    root_node = astroid_parse(code, path)
    walker = ASTWalker(linter)
    walker.add_checker(marimo_cell_params_checker)

    with assert_no_messages(linter):
        walker.walk(root_node)


@pytest.mark.parametrize(
    ("code", "path"),
    [
        (
            """
            @app.cell
            def __(unused_param):
                return (42,)
            """,
            "regular_file.py",
        ),
        (
            """
            @app.cell
            def __(x, y, unused):
                return (x + y,)
            """,
            "not_marimo.py",
        ),
        (
            """
            @app.cell
            def __(data, config):
                # Config is used in a string context
                print(f"Using config: {config}")
                return (data,)
            """,
            "marimo_test.py",
        ),
    ],
)
def test_non_marimo_files_and_special_cases(
    linter: UnittestLinter,
    marimo_cell_params_checker: ModuleType,
    code: str,
    path: str,
) -> None:
    """Test that non-marimo files and special parameter cases are properly handled.

    Args:
        linter: The pylint linter instance
        marimo_cell_params_checker: The cell parameter checker
        code: The test code to analyze
        path: The file path to use for the test
    """
    root_node = astroid_parse(code, path)
    walker = ASTWalker(linter)
    walker.add_checker(marimo_cell_params_checker)

    with assert_no_messages(linter):
        walker.walk(root_node)

</document_content>
</document>
</documents>
