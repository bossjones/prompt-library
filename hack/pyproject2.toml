[project]
name = "prompt-library"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
  { name = "Malcolm Jones", email = "bossjones@theblacktonystark.com" },
]
keywords = ["python"]
requires-python = ">=3.12"
classifiers = [
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "copier>=9.4.1",
  "llm-cmd>=0.2a0",
  "llm>=0.19.1",
  "llm-clip>=0.1",
  "llm-sentence-transformers>=0.2",
  "llm-replicate>=0.3.1",
  "llm-perplexity>=2024.11.0",
  "llm-claude-3>=0.10",
  "llm-python>=0.1",
  "loguru>=0.7.3",
  "better-exceptions>=0.3.3",
  "promptim>=0.0.7",
  "marimo>=0.9.32",
  "rich>=13.9.4",
  "datachain>=0.7.9",
  "transformers>=4.47.0",
  "imutils>=0.5.4",
  "imageio>=2.36.1",
  "logging-tree>=1.10",
  "typer>=0.15.1",
  "files-to-prompt>=0.4",
  "python-dotenv>=1.0.1",
  "pydantic-settings>=2.6.1",
  "altair>=5.5.0",
  "vega-datasets>=0.9.0",
  "pandas>=2.2.3",
  "matplotlib>=3.9.3",
  "mako>=1.3.8",
  "pyperclip>=1.9.0",
  "defusedxml>=0.7.1",
  "langchain-anthropic>=0.3.0",
  "langchain-chroma>=0.1.4",
  "langchain-community>=0.3.10",
  "langchain-core>=0.3.22",
  "langchain-fireworks>=0.2.5",
  "langchain-google-genai>=2.0.6",
  "langchain-groq>=0.2.1",
  "langchain-openai>=0.2.11",
  "langchain>=0.3.10",
  "langgraph-checkpoint-sqlite>=2.0.1",
  "langgraph-sdk>=0.1.43",
  "langgraph>=0.2.56",
  "langsmith>=0.1.147",
  "asyncer>=0.0.8",
  "codetiming>=1.4.0",
  "uritools>=4.0.3",
]

[dependency-groups]
dev = [
  "bpython>=0.24",
  "coverage[toml]>=7.6.9",
  "pre-commit>=4.0.1",
  "pylint-pydantic>=0.3.4",
  "pysnooper>=1.2.1",
  "pytest-cov>=6.0.0",
  "pytest>=8.3.4",
  "pytest-aiohttp>=1.0.5",
  "pytest-asyncio>=0.24.0",
  "pytest-clarity>=1.0.1",
  "pytest-httpx>=0.35.0",
  "pytest-ignore-flaky>=2.2.1",
  "pytest-memray>=1.7.0",
  "pytest-mock>=3.14.0",
  "pytest-recording>=0.13.2",
  "pytest-retry>=1.6.3",
  "pytest-skip-slow>=0.0.5",
  "pytest-sugar>=1.0.0",
  "pyupgrade>=3.19.0",
  "ruff>=0.8.2",
  "tox-uv>=1.16.1",
  "pylint-to-ruff>=0.3.0",
]

[project.urls]
Homepage = "https://bossjones.github.io/democracy-exe/"
Repository = "https://github.com/bossjones/prompt-library"
Documentation = "https://bossjones.github.io/prompt-library/"

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project.scripts]
prompt_library = "prompt_library:main"
[tool.ruff]
target-version = "py312"
line-length = 120
fix = true
extend-include = [
  "*.ipynb",
  "src/*.ipynb",
  "notebook/*.ipynb",
  "notebooks/*.ipynb",
  "notebooks/*.py",
  "*.py",
  "*.pyi",
  "**/pyproject.toml",
  "*.ipynb",
  "pyproject.toml",
  "src/**/*.py",
]
output-format = "full"
force-exclude = true
respect-gitignore = true
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]
extend-exclude = [
  "__pycache__",
  "__pypackages__",
  "_build",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git-rewrite",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "**/__pycache__",
  "buck-out",
  "build",
  "data",
  "data/*",
  "dist",
  "docs",
  "doc",
  "git",
  "logs/*",
  "node_modules",
  "tests/data",
  "venv",
  "typings",
  "contrib",
  ".marimo",
]
unsafe-fixes = false

[tool.ruff.lint]
unfixable = ["ERA"]
fixable = ["ALL"]
select = [
  "YTT",
  "S",
  "B",
  "A",
  "C4",
  "T10",
  "SIM",
  "I",
  "C90",
  "E",
  "W",
  "F",
  "PGH",
  "UP",
  "RUF",
  "C90",
  "I002",
  "N812",
  "NPY001",
]
ignore = [
  "N807",
  "C408",
  "UP031",
  "UP040",
  "SIM110",
  "SIM103",
  "RUF012",
  "A002",
  "RUF008",
  "RUF013",
  "S602",
  "RUF006",
  "SIM108",
  "C416",
  "SIM101",
  "B007",
  "RUF002",
  "S608",
  "SIM116",
  "S101",
  "B904",
  "SIM117",
  "UP038",
  "A001",
  "SIM115",
  "S113",
  "S108",
  "S605",
  "C417",
  "B018",
  "S105",
  "UP007",
  "TRY003",
  "N815",
  "PLW0603",
  "D",
  "COM812",
  "ISC001",
  "N804",
  "F821",
  "PLR1722",
  "N802",
  "N801",
  "PLW0602",
  "PLW2901",
  "YTT201",
  "E722",
  "PLC0132",
  "PLW0128",
  "W191",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
  "E501",
  "E721",
  "E741",
  "E731",
  "PLR1714",
  "N818",
  "PLW0127",
  "PT012",
  "N806",
  "E712",
  "E711",
  "W505",
  "PT006",
  "PLR2004",
  "N812",
  "F841",
  "TID",
  "F401",
  "F402",
  "F403",
  "F404",
  "F405",
  "F406",
  "E401",
  "E402",
  "UP026",
  "UP029",
  "UP035",
  "ICN",
  "TCH",
  "PLC0414",
  "PLC0415",
  "PLC2403",
  "PLC2701",
  "PLR0402",
  "PLW0406",
  "B027",
  "FBT003",
  "C901",
  "PLR0904",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0914",
  "PLR0915",
  "PLR0916",
  "PLR0917",
  "PLR1702",
  "AIR",
  "CPY",
  "D",
  "PD",
  "ANN",
  "FIX",
  "TD001",
  "TD002",
  "TD003",
  "PTH",
  "FURB101",
  "RET501",
  "RET502",
  "PT004",
  "PT005",
  "ERA001",
  "S404",
  "S603",
  "SIM401",
  "PGH003",
  "PGH004",
  "PERF203",
  "FURB140",
  "E111",
  "E114",
  "E117",
  "E301",
  "E302",
  "E303",
  "E304",
  "E305",
  "E306",
  "E501",
  "W191",
  "D206",
  "D300",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "Q004",
  "PLE1141",
  "PLE1142",
  "Q",
  "N999",
  "S702",
  "S607",
  "S314",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.mccabe]
max-complexity = 31

[tool.ruff.lint.per-file-ignores]
"src/prompt_library/models/loggers/__init__.py" = [
  "N815",
  "B005",
  "RUF005",
  "F811",
]
"src/prompt_library/agentic/studio/react/*" = ["N815", "B005", "RUF005"]
"src/prompt_library/agentic/studio/*" = ["N815", "B005", "RUF005"]
"cookbook/studio/*" = ["N815", "B005", "RUF005"]
"src/prompt_library/agentic/graph.py" = ["N815", "B005", "RUF005"]
"src/prompt_library/agentic/studio/graph.py" = ["N815", "B005", "RUF005"]
"src/prompt_library/prompt_library/gen_ai/models/vectorstores/*" = ["N815"]
"tests/*" = ["PT011", "S101"]
"src/prompt_library/prompt_library/tutorials/design_patterns/practical_examples/*" = [
  "PT018",
  "PLW0211",
  "ISC003",
  "N803",
]
"__init__.py" = ["F401", "E402"]
"**/{tests,docs,doc}/*" = ["E402"]
"conf/*" = ["D"]
"demo/*" = ["D"]
"docs/*" = ["D"]
"test/*" = ["D"]
"tests/conftest.py" = ["D", "F811"]
"*.pyi" = ["D", "E501", "E701", "I002"]
"marimo_fix.py" = [
  "B005",
  "D",
  "F811",
  "N803",
  "N806",
  "N807",
  "N815",
  "RUF005",
]
"marimo_prompt_analysis.py" = [
  "B005",
  "D",
  "F811",
  "N803",
  "N806",
  "N807",
  "N815",
  "RUF005",
]
"marimo_prompt_library.py" = [
  "B005",
  "D",
  "F811",
  "N803",
  "N806",
  "N807",
  "N815",
  "RUF005",
]
"mariomo_multi_language_model_ranker.py" = [
  "B005",
  "D",
  "F811",
  "N803",
  "N806",
  "N807",
  "N815",
  "RUF005",
]
"mariomo_multi_llm_prompting.py" = [
  "B005",
  "D",
  "F811",
  "N803",
  "N806",
  "N807",
  "N815",
  "RUF005",
]
"mariomo_prompt_library.py" = [
  "B005",
  "D",
  "F811",
  "N803",
  "N806",
  "N807",
  "N815",
  "RUF005",
]
"pylint/plugins/*.py" = ["SIM102"]

[tool.ruff.lint.isort]
lines-between-types = 1
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]
known-third-party = [
  "boto3",
  "fastapi",
  "langchain",
  "pydantic",
  "beautifulsoup4",
  "langchain_community",
  "langchain_openai",
  "openai",
  "requests",
  "discord",
  "uvicorn",
]
split-on-trailing-comma = false
known-first-party = ["src", "tests"]
known-local-folder = ["src/*"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "pytest",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.isort.sections]
pytest = ["conftest", "pytest", "pytest_mock"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
runtime-evaluated-decorators = ["pydantic.dataclasses.dataclass"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
ignore-decorators = ["typing.overload"]
property-decorators = ["gi.repository.GObject.Property"]
convention = "pep257"

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
max-line-length = 120

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312"]

[tool.coverage.report]
skip_empty = true
exclude_lines = [
  "\\(Protocol\\):$",
  "\\s*\\.\\.\\.\\$",
  "@(abc.)?abstractmethod",
  "@overload",
  "@typing.overload",
  "assert_never",
  "def __repr__",
  "def __str__",
  "except ImportError:",
  "if __name__ == .__main__.:",
  "if not _PANDAS_AVAILABLE:",
  "if self.debug",
  "if settings.DEBUG",
  "if TYPE_CHECKING:",
  "if TYPE_CHECKING",
  "if typing.TYPE_CHECKING:",
  "pragma: $TEST_PLATFORM no cover",
  "pragma: no cover",
  "pragma: py$PYTHON_MAJOR_VERSION no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "return NotImplemented",
  "typing.assert_never",
]
omit = [
  "test/*",
  "tests/*",
  "src/agentic/studio/*",
  "cookbook/studio/*",
  "hello.py",
]
fail_under = 10
ignore_errors = false
show_missing = true
skip_covered = false

[tool.coverage.paths]
source = ["src/", "/src"]

[tool.coverage.run]
parallel = true
branch = true
source = ["prompt_library"]
concurrency = ["thread", "greenlet", "multiprocessing"]
omit = ["**/src/tutorials/**"]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "cov.xml"

# [tool.pytest.ini_options]
# testpaths = ["tests"]
# filterwarnings = [
#     'ignore:configuration option "asyncio_default_fixture_loop_scope" is unset',
# ]
# pythonpath = "."
# asyncio_mode = "auto"
# asyncio_default_fixture_loop_scope = "function"
# addopts = [
#     '--durations=10',
#     '--durations-min=1.0',
#     '--junitxml=junit/test-results.xml',
#     '--cov-report=annotate:cov_annotate',
# ]
# log_cli = false
# log_cli_level = "DEBUG"
# log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
# log_cli_date_format = "%Y-%m-%d %H:%M:%S"
# log_file = "pytest-accuracy-debug.log"
# log_file_date_format = "%Y-%m-%d %H:%M:%S"
# log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
# log_file_level = "DEBUG"
# markers = [
#     "cogs: marks tests that run code that utilizes the cogs module (deselect with '-m \"not cogs\"')",
#     "configonly: marks tests that run code that utilizes the config module (deselect with '-m \"not configonly\"')",
#     "e2e: marks tests dealing with e2e testing (deselect with '-m \"not e2e\"')",
#     "evals: marks tests as evals (run with '-m evals')",
#     "fast: marks tests as fast (run with '-m fast')",
#     "httpclientonly: marks tests that run code that utilizes the http_client module (deselect with '-m \"not httpclientonly\"')",
#     "imgops: marks tests as imgops (run with '-m imgops')",
#     "integration: marks tests dealing with integration testing (deselect with '-m \"not integration\"')",
#     "onboardingonly: marks tests that run code that utilizes the new_dev_onboarding_tool module (


[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312"]

[tool.coverage.report]
skip_empty = true
exclude_lines = [
  "\\(Protocol\\):$",
  "\\s*\\.\\.\\.\\$",
  "@(abc.)?abstractmethod",
  "@overload",
  "@typing.overload",
  "assert_never",
  "def __repr__",
  "def __str__",
  "except ImportError:",
  "if __name__ == .__main__.:",
  "if not _PANDAS_AVAILABLE:",
  "if self.debug",
  "if settings.DEBUG",
  "if TYPE_CHECKING:",
  "if TYPE_CHECKING",
  "if typing.TYPE_CHECKING:",
  "pragma: $TEST_PLATFORM no cover",
  "pragma: no cover",
  "pragma: py$PYTHON_MAJOR_VERSION no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "return NotImplemented",
  "typing.assert_never",
]
omit = [
  "test/*",
  "tests/*",
  "src/agentic/studio/*",
  "cookbook/studio/*",
  "hello.py",
]
fail_under = 10
ignore_errors = false
show_missing = true
skip_covered = false

[tool.coverage.paths]
source = ["src/", "/src"]

[tool.coverage.run]
parallel = true
branch = true
source = ["prompt_library"]
concurrency = ["thread", "greenlet", "multiprocessing"]
omit = ["**/src/tutorials/**"]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "cov.xml"

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
  'ignore:configuration option "asyncio_default_fixture_loop_scope" is unset',
]
pythonpath = "."
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
  '--durations=10',
  '--durations-min=1.0',
  '--junitxml=junit/test-results.xml',
  '--cov-report=annotate:cov_annotate',
]
log_cli = false
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "pytest-accuracy-debug.log"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_level = "DEBUG"
markers = [
  "cogs: marks tests that run code that utilizes the cogs module (deselect with '-m \"not cogs\"')",
  "configonly: marks tests that run code that utilizes the config module (deselect with '-m \"not configonly\"')",
  "e2e: marks tests dealing with e2e testing (deselect with '-m \"not e2e\"')",
  "evals: marks tests as evals (run with '-m evals')",
  "fast: marks tests as fast (run with '-m fast')",
  "httpclientonly: marks tests that run code that utilizes the http_client module (deselect with '-m \"not httpclientonly\"')",
  "imgops: marks tests as imgops (run with '-m imgops')",
  "integration: marks tests dealing with integration testing (deselect with '-m \"not integration\"')",
  "onboardingonly: marks tests that run code that utilizes the new_dev_onboarding_tool module (deselect with '-m \"not onboardingonly\"')",
  "utilsonly: marks tests that run code that utilizes any utils module (deselect with '-m \"not utilsonly\"')",
  "retryonly: marks tests that run code that utilizes the retry module (deselect with '-m \"not retryonly\"')",
  "skip_in_parallel: marks tests that should be run in serial only (deselect with '-m \"not skip_in_parallel\"')",
  "slow: marks tests as slow (run with '-m slow')",
  "toolonly: marks tests that run code that utilizes a Custom Langchain tool module in the tools directory (deselect with '-m \"not toolonly\"')",
  "toolonly: marks tests that run code that utilizes llm tool classes (deselect with '-m \"not toolonly\"')",
  "unittest: marks tests dealing with unittest (deselect with '-m \"not unittest\"')",
  "vectorstoronly: marks tests that run code that utilizes the flex_vector_store_tool module (deselect with '-m \"not vectorstoronly\"')",
  "visiontoolonly: marks tests that run code that utilizes vision_tool.py (deselect with '-m \"not visiontoolonly\"')",
  "webpagetoolonly: marks tests that run code that utilizes the fetch_webpage_tool module (deselect with '-m \"not webpagetoolonly\"')",
  "vcronly: marks tests that run code that utilizes the vcr module (deselect with '-m \"not vcronly\"')",
  "vcrcanary: marks tests that run code that utilizes the vcr test canary module (deselect with '-m \"not vcrcanary\"')",
  "pgvectoronly: marks tests that run code that utilizes the pgvector module (deselect with '-m \"not pgvectoronly\"')",
  "services: marks tests that run code that belongs to the services module (deselect with '-m \"not services\"')",
  "slower: marks tests that run code that belongs to the slower calls at end of pytest run module (deselect with '-m \"not slower\"')",
  "discordonly: marks tests that run code that belongs to the discordonly calls at end of pytest run module (deselect with '-m \"not discordonly\"')",
  "cursorgenerated: marks tests that are cursor generated (deselect with '-m \"not cursorgenerated\"')",
  "aidergenerated: marks tests that are aider generated (deselect with '-m \"not aidergenerated\"')",
  "asynciotyper: marks tests that are asyncio typer generated (deselect with '-m \"not asynciotyper\"')",
  "cli: marks tests that are cli generated (deselect with '-m \"not cli\"')",
]
